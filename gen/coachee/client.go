// Code generated by goa v3.0.9, DO NOT EDIT.
//
// coachee client
//
// Command:
// $ goa gen coachee-backend/design

package coachee

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "coachee" service client.
type Client struct {
	GetCoachesEndpoint                        goa.Endpoint
	GetCoachEndpoint                          goa.Endpoint
	LenCoachesEndpoint                        goa.Endpoint
	CreateCoachEndpoint                       goa.Endpoint
	LoginCoachEndpoint                        goa.Endpoint
	StartCoachPasswordRecoveryFlowEndpoint    goa.Endpoint
	CheckCoachPasswordRecoveryTokenEndpoint   goa.Endpoint
	FinalizeCoachPasswordRecoveryFlowEndpoint goa.Endpoint
	UpdateCoachEndpoint                       goa.Endpoint
	CreateCertificationEndpoint               goa.Endpoint
	DeleteCertificationEndpoint               goa.Endpoint
	CreateProgramEndpoint                     goa.Endpoint
	DeleteProgramEndpoint                     goa.Endpoint
	CreateAvailabilityEndpoint                goa.Endpoint
	DeleteAvailabilityEndpoint                goa.Endpoint
	CreateCustomerEndpoint                    goa.Endpoint
	CustomerLoginEndpoint                     goa.Endpoint
	StartPasswordRecoveryFlowEndpoint         goa.Endpoint
	CheckPasswordRecoveryTokenEndpoint        goa.Endpoint
	FinalizePasswordRecoveryFlowEndpoint      goa.Endpoint
	CreateOrderEndpoint                       goa.Endpoint
	RegisterStripeExpressEndpoint             goa.Endpoint
}

// NewClient initializes a "coachee" service client given the endpoints.
func NewClient(getCoaches, getCoach, lenCoaches, createCoach, loginCoach, startCoachPasswordRecoveryFlow, checkCoachPasswordRecoveryToken, finalizeCoachPasswordRecoveryFlow, updateCoach, createCertification, deleteCertification, createProgram, deleteProgram, createAvailability, deleteAvailability, createCustomer, customerLogin, startPasswordRecoveryFlow, checkPasswordRecoveryToken, finalizePasswordRecoveryFlow, createOrder, registerStripeExpress goa.Endpoint) *Client {
	return &Client{
		GetCoachesEndpoint:                        getCoaches,
		GetCoachEndpoint:                          getCoach,
		LenCoachesEndpoint:                        lenCoaches,
		CreateCoachEndpoint:                       createCoach,
		LoginCoachEndpoint:                        loginCoach,
		StartCoachPasswordRecoveryFlowEndpoint:    startCoachPasswordRecoveryFlow,
		CheckCoachPasswordRecoveryTokenEndpoint:   checkCoachPasswordRecoveryToken,
		FinalizeCoachPasswordRecoveryFlowEndpoint: finalizeCoachPasswordRecoveryFlow,
		UpdateCoachEndpoint:                       updateCoach,
		CreateCertificationEndpoint:               createCertification,
		DeleteCertificationEndpoint:               deleteCertification,
		CreateProgramEndpoint:                     createProgram,
		DeleteProgramEndpoint:                     deleteProgram,
		CreateAvailabilityEndpoint:                createAvailability,
		DeleteAvailabilityEndpoint:                deleteAvailability,
		CreateCustomerEndpoint:                    createCustomer,
		CustomerLoginEndpoint:                     customerLogin,
		StartPasswordRecoveryFlowEndpoint:         startPasswordRecoveryFlow,
		CheckPasswordRecoveryTokenEndpoint:        checkPasswordRecoveryToken,
		FinalizePasswordRecoveryFlowEndpoint:      finalizePasswordRecoveryFlow,
		CreateOrderEndpoint:                       createOrder,
		RegisterStripeExpressEndpoint:             registerStripeExpress,
	}
}

// GetCoaches calls the "GetCoaches" endpoint of the "coachee" service.
func (c *Client) GetCoaches(ctx context.Context, p *GetCoachesPayload) (res []*Coach, err error) {
	var ires interface{}
	ires, err = c.GetCoachesEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.([]*Coach), nil
}

// GetCoach calls the "GetCoach" endpoint of the "coachee" service.
func (c *Client) GetCoach(ctx context.Context, p *GetCoachPayload) (res *Coach, err error) {
	var ires interface{}
	ires, err = c.GetCoachEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*Coach), nil
}

// LenCoaches calls the "LenCoaches" endpoint of the "coachee" service.
func (c *Client) LenCoaches(ctx context.Context, p *LenCoachesPayload) (res uint, err error) {
	var ires interface{}
	ires, err = c.LenCoachesEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(uint), nil
}

// CreateCoach calls the "CreateCoach" endpoint of the "coachee" service.
func (c *Client) CreateCoach(ctx context.Context, p *CreateCoachPayload) (res uint, err error) {
	var ires interface{}
	ires, err = c.CreateCoachEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(uint), nil
}

// LoginCoach calls the "LoginCoach" endpoint of the "coachee" service.
func (c *Client) LoginCoach(ctx context.Context, p *LoginCoachPayload) (res *LoginCoachResult, err error) {
	var ires interface{}
	ires, err = c.LoginCoachEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*LoginCoachResult), nil
}

// StartCoachPasswordRecoveryFlow calls the "StartCoachPasswordRecoveryFlow"
// endpoint of the "coachee" service.
func (c *Client) StartCoachPasswordRecoveryFlow(ctx context.Context, p *StartCoachPasswordRecoveryFlowPayload) (err error) {
	_, err = c.StartCoachPasswordRecoveryFlowEndpoint(ctx, p)
	return
}

// CheckCoachPasswordRecoveryToken calls the "CheckCoachPasswordRecoveryToken"
// endpoint of the "coachee" service.
func (c *Client) CheckCoachPasswordRecoveryToken(ctx context.Context, p *CheckCoachPasswordRecoveryTokenPayload) (err error) {
	_, err = c.CheckCoachPasswordRecoveryTokenEndpoint(ctx, p)
	return
}

// FinalizeCoachPasswordRecoveryFlow calls the
// "FinalizeCoachPasswordRecoveryFlow" endpoint of the "coachee" service.
func (c *Client) FinalizeCoachPasswordRecoveryFlow(ctx context.Context, p *FinalizeCoachPasswordRecoveryFlowPayload) (err error) {
	_, err = c.FinalizeCoachPasswordRecoveryFlowEndpoint(ctx, p)
	return
}

// UpdateCoach calls the "UpdateCoach" endpoint of the "coachee" service.
func (c *Client) UpdateCoach(ctx context.Context, p *UpdateCoachPayload) (err error) {
	_, err = c.UpdateCoachEndpoint(ctx, p)
	return
}

// CreateCertification calls the "CreateCertification" endpoint of the
// "coachee" service.
func (c *Client) CreateCertification(ctx context.Context, p *CreateCertificationPayload) (err error) {
	_, err = c.CreateCertificationEndpoint(ctx, p)
	return
}

// DeleteCertification calls the "DeleteCertification" endpoint of the
// "coachee" service.
func (c *Client) DeleteCertification(ctx context.Context, p *DeleteCertificationPayload) (err error) {
	_, err = c.DeleteCertificationEndpoint(ctx, p)
	return
}

// CreateProgram calls the "CreateProgram" endpoint of the "coachee" service.
func (c *Client) CreateProgram(ctx context.Context, p *CreateProgramPayload) (err error) {
	_, err = c.CreateProgramEndpoint(ctx, p)
	return
}

// DeleteProgram calls the "DeleteProgram" endpoint of the "coachee" service.
func (c *Client) DeleteProgram(ctx context.Context, p *DeleteProgramPayload) (err error) {
	_, err = c.DeleteProgramEndpoint(ctx, p)
	return
}

// CreateAvailability calls the "CreateAvailability" endpoint of the "coachee"
// service.
func (c *Client) CreateAvailability(ctx context.Context, p *CreateAvailabilityPayload) (err error) {
	_, err = c.CreateAvailabilityEndpoint(ctx, p)
	return
}

// DeleteAvailability calls the "DeleteAvailability" endpoint of the "coachee"
// service.
func (c *Client) DeleteAvailability(ctx context.Context, p *DeleteAvailabilityPayload) (err error) {
	_, err = c.DeleteAvailabilityEndpoint(ctx, p)
	return
}

// CreateCustomer calls the "CreateCustomer" endpoint of the "coachee" service.
func (c *Client) CreateCustomer(ctx context.Context, p *CreateCustomerPayload) (res *CreateCustomerResult, err error) {
	var ires interface{}
	ires, err = c.CreateCustomerEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*CreateCustomerResult), nil
}

// CustomerLogin calls the "CustomerLogin" endpoint of the "coachee" service.
func (c *Client) CustomerLogin(ctx context.Context, p *CustomerLoginPayload) (res *CustomerLoginResult, err error) {
	var ires interface{}
	ires, err = c.CustomerLoginEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*CustomerLoginResult), nil
}

// StartPasswordRecoveryFlow calls the "StartPasswordRecoveryFlow" endpoint of
// the "coachee" service.
func (c *Client) StartPasswordRecoveryFlow(ctx context.Context, p *StartPasswordRecoveryFlowPayload) (err error) {
	_, err = c.StartPasswordRecoveryFlowEndpoint(ctx, p)
	return
}

// CheckPasswordRecoveryToken calls the "CheckPasswordRecoveryToken" endpoint
// of the "coachee" service.
func (c *Client) CheckPasswordRecoveryToken(ctx context.Context, p *CheckPasswordRecoveryTokenPayload) (err error) {
	_, err = c.CheckPasswordRecoveryTokenEndpoint(ctx, p)
	return
}

// FinalizePasswordRecoveryFlow calls the "FinalizePasswordRecoveryFlow"
// endpoint of the "coachee" service.
func (c *Client) FinalizePasswordRecoveryFlow(ctx context.Context, p *FinalizePasswordRecoveryFlowPayload) (err error) {
	_, err = c.FinalizePasswordRecoveryFlowEndpoint(ctx, p)
	return
}

// CreateOrder calls the "CreateOrder" endpoint of the "coachee" service.
func (c *Client) CreateOrder(ctx context.Context, p *CreateOrderPayload) (res *CreateOrderResult, err error) {
	var ires interface{}
	ires, err = c.CreateOrderEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*CreateOrderResult), nil
}

// RegisterStripeExpress calls the "RegisterStripeExpress" endpoint of the
// "coachee" service.
func (c *Client) RegisterStripeExpress(ctx context.Context, p *RegisterStripeExpressPayload) (err error) {
	_, err = c.RegisterStripeExpressEndpoint(ctx, p)
	return
}
