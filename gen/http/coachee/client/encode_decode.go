// Code generated by goa v3.0.7, DO NOT EDIT.
//
// coachee HTTP client encoders and decoders
//
// Command:
// $ goa gen coachee-backend/design

package client

import (
	"bytes"
	coachee "coachee-backend/gen/coachee"
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
)

// BuildGetCoachesRequest instantiates a HTTP request object with method and
// path set to call the "coachee" service "GetCoaches" endpoint
func (c *Client) BuildGetCoachesRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		tag string
	)
	{
		p, ok := v.(*coachee.GetCoachesPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("coachee", "GetCoaches", "*coachee.GetCoachesPayload", v)
		}
		tag = p.Tag
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetCoachesCoacheePath(tag)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("coachee", "GetCoaches", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetCoachesRequest returns an encoder for requests sent to the coachee
// GetCoaches server.
func EncodeGetCoachesRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*coachee.GetCoachesPayload)
		if !ok {
			return goahttp.ErrInvalidType("coachee", "GetCoaches", "*coachee.GetCoachesPayload", v)
		}
		values := req.URL.Query()
		if p.Limit != nil {
			values.Add("limit", fmt.Sprintf("%v", *p.Limit))
		}
		if p.Page != nil {
			values.Add("page", fmt.Sprintf("%v", *p.Page))
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeGetCoachesResponse returns a decoder for responses returned by the
// coachee GetCoaches endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeGetCoachesResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetCoachesResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "GetCoaches", err)
			}
			err = ValidateGetCoachesResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "GetCoaches", err)
			}
			res := NewGetCoachesCoachOK(&body)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("coachee", "GetCoaches", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateCoachRequest instantiates a HTTP request object with method and
// path set to call the "coachee" service "CreateCoach" endpoint
func (c *Client) BuildCreateCoachRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateCoachCoacheePath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("coachee", "CreateCoach", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateCoachRequest returns an encoder for requests sent to the coachee
// CreateCoach server.
func EncodeCreateCoachRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*coachee.CreateCoachPayload)
		if !ok {
			return goahttp.ErrInvalidType("coachee", "CreateCoach", "*coachee.CreateCoachPayload", v)
		}
		body := NewCreateCoachRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("coachee", "CreateCoach", err)
		}
		return nil
	}
}

// DecodeCreateCoachResponse returns a decoder for responses returned by the
// coachee CreateCoach endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeCreateCoachResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body uint
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "CreateCoach", err)
			}
			return body, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("coachee", "CreateCoach", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateCoachRequest instantiates a HTTP request object with method and
// path set to call the "coachee" service "UpdateCoach" endpoint
func (c *Client) BuildUpdateCoachRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id uint
	)
	{
		p, ok := v.(*coachee.UpdateCoachPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("coachee", "UpdateCoach", "*coachee.UpdateCoachPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateCoachCoacheePath(id)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("coachee", "UpdateCoach", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateCoachRequest returns an encoder for requests sent to the coachee
// UpdateCoach server.
func EncodeUpdateCoachRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*coachee.UpdateCoachPayload)
		if !ok {
			return goahttp.ErrInvalidType("coachee", "UpdateCoach", "*coachee.UpdateCoachPayload", v)
		}
		body := NewUpdateCoachRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("coachee", "UpdateCoach", err)
		}
		return nil
	}
}

// DecodeUpdateCoachResponse returns a decoder for responses returned by the
// coachee UpdateCoach endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeUpdateCoachResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusAccepted:
			return nil, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("coachee", "UpdateCoach", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateCertificationRequest instantiates a HTTP request object with
// method and path set to call the "coachee" service "CreateCertification"
// endpoint
func (c *Client) BuildCreateCertificationRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id uint
	)
	{
		p, ok := v.(*coachee.CreateCertificationPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("coachee", "CreateCertification", "*coachee.CreateCertificationPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateCertificationCoacheePath(id)}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("coachee", "CreateCertification", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateCertificationRequest returns an encoder for requests sent to the
// coachee CreateCertification server.
func EncodeCreateCertificationRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*coachee.CreateCertificationPayload)
		if !ok {
			return goahttp.ErrInvalidType("coachee", "CreateCertification", "*coachee.CreateCertificationPayload", v)
		}
		body := NewCreateCertificationRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("coachee", "CreateCertification", err)
		}
		return nil
	}
}

// DecodeCreateCertificationResponse returns a decoder for responses returned
// by the coachee CreateCertification endpoint. restoreBody controls whether
// the response body should be restored after having been read.
func DecodeCreateCertificationResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusAccepted:
			return nil, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("coachee", "CreateCertification", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteCertificationRequest instantiates a HTTP request object with
// method and path set to call the "coachee" service "DeleteCertification"
// endpoint
func (c *Client) BuildDeleteCertificationRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id     uint
		certID string
	)
	{
		p, ok := v.(*coachee.DeleteCertificationPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("coachee", "DeleteCertification", "*coachee.DeleteCertificationPayload", v)
		}
		id = p.ID
		certID = p.CertID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteCertificationCoacheePath(id, certID)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("coachee", "DeleteCertification", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeDeleteCertificationResponse returns a decoder for responses returned
// by the coachee DeleteCertification endpoint. restoreBody controls whether
// the response body should be restored after having been read.
func DecodeDeleteCertificationResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("coachee", "DeleteCertification", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateProgramRequest instantiates a HTTP request object with method and
// path set to call the "coachee" service "CreateProgram" endpoint
func (c *Client) BuildCreateProgramRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id uint
	)
	{
		p, ok := v.(*coachee.CreateProgramPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("coachee", "CreateProgram", "*coachee.CreateProgramPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateProgramCoacheePath(id)}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("coachee", "CreateProgram", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateProgramRequest returns an encoder for requests sent to the
// coachee CreateProgram server.
func EncodeCreateProgramRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*coachee.CreateProgramPayload)
		if !ok {
			return goahttp.ErrInvalidType("coachee", "CreateProgram", "*coachee.CreateProgramPayload", v)
		}
		body := NewCreateProgramRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("coachee", "CreateProgram", err)
		}
		return nil
	}
}

// DecodeCreateProgramResponse returns a decoder for responses returned by the
// coachee CreateProgram endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeCreateProgramResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusAccepted:
			return nil, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("coachee", "CreateProgram", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteProgramRequest instantiates a HTTP request object with method and
// path set to call the "coachee" service "DeleteProgram" endpoint
func (c *Client) BuildDeleteProgramRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id        uint
		programID string
	)
	{
		p, ok := v.(*coachee.DeleteProgramPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("coachee", "DeleteProgram", "*coachee.DeleteProgramPayload", v)
		}
		id = p.ID
		programID = p.ProgramID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteProgramCoacheePath(id, programID)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("coachee", "DeleteProgram", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeDeleteProgramResponse returns a decoder for responses returned by the
// coachee DeleteProgram endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeDeleteProgramResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("coachee", "DeleteProgram", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateAvailabilityRequest instantiates a HTTP request object with
// method and path set to call the "coachee" service "CreateAvailability"
// endpoint
func (c *Client) BuildCreateAvailabilityRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id uint
	)
	{
		p, ok := v.(*coachee.CreateAvailabilityPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("coachee", "CreateAvailability", "*coachee.CreateAvailabilityPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateAvailabilityCoacheePath(id)}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("coachee", "CreateAvailability", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateAvailabilityRequest returns an encoder for requests sent to the
// coachee CreateAvailability server.
func EncodeCreateAvailabilityRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*coachee.CreateAvailabilityPayload)
		if !ok {
			return goahttp.ErrInvalidType("coachee", "CreateAvailability", "*coachee.CreateAvailabilityPayload", v)
		}
		body := NewCreateAvailabilityRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("coachee", "CreateAvailability", err)
		}
		return nil
	}
}

// DecodeCreateAvailabilityResponse returns a decoder for responses returned by
// the coachee CreateAvailability endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeCreateAvailabilityResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusAccepted:
			return nil, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("coachee", "CreateAvailability", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteAvailabilityRequest instantiates a HTTP request object with
// method and path set to call the "coachee" service "DeleteAvailability"
// endpoint
func (c *Client) BuildDeleteAvailabilityRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id   uint
		avID string
	)
	{
		p, ok := v.(*coachee.DeleteAvailabilityPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("coachee", "DeleteAvailability", "*coachee.DeleteAvailabilityPayload", v)
		}
		id = p.ID
		avID = p.AvID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteAvailabilityCoacheePath(id, avID)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("coachee", "DeleteAvailability", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeDeleteAvailabilityResponse returns a decoder for responses returned by
// the coachee DeleteAvailability endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeDeleteAvailabilityResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("coachee", "DeleteAvailability", resp.StatusCode, string(body))
		}
	}
}

// unmarshalCertificationsResponseBodyToCoacheeCertifications builds a value of
// type *coachee.Certifications from a value of type
// *CertificationsResponseBody.
func unmarshalCertificationsResponseBodyToCoacheeCertifications(v *CertificationsResponseBody) *coachee.Certifications {
	if v == nil {
		return nil
	}
	res := &coachee.Certifications{
		ID:          v.ID,
		Title:       *v.Title,
		Description: *v.Description,
		Institution: *v.Institution,
		Month:       *v.Month,
		Year:        *v.Year,
	}

	return res
}

// unmarshalProgramResponseBodyToCoacheeProgram builds a value of type
// *coachee.Program from a value of type *ProgramResponseBody.
func unmarshalProgramResponseBodyToCoacheeProgram(v *ProgramResponseBody) *coachee.Program {
	if v == nil {
		return nil
	}
	res := &coachee.Program{
		ID:          v.ID,
		Name:        *v.Name,
		Sessions:    *v.Sessions,
		Duration:    *v.Duration,
		Description: *v.Description,
		TotalPrice:  *v.TotalPrice,
		TaxPercent:  *v.TaxPercent,
	}

	return res
}

// unmarshalAvailabilityResponseBodyToCoacheeAvailability builds a value of
// type *coachee.Availability from a value of type *AvailabilityResponseBody.
func unmarshalAvailabilityResponseBodyToCoacheeAvailability(v *AvailabilityResponseBody) *coachee.Availability {
	if v == nil {
		return nil
	}
	res := &coachee.Availability{
		ID:      v.ID,
		WeekDay: v.WeekDay,
		Start:   v.Start,
		End:     v.End,
	}

	return res
}

// marshalCoacheeCertificationsToCertificationsRequestBody builds a value of
// type *CertificationsRequestBody from a value of type *coachee.Certifications.
func marshalCoacheeCertificationsToCertificationsRequestBody(v *coachee.Certifications) *CertificationsRequestBody {
	res := &CertificationsRequestBody{
		ID:          v.ID,
		Title:       v.Title,
		Description: v.Description,
		Institution: v.Institution,
		Month:       v.Month,
		Year:        v.Year,
	}

	return res
}

// marshalCoacheeProgramToProgramRequestBody builds a value of type
// *ProgramRequestBody from a value of type *coachee.Program.
func marshalCoacheeProgramToProgramRequestBody(v *coachee.Program) *ProgramRequestBody {
	res := &ProgramRequestBody{
		ID:          v.ID,
		Name:        v.Name,
		Sessions:    v.Sessions,
		Duration:    v.Duration,
		Description: v.Description,
		TotalPrice:  v.TotalPrice,
		TaxPercent:  v.TaxPercent,
	}

	return res
}

// marshalCertificationsRequestBodyToCoacheeCertifications builds a value of
// type *coachee.Certifications from a value of type *CertificationsRequestBody.
func marshalCertificationsRequestBodyToCoacheeCertifications(v *CertificationsRequestBody) *coachee.Certifications {
	res := &coachee.Certifications{
		ID:          v.ID,
		Title:       v.Title,
		Description: v.Description,
		Institution: v.Institution,
		Month:       v.Month,
		Year:        v.Year,
	}

	return res
}

// marshalProgramRequestBodyToCoacheeProgram builds a value of type
// *coachee.Program from a value of type *ProgramRequestBody.
func marshalProgramRequestBodyToCoacheeProgram(v *ProgramRequestBody) *coachee.Program {
	res := &coachee.Program{
		ID:          v.ID,
		Name:        v.Name,
		Sessions:    v.Sessions,
		Duration:    v.Duration,
		Description: v.Description,
		TotalPrice:  v.TotalPrice,
		TaxPercent:  v.TaxPercent,
	}

	return res
}

// marshalCoacheeAvailabilityToAvailabilityRequestBody builds a value of type
// *AvailabilityRequestBody from a value of type *coachee.Availability.
func marshalCoacheeAvailabilityToAvailabilityRequestBody(v *coachee.Availability) *AvailabilityRequestBody {
	res := &AvailabilityRequestBody{
		ID:      v.ID,
		WeekDay: v.WeekDay,
		Start:   v.Start,
		End:     v.End,
	}

	return res
}

// marshalAvailabilityRequestBodyToCoacheeAvailability builds a value of type
// *coachee.Availability from a value of type *AvailabilityRequestBody.
func marshalAvailabilityRequestBodyToCoacheeAvailability(v *AvailabilityRequestBody) *coachee.Availability {
	res := &coachee.Availability{
		ID:      v.ID,
		WeekDay: v.WeekDay,
		Start:   v.Start,
		End:     v.End,
	}

	return res
}
