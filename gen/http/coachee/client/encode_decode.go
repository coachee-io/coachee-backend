// Code generated by goa v3.0.9, DO NOT EDIT.
//
// coachee HTTP client encoders and decoders
//
// Command:
// $ goa gen coachee-backend/design

package client

import (
	"bytes"
	coachee "coachee-backend/gen/coachee"
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// BuildStripeWebhooksRequest instantiates a HTTP request object with method
// and path set to call the "coachee" service "StripeWebhooks" endpoint
func (c *Client) BuildStripeWebhooksRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: StripeWebhooksCoacheePath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("coachee", "StripeWebhooks", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeStripeWebhooksRequest returns an encoder for requests sent to the
// coachee StripeWebhooks server.
func EncodeStripeWebhooksRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(map[string]interface{})
		if !ok {
			return goahttp.ErrInvalidType("coachee", "StripeWebhooks", "map[string]interface{}", v)
		}
		body := p
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("coachee", "StripeWebhooks", err)
		}
		return nil
	}
}

// DecodeStripeWebhooksResponse returns a decoder for responses returned by the
// coachee StripeWebhooks endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeStripeWebhooksResponse may return the following errors:
//	- "internal" (type *goa.ServiceError): http.StatusInternalServerError
//	- "transient" (type *goa.ServiceError): http.StatusInternalServerError
//	- "notFound" (type *goa.ServiceError): http.StatusNotFound
//	- "validation" (type *goa.ServiceError): http.StatusBadRequest
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeStripeWebhooksResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "internal":
				var (
					body StripeWebhooksInternalResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "StripeWebhooks", err)
				}
				err = ValidateStripeWebhooksInternalResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "StripeWebhooks", err)
				}
				return nil, NewStripeWebhooksInternal(&body)
			case "transient":
				var (
					body StripeWebhooksTransientResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "StripeWebhooks", err)
				}
				err = ValidateStripeWebhooksTransientResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "StripeWebhooks", err)
				}
				return nil, NewStripeWebhooksTransient(&body)
			default:
				body, _ := ioutil.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("coachee", "StripeWebhooks", resp.StatusCode, string(body))
			}
		case http.StatusNotFound:
			var (
				body StripeWebhooksNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "StripeWebhooks", err)
			}
			err = ValidateStripeWebhooksNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "StripeWebhooks", err)
			}
			return nil, NewStripeWebhooksNotFound(&body)
		case http.StatusBadRequest:
			var (
				body StripeWebhooksValidationResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "StripeWebhooks", err)
			}
			err = ValidateStripeWebhooksValidationResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "StripeWebhooks", err)
			}
			return nil, NewStripeWebhooksValidation(&body)
		case http.StatusUnauthorized:
			var (
				body StripeWebhooksUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "StripeWebhooks", err)
			}
			err = ValidateStripeWebhooksUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "StripeWebhooks", err)
			}
			return nil, NewStripeWebhooksUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("coachee", "StripeWebhooks", resp.StatusCode, string(body))
		}
	}
}

// BuildGetCoachesRequest instantiates a HTTP request object with method and
// path set to call the "coachee" service "GetCoaches" endpoint
func (c *Client) BuildGetCoachesRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetCoachesCoacheePath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("coachee", "GetCoaches", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetCoachesRequest returns an encoder for requests sent to the coachee
// GetCoaches server.
func EncodeGetCoachesRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*coachee.GetCoachesPayload)
		if !ok {
			return goahttp.ErrInvalidType("coachee", "GetCoaches", "*coachee.GetCoachesPayload", v)
		}
		values := req.URL.Query()
		if p.Tag != nil {
			values.Add("tag", *p.Tag)
		}
		if p.Limit != nil {
			values.Add("limit", fmt.Sprintf("%v", *p.Limit))
		}
		if p.Page != nil {
			values.Add("page", fmt.Sprintf("%v", *p.Page))
		}
		if p.ShowAll != nil {
			values.Add("show_all", fmt.Sprintf("%v", *p.ShowAll))
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeGetCoachesResponse returns a decoder for responses returned by the
// coachee GetCoaches endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeGetCoachesResponse may return the following errors:
//	- "internal" (type *goa.ServiceError): http.StatusInternalServerError
//	- "transient" (type *goa.ServiceError): http.StatusInternalServerError
//	- "notFound" (type *goa.ServiceError): http.StatusNotFound
//	- "validation" (type *goa.ServiceError): http.StatusBadRequest
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeGetCoachesResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetCoachesResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "GetCoaches", err)
			}
			for _, e := range body {
				if e != nil {
					if err2 := ValidateCoachResponse(e); err2 != nil {
						err = goa.MergeErrors(err, err2)
					}
				}
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "GetCoaches", err)
			}
			res := NewGetCoachesCoachOK(body)
			return res, nil
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "internal":
				var (
					body GetCoachesInternalResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "GetCoaches", err)
				}
				err = ValidateGetCoachesInternalResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "GetCoaches", err)
				}
				return nil, NewGetCoachesInternal(&body)
			case "transient":
				var (
					body GetCoachesTransientResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "GetCoaches", err)
				}
				err = ValidateGetCoachesTransientResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "GetCoaches", err)
				}
				return nil, NewGetCoachesTransient(&body)
			default:
				body, _ := ioutil.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("coachee", "GetCoaches", resp.StatusCode, string(body))
			}
		case http.StatusNotFound:
			var (
				body GetCoachesNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "GetCoaches", err)
			}
			err = ValidateGetCoachesNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "GetCoaches", err)
			}
			return nil, NewGetCoachesNotFound(&body)
		case http.StatusBadRequest:
			var (
				body GetCoachesValidationResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "GetCoaches", err)
			}
			err = ValidateGetCoachesValidationResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "GetCoaches", err)
			}
			return nil, NewGetCoachesValidation(&body)
		case http.StatusUnauthorized:
			var (
				body GetCoachesUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "GetCoaches", err)
			}
			err = ValidateGetCoachesUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "GetCoaches", err)
			}
			return nil, NewGetCoachesUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("coachee", "GetCoaches", resp.StatusCode, string(body))
		}
	}
}

// BuildGetCoachRequest instantiates a HTTP request object with method and path
// set to call the "coachee" service "GetCoach" endpoint
func (c *Client) BuildGetCoachRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id uint
	)
	{
		p, ok := v.(*coachee.GetCoachPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("coachee", "GetCoach", "*coachee.GetCoachPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetCoachCoacheePath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("coachee", "GetCoach", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetCoachResponse returns a decoder for responses returned by the
// coachee GetCoach endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeGetCoachResponse may return the following errors:
//	- "internal" (type *goa.ServiceError): http.StatusInternalServerError
//	- "transient" (type *goa.ServiceError): http.StatusInternalServerError
//	- "notFound" (type *goa.ServiceError): http.StatusNotFound
//	- "validation" (type *goa.ServiceError): http.StatusBadRequest
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeGetCoachResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetCoachResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "GetCoach", err)
			}
			err = ValidateGetCoachResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "GetCoach", err)
			}
			res := NewGetCoachCoachOK(&body)
			return res, nil
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "internal":
				var (
					body GetCoachInternalResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "GetCoach", err)
				}
				err = ValidateGetCoachInternalResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "GetCoach", err)
				}
				return nil, NewGetCoachInternal(&body)
			case "transient":
				var (
					body GetCoachTransientResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "GetCoach", err)
				}
				err = ValidateGetCoachTransientResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "GetCoach", err)
				}
				return nil, NewGetCoachTransient(&body)
			default:
				body, _ := ioutil.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("coachee", "GetCoach", resp.StatusCode, string(body))
			}
		case http.StatusNotFound:
			var (
				body GetCoachNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "GetCoach", err)
			}
			err = ValidateGetCoachNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "GetCoach", err)
			}
			return nil, NewGetCoachNotFound(&body)
		case http.StatusBadRequest:
			var (
				body GetCoachValidationResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "GetCoach", err)
			}
			err = ValidateGetCoachValidationResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "GetCoach", err)
			}
			return nil, NewGetCoachValidation(&body)
		case http.StatusUnauthorized:
			var (
				body GetCoachUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "GetCoach", err)
			}
			err = ValidateGetCoachUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "GetCoach", err)
			}
			return nil, NewGetCoachUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("coachee", "GetCoach", resp.StatusCode, string(body))
		}
	}
}

// BuildAdminGetCoachRequest instantiates a HTTP request object with method and
// path set to call the "coachee" service "AdminGetCoach" endpoint
func (c *Client) BuildAdminGetCoachRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id uint
	)
	{
		p, ok := v.(*coachee.AdminGetCoachPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("coachee", "AdminGetCoach", "*coachee.AdminGetCoachPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AdminGetCoachCoacheePath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("coachee", "AdminGetCoach", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeAdminGetCoachRequest returns an encoder for requests sent to the
// coachee AdminGetCoach server.
func EncodeAdminGetCoachRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*coachee.AdminGetCoachPayload)
		if !ok {
			return goahttp.ErrInvalidType("coachee", "AdminGetCoach", "*coachee.AdminGetCoachPayload", v)
		}
		req.Header.Set("Authorization", p.Token)
		return nil
	}
}

// DecodeAdminGetCoachResponse returns a decoder for responses returned by the
// coachee AdminGetCoach endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeAdminGetCoachResponse may return the following errors:
//	- "internal" (type *goa.ServiceError): http.StatusInternalServerError
//	- "transient" (type *goa.ServiceError): http.StatusInternalServerError
//	- "notFound" (type *goa.ServiceError): http.StatusNotFound
//	- "validation" (type *goa.ServiceError): http.StatusBadRequest
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeAdminGetCoachResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body AdminGetCoachResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "AdminGetCoach", err)
			}
			err = ValidateAdminGetCoachResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "AdminGetCoach", err)
			}
			res := NewAdminGetCoachFullCoachOK(&body)
			return res, nil
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "internal":
				var (
					body AdminGetCoachInternalResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "AdminGetCoach", err)
				}
				err = ValidateAdminGetCoachInternalResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "AdminGetCoach", err)
				}
				return nil, NewAdminGetCoachInternal(&body)
			case "transient":
				var (
					body AdminGetCoachTransientResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "AdminGetCoach", err)
				}
				err = ValidateAdminGetCoachTransientResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "AdminGetCoach", err)
				}
				return nil, NewAdminGetCoachTransient(&body)
			default:
				body, _ := ioutil.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("coachee", "AdminGetCoach", resp.StatusCode, string(body))
			}
		case http.StatusNotFound:
			var (
				body AdminGetCoachNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "AdminGetCoach", err)
			}
			err = ValidateAdminGetCoachNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "AdminGetCoach", err)
			}
			return nil, NewAdminGetCoachNotFound(&body)
		case http.StatusBadRequest:
			var (
				body AdminGetCoachValidationResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "AdminGetCoach", err)
			}
			err = ValidateAdminGetCoachValidationResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "AdminGetCoach", err)
			}
			return nil, NewAdminGetCoachValidation(&body)
		case http.StatusUnauthorized:
			var (
				body AdminGetCoachUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "AdminGetCoach", err)
			}
			err = ValidateAdminGetCoachUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "AdminGetCoach", err)
			}
			return nil, NewAdminGetCoachUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("coachee", "AdminGetCoach", resp.StatusCode, string(body))
		}
	}
}

// BuildLenCoachesRequest instantiates a HTTP request object with method and
// path set to call the "coachee" service "LenCoaches" endpoint
func (c *Client) BuildLenCoachesRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		tag string
	)
	{
		p, ok := v.(*coachee.LenCoachesPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("coachee", "LenCoaches", "*coachee.LenCoachesPayload", v)
		}
		tag = p.Tag
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: LenCoachesCoacheePath(tag)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("coachee", "LenCoaches", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeLenCoachesResponse returns a decoder for responses returned by the
// coachee LenCoaches endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeLenCoachesResponse may return the following errors:
//	- "internal" (type *goa.ServiceError): http.StatusInternalServerError
//	- "transient" (type *goa.ServiceError): http.StatusInternalServerError
//	- "notFound" (type *goa.ServiceError): http.StatusNotFound
//	- "validation" (type *goa.ServiceError): http.StatusBadRequest
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeLenCoachesResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body uint
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "LenCoaches", err)
			}
			return body, nil
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "internal":
				var (
					body LenCoachesInternalResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "LenCoaches", err)
				}
				err = ValidateLenCoachesInternalResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "LenCoaches", err)
				}
				return nil, NewLenCoachesInternal(&body)
			case "transient":
				var (
					body LenCoachesTransientResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "LenCoaches", err)
				}
				err = ValidateLenCoachesTransientResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "LenCoaches", err)
				}
				return nil, NewLenCoachesTransient(&body)
			default:
				body, _ := ioutil.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("coachee", "LenCoaches", resp.StatusCode, string(body))
			}
		case http.StatusNotFound:
			var (
				body LenCoachesNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "LenCoaches", err)
			}
			err = ValidateLenCoachesNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "LenCoaches", err)
			}
			return nil, NewLenCoachesNotFound(&body)
		case http.StatusBadRequest:
			var (
				body LenCoachesValidationResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "LenCoaches", err)
			}
			err = ValidateLenCoachesValidationResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "LenCoaches", err)
			}
			return nil, NewLenCoachesValidation(&body)
		case http.StatusUnauthorized:
			var (
				body LenCoachesUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "LenCoaches", err)
			}
			err = ValidateLenCoachesUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "LenCoaches", err)
			}
			return nil, NewLenCoachesUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("coachee", "LenCoaches", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateCoachRequest instantiates a HTTP request object with method and
// path set to call the "coachee" service "CreateCoach" endpoint
func (c *Client) BuildCreateCoachRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateCoachCoacheePath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("coachee", "CreateCoach", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateCoachRequest returns an encoder for requests sent to the coachee
// CreateCoach server.
func EncodeCreateCoachRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*coachee.CreateCoachPayload)
		if !ok {
			return goahttp.ErrInvalidType("coachee", "CreateCoach", "*coachee.CreateCoachPayload", v)
		}
		body := NewCreateCoachRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("coachee", "CreateCoach", err)
		}
		return nil
	}
}

// DecodeCreateCoachResponse returns a decoder for responses returned by the
// coachee CreateCoach endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeCreateCoachResponse may return the following errors:
//	- "internal" (type *goa.ServiceError): http.StatusInternalServerError
//	- "transient" (type *goa.ServiceError): http.StatusInternalServerError
//	- "notFound" (type *goa.ServiceError): http.StatusNotFound
//	- "validation" (type *goa.ServiceError): http.StatusBadRequest
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeCreateCoachResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body uint
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "CreateCoach", err)
			}
			return body, nil
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "internal":
				var (
					body CreateCoachInternalResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "CreateCoach", err)
				}
				err = ValidateCreateCoachInternalResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "CreateCoach", err)
				}
				return nil, NewCreateCoachInternal(&body)
			case "transient":
				var (
					body CreateCoachTransientResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "CreateCoach", err)
				}
				err = ValidateCreateCoachTransientResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "CreateCoach", err)
				}
				return nil, NewCreateCoachTransient(&body)
			default:
				body, _ := ioutil.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("coachee", "CreateCoach", resp.StatusCode, string(body))
			}
		case http.StatusNotFound:
			var (
				body CreateCoachNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "CreateCoach", err)
			}
			err = ValidateCreateCoachNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "CreateCoach", err)
			}
			return nil, NewCreateCoachNotFound(&body)
		case http.StatusBadRequest:
			var (
				body CreateCoachValidationResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "CreateCoach", err)
			}
			err = ValidateCreateCoachValidationResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "CreateCoach", err)
			}
			return nil, NewCreateCoachValidation(&body)
		case http.StatusUnauthorized:
			var (
				body CreateCoachUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "CreateCoach", err)
			}
			err = ValidateCreateCoachUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "CreateCoach", err)
			}
			return nil, NewCreateCoachUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("coachee", "CreateCoach", resp.StatusCode, string(body))
		}
	}
}

// BuildLoginCoachRequest instantiates a HTTP request object with method and
// path set to call the "coachee" service "LoginCoach" endpoint
func (c *Client) BuildLoginCoachRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: LoginCoachCoacheePath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("coachee", "LoginCoach", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeLoginCoachRequest returns an encoder for requests sent to the coachee
// LoginCoach server.
func EncodeLoginCoachRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*coachee.LoginCoachPayload)
		if !ok {
			return goahttp.ErrInvalidType("coachee", "LoginCoach", "*coachee.LoginCoachPayload", v)
		}
		body := NewLoginCoachRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("coachee", "LoginCoach", err)
		}
		return nil
	}
}

// DecodeLoginCoachResponse returns a decoder for responses returned by the
// coachee LoginCoach endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeLoginCoachResponse may return the following errors:
//	- "internal" (type *goa.ServiceError): http.StatusInternalServerError
//	- "transient" (type *goa.ServiceError): http.StatusInternalServerError
//	- "notFound" (type *goa.ServiceError): http.StatusNotFound
//	- "validation" (type *goa.ServiceError): http.StatusBadRequest
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeLoginCoachResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body LoginCoachResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "LoginCoach", err)
			}
			err = ValidateLoginCoachResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "LoginCoach", err)
			}
			res := NewLoginCoachResultOK(&body)
			return res, nil
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "internal":
				var (
					body LoginCoachInternalResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "LoginCoach", err)
				}
				err = ValidateLoginCoachInternalResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "LoginCoach", err)
				}
				return nil, NewLoginCoachInternal(&body)
			case "transient":
				var (
					body LoginCoachTransientResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "LoginCoach", err)
				}
				err = ValidateLoginCoachTransientResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "LoginCoach", err)
				}
				return nil, NewLoginCoachTransient(&body)
			default:
				body, _ := ioutil.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("coachee", "LoginCoach", resp.StatusCode, string(body))
			}
		case http.StatusNotFound:
			var (
				body LoginCoachNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "LoginCoach", err)
			}
			err = ValidateLoginCoachNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "LoginCoach", err)
			}
			return nil, NewLoginCoachNotFound(&body)
		case http.StatusBadRequest:
			var (
				body LoginCoachValidationResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "LoginCoach", err)
			}
			err = ValidateLoginCoachValidationResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "LoginCoach", err)
			}
			return nil, NewLoginCoachValidation(&body)
		case http.StatusUnauthorized:
			var (
				body LoginCoachUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "LoginCoach", err)
			}
			err = ValidateLoginCoachUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "LoginCoach", err)
			}
			return nil, NewLoginCoachUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("coachee", "LoginCoach", resp.StatusCode, string(body))
		}
	}
}

// BuildStartCoachPasswordRecoveryFlowRequest instantiates a HTTP request
// object with method and path set to call the "coachee" service
// "StartCoachPasswordRecoveryFlow" endpoint
func (c *Client) BuildStartCoachPasswordRecoveryFlowRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: StartCoachPasswordRecoveryFlowCoacheePath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("coachee", "StartCoachPasswordRecoveryFlow", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeStartCoachPasswordRecoveryFlowRequest returns an encoder for requests
// sent to the coachee StartCoachPasswordRecoveryFlow server.
func EncodeStartCoachPasswordRecoveryFlowRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*coachee.StartCoachPasswordRecoveryFlowPayload)
		if !ok {
			return goahttp.ErrInvalidType("coachee", "StartCoachPasswordRecoveryFlow", "*coachee.StartCoachPasswordRecoveryFlowPayload", v)
		}
		body := NewStartCoachPasswordRecoveryFlowRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("coachee", "StartCoachPasswordRecoveryFlow", err)
		}
		return nil
	}
}

// DecodeStartCoachPasswordRecoveryFlowResponse returns a decoder for responses
// returned by the coachee StartCoachPasswordRecoveryFlow endpoint. restoreBody
// controls whether the response body should be restored after having been read.
// DecodeStartCoachPasswordRecoveryFlowResponse may return the following errors:
//	- "internal" (type *goa.ServiceError): http.StatusInternalServerError
//	- "transient" (type *goa.ServiceError): http.StatusInternalServerError
//	- "notFound" (type *goa.ServiceError): http.StatusNotFound
//	- "validation" (type *goa.ServiceError): http.StatusBadRequest
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeStartCoachPasswordRecoveryFlowResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "internal":
				var (
					body StartCoachPasswordRecoveryFlowInternalResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "StartCoachPasswordRecoveryFlow", err)
				}
				err = ValidateStartCoachPasswordRecoveryFlowInternalResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "StartCoachPasswordRecoveryFlow", err)
				}
				return nil, NewStartCoachPasswordRecoveryFlowInternal(&body)
			case "transient":
				var (
					body StartCoachPasswordRecoveryFlowTransientResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "StartCoachPasswordRecoveryFlow", err)
				}
				err = ValidateStartCoachPasswordRecoveryFlowTransientResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "StartCoachPasswordRecoveryFlow", err)
				}
				return nil, NewStartCoachPasswordRecoveryFlowTransient(&body)
			default:
				body, _ := ioutil.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("coachee", "StartCoachPasswordRecoveryFlow", resp.StatusCode, string(body))
			}
		case http.StatusNotFound:
			var (
				body StartCoachPasswordRecoveryFlowNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "StartCoachPasswordRecoveryFlow", err)
			}
			err = ValidateStartCoachPasswordRecoveryFlowNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "StartCoachPasswordRecoveryFlow", err)
			}
			return nil, NewStartCoachPasswordRecoveryFlowNotFound(&body)
		case http.StatusBadRequest:
			var (
				body StartCoachPasswordRecoveryFlowValidationResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "StartCoachPasswordRecoveryFlow", err)
			}
			err = ValidateStartCoachPasswordRecoveryFlowValidationResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "StartCoachPasswordRecoveryFlow", err)
			}
			return nil, NewStartCoachPasswordRecoveryFlowValidation(&body)
		case http.StatusUnauthorized:
			var (
				body StartCoachPasswordRecoveryFlowUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "StartCoachPasswordRecoveryFlow", err)
			}
			err = ValidateStartCoachPasswordRecoveryFlowUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "StartCoachPasswordRecoveryFlow", err)
			}
			return nil, NewStartCoachPasswordRecoveryFlowUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("coachee", "StartCoachPasswordRecoveryFlow", resp.StatusCode, string(body))
		}
	}
}

// BuildCheckCoachPasswordRecoveryTokenRequest instantiates a HTTP request
// object with method and path set to call the "coachee" service
// "CheckCoachPasswordRecoveryToken" endpoint
func (c *Client) BuildCheckCoachPasswordRecoveryTokenRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		token string
	)
	{
		p, ok := v.(*coachee.CheckCoachPasswordRecoveryTokenPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("coachee", "CheckCoachPasswordRecoveryToken", "*coachee.CheckCoachPasswordRecoveryTokenPayload", v)
		}
		token = p.Token
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CheckCoachPasswordRecoveryTokenCoacheePath(token)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("coachee", "CheckCoachPasswordRecoveryToken", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeCheckCoachPasswordRecoveryTokenResponse returns a decoder for
// responses returned by the coachee CheckCoachPasswordRecoveryToken endpoint.
// restoreBody controls whether the response body should be restored after
// having been read.
// DecodeCheckCoachPasswordRecoveryTokenResponse may return the following
// errors:
//	- "internal" (type *goa.ServiceError): http.StatusInternalServerError
//	- "transient" (type *goa.ServiceError): http.StatusInternalServerError
//	- "notFound" (type *goa.ServiceError): http.StatusNotFound
//	- "validation" (type *goa.ServiceError): http.StatusBadRequest
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeCheckCoachPasswordRecoveryTokenResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "internal":
				var (
					body CheckCoachPasswordRecoveryTokenInternalResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "CheckCoachPasswordRecoveryToken", err)
				}
				err = ValidateCheckCoachPasswordRecoveryTokenInternalResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "CheckCoachPasswordRecoveryToken", err)
				}
				return nil, NewCheckCoachPasswordRecoveryTokenInternal(&body)
			case "transient":
				var (
					body CheckCoachPasswordRecoveryTokenTransientResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "CheckCoachPasswordRecoveryToken", err)
				}
				err = ValidateCheckCoachPasswordRecoveryTokenTransientResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "CheckCoachPasswordRecoveryToken", err)
				}
				return nil, NewCheckCoachPasswordRecoveryTokenTransient(&body)
			default:
				body, _ := ioutil.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("coachee", "CheckCoachPasswordRecoveryToken", resp.StatusCode, string(body))
			}
		case http.StatusNotFound:
			var (
				body CheckCoachPasswordRecoveryTokenNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "CheckCoachPasswordRecoveryToken", err)
			}
			err = ValidateCheckCoachPasswordRecoveryTokenNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "CheckCoachPasswordRecoveryToken", err)
			}
			return nil, NewCheckCoachPasswordRecoveryTokenNotFound(&body)
		case http.StatusBadRequest:
			var (
				body CheckCoachPasswordRecoveryTokenValidationResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "CheckCoachPasswordRecoveryToken", err)
			}
			err = ValidateCheckCoachPasswordRecoveryTokenValidationResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "CheckCoachPasswordRecoveryToken", err)
			}
			return nil, NewCheckCoachPasswordRecoveryTokenValidation(&body)
		case http.StatusUnauthorized:
			var (
				body CheckCoachPasswordRecoveryTokenUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "CheckCoachPasswordRecoveryToken", err)
			}
			err = ValidateCheckCoachPasswordRecoveryTokenUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "CheckCoachPasswordRecoveryToken", err)
			}
			return nil, NewCheckCoachPasswordRecoveryTokenUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("coachee", "CheckCoachPasswordRecoveryToken", resp.StatusCode, string(body))
		}
	}
}

// BuildFinalizeCoachPasswordRecoveryFlowRequest instantiates a HTTP request
// object with method and path set to call the "coachee" service
// "FinalizeCoachPasswordRecoveryFlow" endpoint
func (c *Client) BuildFinalizeCoachPasswordRecoveryFlowRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		token string
	)
	{
		p, ok := v.(*coachee.FinalizeCoachPasswordRecoveryFlowPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("coachee", "FinalizeCoachPasswordRecoveryFlow", "*coachee.FinalizeCoachPasswordRecoveryFlowPayload", v)
		}
		token = p.Token
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: FinalizeCoachPasswordRecoveryFlowCoacheePath(token)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("coachee", "FinalizeCoachPasswordRecoveryFlow", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeFinalizeCoachPasswordRecoveryFlowRequest returns an encoder for
// requests sent to the coachee FinalizeCoachPasswordRecoveryFlow server.
func EncodeFinalizeCoachPasswordRecoveryFlowRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*coachee.FinalizeCoachPasswordRecoveryFlowPayload)
		if !ok {
			return goahttp.ErrInvalidType("coachee", "FinalizeCoachPasswordRecoveryFlow", "*coachee.FinalizeCoachPasswordRecoveryFlowPayload", v)
		}
		body := NewFinalizeCoachPasswordRecoveryFlowRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("coachee", "FinalizeCoachPasswordRecoveryFlow", err)
		}
		return nil
	}
}

// DecodeFinalizeCoachPasswordRecoveryFlowResponse returns a decoder for
// responses returned by the coachee FinalizeCoachPasswordRecoveryFlow
// endpoint. restoreBody controls whether the response body should be restored
// after having been read.
// DecodeFinalizeCoachPasswordRecoveryFlowResponse may return the following
// errors:
//	- "internal" (type *goa.ServiceError): http.StatusInternalServerError
//	- "transient" (type *goa.ServiceError): http.StatusInternalServerError
//	- "notFound" (type *goa.ServiceError): http.StatusNotFound
//	- "validation" (type *goa.ServiceError): http.StatusBadRequest
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeFinalizeCoachPasswordRecoveryFlowResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "internal":
				var (
					body FinalizeCoachPasswordRecoveryFlowInternalResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "FinalizeCoachPasswordRecoveryFlow", err)
				}
				err = ValidateFinalizeCoachPasswordRecoveryFlowInternalResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "FinalizeCoachPasswordRecoveryFlow", err)
				}
				return nil, NewFinalizeCoachPasswordRecoveryFlowInternal(&body)
			case "transient":
				var (
					body FinalizeCoachPasswordRecoveryFlowTransientResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "FinalizeCoachPasswordRecoveryFlow", err)
				}
				err = ValidateFinalizeCoachPasswordRecoveryFlowTransientResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "FinalizeCoachPasswordRecoveryFlow", err)
				}
				return nil, NewFinalizeCoachPasswordRecoveryFlowTransient(&body)
			default:
				body, _ := ioutil.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("coachee", "FinalizeCoachPasswordRecoveryFlow", resp.StatusCode, string(body))
			}
		case http.StatusNotFound:
			var (
				body FinalizeCoachPasswordRecoveryFlowNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "FinalizeCoachPasswordRecoveryFlow", err)
			}
			err = ValidateFinalizeCoachPasswordRecoveryFlowNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "FinalizeCoachPasswordRecoveryFlow", err)
			}
			return nil, NewFinalizeCoachPasswordRecoveryFlowNotFound(&body)
		case http.StatusBadRequest:
			var (
				body FinalizeCoachPasswordRecoveryFlowValidationResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "FinalizeCoachPasswordRecoveryFlow", err)
			}
			err = ValidateFinalizeCoachPasswordRecoveryFlowValidationResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "FinalizeCoachPasswordRecoveryFlow", err)
			}
			return nil, NewFinalizeCoachPasswordRecoveryFlowValidation(&body)
		case http.StatusUnauthorized:
			var (
				body FinalizeCoachPasswordRecoveryFlowUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "FinalizeCoachPasswordRecoveryFlow", err)
			}
			err = ValidateFinalizeCoachPasswordRecoveryFlowUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "FinalizeCoachPasswordRecoveryFlow", err)
			}
			return nil, NewFinalizeCoachPasswordRecoveryFlowUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("coachee", "FinalizeCoachPasswordRecoveryFlow", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateCoachRequest instantiates a HTTP request object with method and
// path set to call the "coachee" service "UpdateCoach" endpoint
func (c *Client) BuildUpdateCoachRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id uint
	)
	{
		p, ok := v.(*coachee.UpdateCoachPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("coachee", "UpdateCoach", "*coachee.UpdateCoachPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateCoachCoacheePath(id)}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("coachee", "UpdateCoach", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateCoachRequest returns an encoder for requests sent to the coachee
// UpdateCoach server.
func EncodeUpdateCoachRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*coachee.UpdateCoachPayload)
		if !ok {
			return goahttp.ErrInvalidType("coachee", "UpdateCoach", "*coachee.UpdateCoachPayload", v)
		}
		req.Header.Set("Authorization", p.Token)
		body := NewUpdateCoachRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("coachee", "UpdateCoach", err)
		}
		return nil
	}
}

// DecodeUpdateCoachResponse returns a decoder for responses returned by the
// coachee UpdateCoach endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeUpdateCoachResponse may return the following errors:
//	- "internal" (type *goa.ServiceError): http.StatusInternalServerError
//	- "transient" (type *goa.ServiceError): http.StatusInternalServerError
//	- "notFound" (type *goa.ServiceError): http.StatusNotFound
//	- "validation" (type *goa.ServiceError): http.StatusBadRequest
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeUpdateCoachResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusAccepted:
			return nil, nil
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "internal":
				var (
					body UpdateCoachInternalResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "UpdateCoach", err)
				}
				err = ValidateUpdateCoachInternalResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "UpdateCoach", err)
				}
				return nil, NewUpdateCoachInternal(&body)
			case "transient":
				var (
					body UpdateCoachTransientResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "UpdateCoach", err)
				}
				err = ValidateUpdateCoachTransientResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "UpdateCoach", err)
				}
				return nil, NewUpdateCoachTransient(&body)
			default:
				body, _ := ioutil.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("coachee", "UpdateCoach", resp.StatusCode, string(body))
			}
		case http.StatusNotFound:
			var (
				body UpdateCoachNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "UpdateCoach", err)
			}
			err = ValidateUpdateCoachNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "UpdateCoach", err)
			}
			return nil, NewUpdateCoachNotFound(&body)
		case http.StatusBadRequest:
			var (
				body UpdateCoachValidationResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "UpdateCoach", err)
			}
			err = ValidateUpdateCoachValidationResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "UpdateCoach", err)
			}
			return nil, NewUpdateCoachValidation(&body)
		case http.StatusUnauthorized:
			var (
				body UpdateCoachUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "UpdateCoach", err)
			}
			err = ValidateUpdateCoachUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "UpdateCoach", err)
			}
			return nil, NewUpdateCoachUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("coachee", "UpdateCoach", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateCertificationRequest instantiates a HTTP request object with
// method and path set to call the "coachee" service "CreateCertification"
// endpoint
func (c *Client) BuildCreateCertificationRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id uint
	)
	{
		p, ok := v.(*coachee.CreateCertificationPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("coachee", "CreateCertification", "*coachee.CreateCertificationPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateCertificationCoacheePath(id)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("coachee", "CreateCertification", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateCertificationRequest returns an encoder for requests sent to the
// coachee CreateCertification server.
func EncodeCreateCertificationRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*coachee.CreateCertificationPayload)
		if !ok {
			return goahttp.ErrInvalidType("coachee", "CreateCertification", "*coachee.CreateCertificationPayload", v)
		}
		req.Header.Set("Authorization", p.Token)
		body := NewCreateCertificationRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("coachee", "CreateCertification", err)
		}
		return nil
	}
}

// DecodeCreateCertificationResponse returns a decoder for responses returned
// by the coachee CreateCertification endpoint. restoreBody controls whether
// the response body should be restored after having been read.
// DecodeCreateCertificationResponse may return the following errors:
//	- "internal" (type *goa.ServiceError): http.StatusInternalServerError
//	- "transient" (type *goa.ServiceError): http.StatusInternalServerError
//	- "notFound" (type *goa.ServiceError): http.StatusNotFound
//	- "validation" (type *goa.ServiceError): http.StatusBadRequest
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeCreateCertificationResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusAccepted:
			return nil, nil
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "internal":
				var (
					body CreateCertificationInternalResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "CreateCertification", err)
				}
				err = ValidateCreateCertificationInternalResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "CreateCertification", err)
				}
				return nil, NewCreateCertificationInternal(&body)
			case "transient":
				var (
					body CreateCertificationTransientResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "CreateCertification", err)
				}
				err = ValidateCreateCertificationTransientResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "CreateCertification", err)
				}
				return nil, NewCreateCertificationTransient(&body)
			default:
				body, _ := ioutil.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("coachee", "CreateCertification", resp.StatusCode, string(body))
			}
		case http.StatusNotFound:
			var (
				body CreateCertificationNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "CreateCertification", err)
			}
			err = ValidateCreateCertificationNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "CreateCertification", err)
			}
			return nil, NewCreateCertificationNotFound(&body)
		case http.StatusBadRequest:
			var (
				body CreateCertificationValidationResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "CreateCertification", err)
			}
			err = ValidateCreateCertificationValidationResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "CreateCertification", err)
			}
			return nil, NewCreateCertificationValidation(&body)
		case http.StatusUnauthorized:
			var (
				body CreateCertificationUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "CreateCertification", err)
			}
			err = ValidateCreateCertificationUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "CreateCertification", err)
			}
			return nil, NewCreateCertificationUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("coachee", "CreateCertification", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteCertificationRequest instantiates a HTTP request object with
// method and path set to call the "coachee" service "DeleteCertification"
// endpoint
func (c *Client) BuildDeleteCertificationRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id     uint
		certID string
	)
	{
		p, ok := v.(*coachee.DeleteCertificationPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("coachee", "DeleteCertification", "*coachee.DeleteCertificationPayload", v)
		}
		id = p.ID
		certID = p.CertID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteCertificationCoacheePath(id, certID)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("coachee", "DeleteCertification", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteCertificationRequest returns an encoder for requests sent to the
// coachee DeleteCertification server.
func EncodeDeleteCertificationRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*coachee.DeleteCertificationPayload)
		if !ok {
			return goahttp.ErrInvalidType("coachee", "DeleteCertification", "*coachee.DeleteCertificationPayload", v)
		}
		req.Header.Set("Authorization", p.Token)
		return nil
	}
}

// DecodeDeleteCertificationResponse returns a decoder for responses returned
// by the coachee DeleteCertification endpoint. restoreBody controls whether
// the response body should be restored after having been read.
// DecodeDeleteCertificationResponse may return the following errors:
//	- "internal" (type *goa.ServiceError): http.StatusInternalServerError
//	- "transient" (type *goa.ServiceError): http.StatusInternalServerError
//	- "notFound" (type *goa.ServiceError): http.StatusNotFound
//	- "validation" (type *goa.ServiceError): http.StatusBadRequest
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeDeleteCertificationResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "internal":
				var (
					body DeleteCertificationInternalResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "DeleteCertification", err)
				}
				err = ValidateDeleteCertificationInternalResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "DeleteCertification", err)
				}
				return nil, NewDeleteCertificationInternal(&body)
			case "transient":
				var (
					body DeleteCertificationTransientResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "DeleteCertification", err)
				}
				err = ValidateDeleteCertificationTransientResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "DeleteCertification", err)
				}
				return nil, NewDeleteCertificationTransient(&body)
			default:
				body, _ := ioutil.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("coachee", "DeleteCertification", resp.StatusCode, string(body))
			}
		case http.StatusNotFound:
			var (
				body DeleteCertificationNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "DeleteCertification", err)
			}
			err = ValidateDeleteCertificationNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "DeleteCertification", err)
			}
			return nil, NewDeleteCertificationNotFound(&body)
		case http.StatusBadRequest:
			var (
				body DeleteCertificationValidationResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "DeleteCertification", err)
			}
			err = ValidateDeleteCertificationValidationResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "DeleteCertification", err)
			}
			return nil, NewDeleteCertificationValidation(&body)
		case http.StatusUnauthorized:
			var (
				body DeleteCertificationUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "DeleteCertification", err)
			}
			err = ValidateDeleteCertificationUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "DeleteCertification", err)
			}
			return nil, NewDeleteCertificationUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("coachee", "DeleteCertification", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateProgramRequest instantiates a HTTP request object with method and
// path set to call the "coachee" service "CreateProgram" endpoint
func (c *Client) BuildCreateProgramRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id uint
	)
	{
		p, ok := v.(*coachee.CreateProgramPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("coachee", "CreateProgram", "*coachee.CreateProgramPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateProgramCoacheePath(id)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("coachee", "CreateProgram", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateProgramRequest returns an encoder for requests sent to the
// coachee CreateProgram server.
func EncodeCreateProgramRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*coachee.CreateProgramPayload)
		if !ok {
			return goahttp.ErrInvalidType("coachee", "CreateProgram", "*coachee.CreateProgramPayload", v)
		}
		req.Header.Set("Authorization", p.Token)
		body := NewCreateProgramRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("coachee", "CreateProgram", err)
		}
		return nil
	}
}

// DecodeCreateProgramResponse returns a decoder for responses returned by the
// coachee CreateProgram endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeCreateProgramResponse may return the following errors:
//	- "internal" (type *goa.ServiceError): http.StatusInternalServerError
//	- "transient" (type *goa.ServiceError): http.StatusInternalServerError
//	- "notFound" (type *goa.ServiceError): http.StatusNotFound
//	- "validation" (type *goa.ServiceError): http.StatusBadRequest
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeCreateProgramResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusAccepted:
			return nil, nil
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "internal":
				var (
					body CreateProgramInternalResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "CreateProgram", err)
				}
				err = ValidateCreateProgramInternalResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "CreateProgram", err)
				}
				return nil, NewCreateProgramInternal(&body)
			case "transient":
				var (
					body CreateProgramTransientResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "CreateProgram", err)
				}
				err = ValidateCreateProgramTransientResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "CreateProgram", err)
				}
				return nil, NewCreateProgramTransient(&body)
			default:
				body, _ := ioutil.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("coachee", "CreateProgram", resp.StatusCode, string(body))
			}
		case http.StatusNotFound:
			var (
				body CreateProgramNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "CreateProgram", err)
			}
			err = ValidateCreateProgramNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "CreateProgram", err)
			}
			return nil, NewCreateProgramNotFound(&body)
		case http.StatusBadRequest:
			var (
				body CreateProgramValidationResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "CreateProgram", err)
			}
			err = ValidateCreateProgramValidationResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "CreateProgram", err)
			}
			return nil, NewCreateProgramValidation(&body)
		case http.StatusUnauthorized:
			var (
				body CreateProgramUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "CreateProgram", err)
			}
			err = ValidateCreateProgramUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "CreateProgram", err)
			}
			return nil, NewCreateProgramUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("coachee", "CreateProgram", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteProgramRequest instantiates a HTTP request object with method and
// path set to call the "coachee" service "DeleteProgram" endpoint
func (c *Client) BuildDeleteProgramRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id        uint
		programID string
	)
	{
		p, ok := v.(*coachee.DeleteProgramPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("coachee", "DeleteProgram", "*coachee.DeleteProgramPayload", v)
		}
		id = p.ID
		programID = p.ProgramID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteProgramCoacheePath(id, programID)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("coachee", "DeleteProgram", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteProgramRequest returns an encoder for requests sent to the
// coachee DeleteProgram server.
func EncodeDeleteProgramRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*coachee.DeleteProgramPayload)
		if !ok {
			return goahttp.ErrInvalidType("coachee", "DeleteProgram", "*coachee.DeleteProgramPayload", v)
		}
		req.Header.Set("Authorization", p.Token)
		return nil
	}
}

// DecodeDeleteProgramResponse returns a decoder for responses returned by the
// coachee DeleteProgram endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeDeleteProgramResponse may return the following errors:
//	- "internal" (type *goa.ServiceError): http.StatusInternalServerError
//	- "transient" (type *goa.ServiceError): http.StatusInternalServerError
//	- "notFound" (type *goa.ServiceError): http.StatusNotFound
//	- "validation" (type *goa.ServiceError): http.StatusBadRequest
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeDeleteProgramResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "internal":
				var (
					body DeleteProgramInternalResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "DeleteProgram", err)
				}
				err = ValidateDeleteProgramInternalResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "DeleteProgram", err)
				}
				return nil, NewDeleteProgramInternal(&body)
			case "transient":
				var (
					body DeleteProgramTransientResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "DeleteProgram", err)
				}
				err = ValidateDeleteProgramTransientResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "DeleteProgram", err)
				}
				return nil, NewDeleteProgramTransient(&body)
			default:
				body, _ := ioutil.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("coachee", "DeleteProgram", resp.StatusCode, string(body))
			}
		case http.StatusNotFound:
			var (
				body DeleteProgramNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "DeleteProgram", err)
			}
			err = ValidateDeleteProgramNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "DeleteProgram", err)
			}
			return nil, NewDeleteProgramNotFound(&body)
		case http.StatusBadRequest:
			var (
				body DeleteProgramValidationResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "DeleteProgram", err)
			}
			err = ValidateDeleteProgramValidationResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "DeleteProgram", err)
			}
			return nil, NewDeleteProgramValidation(&body)
		case http.StatusUnauthorized:
			var (
				body DeleteProgramUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "DeleteProgram", err)
			}
			err = ValidateDeleteProgramUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "DeleteProgram", err)
			}
			return nil, NewDeleteProgramUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("coachee", "DeleteProgram", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateAvailabilityRequest instantiates a HTTP request object with
// method and path set to call the "coachee" service "CreateAvailability"
// endpoint
func (c *Client) BuildCreateAvailabilityRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id uint
	)
	{
		p, ok := v.(*coachee.CreateAvailabilityPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("coachee", "CreateAvailability", "*coachee.CreateAvailabilityPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateAvailabilityCoacheePath(id)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("coachee", "CreateAvailability", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateAvailabilityRequest returns an encoder for requests sent to the
// coachee CreateAvailability server.
func EncodeCreateAvailabilityRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*coachee.CreateAvailabilityPayload)
		if !ok {
			return goahttp.ErrInvalidType("coachee", "CreateAvailability", "*coachee.CreateAvailabilityPayload", v)
		}
		req.Header.Set("Authorization", p.Token)
		body := NewCreateAvailabilityRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("coachee", "CreateAvailability", err)
		}
		return nil
	}
}

// DecodeCreateAvailabilityResponse returns a decoder for responses returned by
// the coachee CreateAvailability endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeCreateAvailabilityResponse may return the following errors:
//	- "internal" (type *goa.ServiceError): http.StatusInternalServerError
//	- "transient" (type *goa.ServiceError): http.StatusInternalServerError
//	- "notFound" (type *goa.ServiceError): http.StatusNotFound
//	- "validation" (type *goa.ServiceError): http.StatusBadRequest
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeCreateAvailabilityResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusAccepted:
			return nil, nil
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "internal":
				var (
					body CreateAvailabilityInternalResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "CreateAvailability", err)
				}
				err = ValidateCreateAvailabilityInternalResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "CreateAvailability", err)
				}
				return nil, NewCreateAvailabilityInternal(&body)
			case "transient":
				var (
					body CreateAvailabilityTransientResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "CreateAvailability", err)
				}
				err = ValidateCreateAvailabilityTransientResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "CreateAvailability", err)
				}
				return nil, NewCreateAvailabilityTransient(&body)
			default:
				body, _ := ioutil.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("coachee", "CreateAvailability", resp.StatusCode, string(body))
			}
		case http.StatusNotFound:
			var (
				body CreateAvailabilityNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "CreateAvailability", err)
			}
			err = ValidateCreateAvailabilityNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "CreateAvailability", err)
			}
			return nil, NewCreateAvailabilityNotFound(&body)
		case http.StatusBadRequest:
			var (
				body CreateAvailabilityValidationResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "CreateAvailability", err)
			}
			err = ValidateCreateAvailabilityValidationResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "CreateAvailability", err)
			}
			return nil, NewCreateAvailabilityValidation(&body)
		case http.StatusUnauthorized:
			var (
				body CreateAvailabilityUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "CreateAvailability", err)
			}
			err = ValidateCreateAvailabilityUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "CreateAvailability", err)
			}
			return nil, NewCreateAvailabilityUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("coachee", "CreateAvailability", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteAvailabilityRequest instantiates a HTTP request object with
// method and path set to call the "coachee" service "DeleteAvailability"
// endpoint
func (c *Client) BuildDeleteAvailabilityRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id   uint
		avID string
	)
	{
		p, ok := v.(*coachee.DeleteAvailabilityPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("coachee", "DeleteAvailability", "*coachee.DeleteAvailabilityPayload", v)
		}
		id = p.ID
		avID = p.AvID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteAvailabilityCoacheePath(id, avID)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("coachee", "DeleteAvailability", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteAvailabilityRequest returns an encoder for requests sent to the
// coachee DeleteAvailability server.
func EncodeDeleteAvailabilityRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*coachee.DeleteAvailabilityPayload)
		if !ok {
			return goahttp.ErrInvalidType("coachee", "DeleteAvailability", "*coachee.DeleteAvailabilityPayload", v)
		}
		req.Header.Set("Authorization", p.Token)
		return nil
	}
}

// DecodeDeleteAvailabilityResponse returns a decoder for responses returned by
// the coachee DeleteAvailability endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeDeleteAvailabilityResponse may return the following errors:
//	- "internal" (type *goa.ServiceError): http.StatusInternalServerError
//	- "transient" (type *goa.ServiceError): http.StatusInternalServerError
//	- "notFound" (type *goa.ServiceError): http.StatusNotFound
//	- "validation" (type *goa.ServiceError): http.StatusBadRequest
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeDeleteAvailabilityResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "internal":
				var (
					body DeleteAvailabilityInternalResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "DeleteAvailability", err)
				}
				err = ValidateDeleteAvailabilityInternalResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "DeleteAvailability", err)
				}
				return nil, NewDeleteAvailabilityInternal(&body)
			case "transient":
				var (
					body DeleteAvailabilityTransientResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "DeleteAvailability", err)
				}
				err = ValidateDeleteAvailabilityTransientResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "DeleteAvailability", err)
				}
				return nil, NewDeleteAvailabilityTransient(&body)
			default:
				body, _ := ioutil.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("coachee", "DeleteAvailability", resp.StatusCode, string(body))
			}
		case http.StatusNotFound:
			var (
				body DeleteAvailabilityNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "DeleteAvailability", err)
			}
			err = ValidateDeleteAvailabilityNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "DeleteAvailability", err)
			}
			return nil, NewDeleteAvailabilityNotFound(&body)
		case http.StatusBadRequest:
			var (
				body DeleteAvailabilityValidationResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "DeleteAvailability", err)
			}
			err = ValidateDeleteAvailabilityValidationResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "DeleteAvailability", err)
			}
			return nil, NewDeleteAvailabilityValidation(&body)
		case http.StatusUnauthorized:
			var (
				body DeleteAvailabilityUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "DeleteAvailability", err)
			}
			err = ValidateDeleteAvailabilityUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "DeleteAvailability", err)
			}
			return nil, NewDeleteAvailabilityUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("coachee", "DeleteAvailability", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateCustomerRequest instantiates a HTTP request object with method
// and path set to call the "coachee" service "CreateCustomer" endpoint
func (c *Client) BuildCreateCustomerRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateCustomerCoacheePath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("coachee", "CreateCustomer", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateCustomerRequest returns an encoder for requests sent to the
// coachee CreateCustomer server.
func EncodeCreateCustomerRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*coachee.CreateCustomerPayload)
		if !ok {
			return goahttp.ErrInvalidType("coachee", "CreateCustomer", "*coachee.CreateCustomerPayload", v)
		}
		body := NewCreateCustomerRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("coachee", "CreateCustomer", err)
		}
		return nil
	}
}

// DecodeCreateCustomerResponse returns a decoder for responses returned by the
// coachee CreateCustomer endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeCreateCustomerResponse may return the following errors:
//	- "internal" (type *goa.ServiceError): http.StatusInternalServerError
//	- "transient" (type *goa.ServiceError): http.StatusInternalServerError
//	- "notFound" (type *goa.ServiceError): http.StatusNotFound
//	- "validation" (type *goa.ServiceError): http.StatusBadRequest
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeCreateCustomerResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body CreateCustomerResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "CreateCustomer", err)
			}
			err = ValidateCreateCustomerResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "CreateCustomer", err)
			}
			res := NewCreateCustomerResultCreated(&body)
			return res, nil
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "internal":
				var (
					body CreateCustomerInternalResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "CreateCustomer", err)
				}
				err = ValidateCreateCustomerInternalResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "CreateCustomer", err)
				}
				return nil, NewCreateCustomerInternal(&body)
			case "transient":
				var (
					body CreateCustomerTransientResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "CreateCustomer", err)
				}
				err = ValidateCreateCustomerTransientResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "CreateCustomer", err)
				}
				return nil, NewCreateCustomerTransient(&body)
			default:
				body, _ := ioutil.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("coachee", "CreateCustomer", resp.StatusCode, string(body))
			}
		case http.StatusNotFound:
			var (
				body CreateCustomerNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "CreateCustomer", err)
			}
			err = ValidateCreateCustomerNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "CreateCustomer", err)
			}
			return nil, NewCreateCustomerNotFound(&body)
		case http.StatusBadRequest:
			var (
				body CreateCustomerValidationResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "CreateCustomer", err)
			}
			err = ValidateCreateCustomerValidationResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "CreateCustomer", err)
			}
			return nil, NewCreateCustomerValidation(&body)
		case http.StatusUnauthorized:
			var (
				body CreateCustomerUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "CreateCustomer", err)
			}
			err = ValidateCreateCustomerUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "CreateCustomer", err)
			}
			return nil, NewCreateCustomerUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("coachee", "CreateCustomer", resp.StatusCode, string(body))
		}
	}
}

// BuildCustomerLoginRequest instantiates a HTTP request object with method and
// path set to call the "coachee" service "CustomerLogin" endpoint
func (c *Client) BuildCustomerLoginRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CustomerLoginCoacheePath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("coachee", "CustomerLogin", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCustomerLoginRequest returns an encoder for requests sent to the
// coachee CustomerLogin server.
func EncodeCustomerLoginRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*coachee.CustomerLoginPayload)
		if !ok {
			return goahttp.ErrInvalidType("coachee", "CustomerLogin", "*coachee.CustomerLoginPayload", v)
		}
		body := NewCustomerLoginRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("coachee", "CustomerLogin", err)
		}
		return nil
	}
}

// DecodeCustomerLoginResponse returns a decoder for responses returned by the
// coachee CustomerLogin endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeCustomerLoginResponse may return the following errors:
//	- "internal" (type *goa.ServiceError): http.StatusInternalServerError
//	- "transient" (type *goa.ServiceError): http.StatusInternalServerError
//	- "notFound" (type *goa.ServiceError): http.StatusNotFound
//	- "validation" (type *goa.ServiceError): http.StatusBadRequest
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeCustomerLoginResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body CustomerLoginResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "CustomerLogin", err)
			}
			err = ValidateCustomerLoginResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "CustomerLogin", err)
			}
			res := NewCustomerLoginResultOK(&body)
			return res, nil
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "internal":
				var (
					body CustomerLoginInternalResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "CustomerLogin", err)
				}
				err = ValidateCustomerLoginInternalResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "CustomerLogin", err)
				}
				return nil, NewCustomerLoginInternal(&body)
			case "transient":
				var (
					body CustomerLoginTransientResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "CustomerLogin", err)
				}
				err = ValidateCustomerLoginTransientResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "CustomerLogin", err)
				}
				return nil, NewCustomerLoginTransient(&body)
			default:
				body, _ := ioutil.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("coachee", "CustomerLogin", resp.StatusCode, string(body))
			}
		case http.StatusNotFound:
			var (
				body CustomerLoginNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "CustomerLogin", err)
			}
			err = ValidateCustomerLoginNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "CustomerLogin", err)
			}
			return nil, NewCustomerLoginNotFound(&body)
		case http.StatusBadRequest:
			var (
				body CustomerLoginValidationResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "CustomerLogin", err)
			}
			err = ValidateCustomerLoginValidationResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "CustomerLogin", err)
			}
			return nil, NewCustomerLoginValidation(&body)
		case http.StatusUnauthorized:
			var (
				body CustomerLoginUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "CustomerLogin", err)
			}
			err = ValidateCustomerLoginUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "CustomerLogin", err)
			}
			return nil, NewCustomerLoginUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("coachee", "CustomerLogin", resp.StatusCode, string(body))
		}
	}
}

// BuildStartPasswordRecoveryFlowRequest instantiates a HTTP request object
// with method and path set to call the "coachee" service
// "StartPasswordRecoveryFlow" endpoint
func (c *Client) BuildStartPasswordRecoveryFlowRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: StartPasswordRecoveryFlowCoacheePath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("coachee", "StartPasswordRecoveryFlow", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeStartPasswordRecoveryFlowRequest returns an encoder for requests sent
// to the coachee StartPasswordRecoveryFlow server.
func EncodeStartPasswordRecoveryFlowRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*coachee.StartPasswordRecoveryFlowPayload)
		if !ok {
			return goahttp.ErrInvalidType("coachee", "StartPasswordRecoveryFlow", "*coachee.StartPasswordRecoveryFlowPayload", v)
		}
		body := NewStartPasswordRecoveryFlowRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("coachee", "StartPasswordRecoveryFlow", err)
		}
		return nil
	}
}

// DecodeStartPasswordRecoveryFlowResponse returns a decoder for responses
// returned by the coachee StartPasswordRecoveryFlow endpoint. restoreBody
// controls whether the response body should be restored after having been read.
// DecodeStartPasswordRecoveryFlowResponse may return the following errors:
//	- "internal" (type *goa.ServiceError): http.StatusInternalServerError
//	- "transient" (type *goa.ServiceError): http.StatusInternalServerError
//	- "notFound" (type *goa.ServiceError): http.StatusNotFound
//	- "validation" (type *goa.ServiceError): http.StatusBadRequest
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeStartPasswordRecoveryFlowResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "internal":
				var (
					body StartPasswordRecoveryFlowInternalResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "StartPasswordRecoveryFlow", err)
				}
				err = ValidateStartPasswordRecoveryFlowInternalResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "StartPasswordRecoveryFlow", err)
				}
				return nil, NewStartPasswordRecoveryFlowInternal(&body)
			case "transient":
				var (
					body StartPasswordRecoveryFlowTransientResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "StartPasswordRecoveryFlow", err)
				}
				err = ValidateStartPasswordRecoveryFlowTransientResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "StartPasswordRecoveryFlow", err)
				}
				return nil, NewStartPasswordRecoveryFlowTransient(&body)
			default:
				body, _ := ioutil.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("coachee", "StartPasswordRecoveryFlow", resp.StatusCode, string(body))
			}
		case http.StatusNotFound:
			var (
				body StartPasswordRecoveryFlowNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "StartPasswordRecoveryFlow", err)
			}
			err = ValidateStartPasswordRecoveryFlowNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "StartPasswordRecoveryFlow", err)
			}
			return nil, NewStartPasswordRecoveryFlowNotFound(&body)
		case http.StatusBadRequest:
			var (
				body StartPasswordRecoveryFlowValidationResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "StartPasswordRecoveryFlow", err)
			}
			err = ValidateStartPasswordRecoveryFlowValidationResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "StartPasswordRecoveryFlow", err)
			}
			return nil, NewStartPasswordRecoveryFlowValidation(&body)
		case http.StatusUnauthorized:
			var (
				body StartPasswordRecoveryFlowUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "StartPasswordRecoveryFlow", err)
			}
			err = ValidateStartPasswordRecoveryFlowUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "StartPasswordRecoveryFlow", err)
			}
			return nil, NewStartPasswordRecoveryFlowUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("coachee", "StartPasswordRecoveryFlow", resp.StatusCode, string(body))
		}
	}
}

// BuildCheckPasswordRecoveryTokenRequest instantiates a HTTP request object
// with method and path set to call the "coachee" service
// "CheckPasswordRecoveryToken" endpoint
func (c *Client) BuildCheckPasswordRecoveryTokenRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		token string
	)
	{
		p, ok := v.(*coachee.CheckPasswordRecoveryTokenPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("coachee", "CheckPasswordRecoveryToken", "*coachee.CheckPasswordRecoveryTokenPayload", v)
		}
		token = p.Token
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CheckPasswordRecoveryTokenCoacheePath(token)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("coachee", "CheckPasswordRecoveryToken", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeCheckPasswordRecoveryTokenResponse returns a decoder for responses
// returned by the coachee CheckPasswordRecoveryToken endpoint. restoreBody
// controls whether the response body should be restored after having been read.
// DecodeCheckPasswordRecoveryTokenResponse may return the following errors:
//	- "internal" (type *goa.ServiceError): http.StatusInternalServerError
//	- "transient" (type *goa.ServiceError): http.StatusInternalServerError
//	- "notFound" (type *goa.ServiceError): http.StatusNotFound
//	- "validation" (type *goa.ServiceError): http.StatusBadRequest
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeCheckPasswordRecoveryTokenResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "internal":
				var (
					body CheckPasswordRecoveryTokenInternalResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "CheckPasswordRecoveryToken", err)
				}
				err = ValidateCheckPasswordRecoveryTokenInternalResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "CheckPasswordRecoveryToken", err)
				}
				return nil, NewCheckPasswordRecoveryTokenInternal(&body)
			case "transient":
				var (
					body CheckPasswordRecoveryTokenTransientResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "CheckPasswordRecoveryToken", err)
				}
				err = ValidateCheckPasswordRecoveryTokenTransientResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "CheckPasswordRecoveryToken", err)
				}
				return nil, NewCheckPasswordRecoveryTokenTransient(&body)
			default:
				body, _ := ioutil.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("coachee", "CheckPasswordRecoveryToken", resp.StatusCode, string(body))
			}
		case http.StatusNotFound:
			var (
				body CheckPasswordRecoveryTokenNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "CheckPasswordRecoveryToken", err)
			}
			err = ValidateCheckPasswordRecoveryTokenNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "CheckPasswordRecoveryToken", err)
			}
			return nil, NewCheckPasswordRecoveryTokenNotFound(&body)
		case http.StatusBadRequest:
			var (
				body CheckPasswordRecoveryTokenValidationResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "CheckPasswordRecoveryToken", err)
			}
			err = ValidateCheckPasswordRecoveryTokenValidationResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "CheckPasswordRecoveryToken", err)
			}
			return nil, NewCheckPasswordRecoveryTokenValidation(&body)
		case http.StatusUnauthorized:
			var (
				body CheckPasswordRecoveryTokenUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "CheckPasswordRecoveryToken", err)
			}
			err = ValidateCheckPasswordRecoveryTokenUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "CheckPasswordRecoveryToken", err)
			}
			return nil, NewCheckPasswordRecoveryTokenUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("coachee", "CheckPasswordRecoveryToken", resp.StatusCode, string(body))
		}
	}
}

// BuildFinalizePasswordRecoveryFlowRequest instantiates a HTTP request object
// with method and path set to call the "coachee" service
// "FinalizePasswordRecoveryFlow" endpoint
func (c *Client) BuildFinalizePasswordRecoveryFlowRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		token string
	)
	{
		p, ok := v.(*coachee.FinalizePasswordRecoveryFlowPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("coachee", "FinalizePasswordRecoveryFlow", "*coachee.FinalizePasswordRecoveryFlowPayload", v)
		}
		token = p.Token
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: FinalizePasswordRecoveryFlowCoacheePath(token)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("coachee", "FinalizePasswordRecoveryFlow", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeFinalizePasswordRecoveryFlowRequest returns an encoder for requests
// sent to the coachee FinalizePasswordRecoveryFlow server.
func EncodeFinalizePasswordRecoveryFlowRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*coachee.FinalizePasswordRecoveryFlowPayload)
		if !ok {
			return goahttp.ErrInvalidType("coachee", "FinalizePasswordRecoveryFlow", "*coachee.FinalizePasswordRecoveryFlowPayload", v)
		}
		body := NewFinalizePasswordRecoveryFlowRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("coachee", "FinalizePasswordRecoveryFlow", err)
		}
		return nil
	}
}

// DecodeFinalizePasswordRecoveryFlowResponse returns a decoder for responses
// returned by the coachee FinalizePasswordRecoveryFlow endpoint. restoreBody
// controls whether the response body should be restored after having been read.
// DecodeFinalizePasswordRecoveryFlowResponse may return the following errors:
//	- "internal" (type *goa.ServiceError): http.StatusInternalServerError
//	- "transient" (type *goa.ServiceError): http.StatusInternalServerError
//	- "notFound" (type *goa.ServiceError): http.StatusNotFound
//	- "validation" (type *goa.ServiceError): http.StatusBadRequest
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeFinalizePasswordRecoveryFlowResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "internal":
				var (
					body FinalizePasswordRecoveryFlowInternalResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "FinalizePasswordRecoveryFlow", err)
				}
				err = ValidateFinalizePasswordRecoveryFlowInternalResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "FinalizePasswordRecoveryFlow", err)
				}
				return nil, NewFinalizePasswordRecoveryFlowInternal(&body)
			case "transient":
				var (
					body FinalizePasswordRecoveryFlowTransientResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "FinalizePasswordRecoveryFlow", err)
				}
				err = ValidateFinalizePasswordRecoveryFlowTransientResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "FinalizePasswordRecoveryFlow", err)
				}
				return nil, NewFinalizePasswordRecoveryFlowTransient(&body)
			default:
				body, _ := ioutil.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("coachee", "FinalizePasswordRecoveryFlow", resp.StatusCode, string(body))
			}
		case http.StatusNotFound:
			var (
				body FinalizePasswordRecoveryFlowNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "FinalizePasswordRecoveryFlow", err)
			}
			err = ValidateFinalizePasswordRecoveryFlowNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "FinalizePasswordRecoveryFlow", err)
			}
			return nil, NewFinalizePasswordRecoveryFlowNotFound(&body)
		case http.StatusBadRequest:
			var (
				body FinalizePasswordRecoveryFlowValidationResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "FinalizePasswordRecoveryFlow", err)
			}
			err = ValidateFinalizePasswordRecoveryFlowValidationResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "FinalizePasswordRecoveryFlow", err)
			}
			return nil, NewFinalizePasswordRecoveryFlowValidation(&body)
		case http.StatusUnauthorized:
			var (
				body FinalizePasswordRecoveryFlowUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "FinalizePasswordRecoveryFlow", err)
			}
			err = ValidateFinalizePasswordRecoveryFlowUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "FinalizePasswordRecoveryFlow", err)
			}
			return nil, NewFinalizePasswordRecoveryFlowUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("coachee", "FinalizePasswordRecoveryFlow", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateOrderRequest instantiates a HTTP request object with method and
// path set to call the "coachee" service "CreateOrder" endpoint
func (c *Client) BuildCreateOrderRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateOrderCoacheePath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("coachee", "CreateOrder", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateOrderRequest returns an encoder for requests sent to the coachee
// CreateOrder server.
func EncodeCreateOrderRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*coachee.CreateOrderPayload)
		if !ok {
			return goahttp.ErrInvalidType("coachee", "CreateOrder", "*coachee.CreateOrderPayload", v)
		}
		req.Header.Set("Authorization", p.Token)
		body := NewCreateOrderRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("coachee", "CreateOrder", err)
		}
		return nil
	}
}

// DecodeCreateOrderResponse returns a decoder for responses returned by the
// coachee CreateOrder endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeCreateOrderResponse may return the following errors:
//	- "internal" (type *goa.ServiceError): http.StatusInternalServerError
//	- "transient" (type *goa.ServiceError): http.StatusInternalServerError
//	- "notFound" (type *goa.ServiceError): http.StatusNotFound
//	- "validation" (type *goa.ServiceError): http.StatusBadRequest
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeCreateOrderResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body CreateOrderResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "CreateOrder", err)
			}
			err = ValidateCreateOrderResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "CreateOrder", err)
			}
			res := NewCreateOrderResultCreated(&body)
			return res, nil
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "internal":
				var (
					body CreateOrderInternalResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "CreateOrder", err)
				}
				err = ValidateCreateOrderInternalResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "CreateOrder", err)
				}
				return nil, NewCreateOrderInternal(&body)
			case "transient":
				var (
					body CreateOrderTransientResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "CreateOrder", err)
				}
				err = ValidateCreateOrderTransientResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "CreateOrder", err)
				}
				return nil, NewCreateOrderTransient(&body)
			default:
				body, _ := ioutil.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("coachee", "CreateOrder", resp.StatusCode, string(body))
			}
		case http.StatusNotFound:
			var (
				body CreateOrderNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "CreateOrder", err)
			}
			err = ValidateCreateOrderNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "CreateOrder", err)
			}
			return nil, NewCreateOrderNotFound(&body)
		case http.StatusBadRequest:
			var (
				body CreateOrderValidationResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "CreateOrder", err)
			}
			err = ValidateCreateOrderValidationResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "CreateOrder", err)
			}
			return nil, NewCreateOrderValidation(&body)
		case http.StatusUnauthorized:
			var (
				body CreateOrderUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "CreateOrder", err)
			}
			err = ValidateCreateOrderUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "CreateOrder", err)
			}
			return nil, NewCreateOrderUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("coachee", "CreateOrder", resp.StatusCode, string(body))
		}
	}
}

// BuildRegisterStripeExpressRequest instantiates a HTTP request object with
// method and path set to call the "coachee" service "RegisterStripeExpress"
// endpoint
func (c *Client) BuildRegisterStripeExpressRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id uint
	)
	{
		p, ok := v.(*coachee.RegisterStripeExpressPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("coachee", "RegisterStripeExpress", "*coachee.RegisterStripeExpressPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RegisterStripeExpressCoacheePath(id)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("coachee", "RegisterStripeExpress", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeRegisterStripeExpressRequest returns an encoder for requests sent to
// the coachee RegisterStripeExpress server.
func EncodeRegisterStripeExpressRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*coachee.RegisterStripeExpressPayload)
		if !ok {
			return goahttp.ErrInvalidType("coachee", "RegisterStripeExpress", "*coachee.RegisterStripeExpressPayload", v)
		}
		body := NewRegisterStripeExpressRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("coachee", "RegisterStripeExpress", err)
		}
		return nil
	}
}

// DecodeRegisterStripeExpressResponse returns a decoder for responses returned
// by the coachee RegisterStripeExpress endpoint. restoreBody controls whether
// the response body should be restored after having been read.
// DecodeRegisterStripeExpressResponse may return the following errors:
//	- "internal" (type *goa.ServiceError): http.StatusInternalServerError
//	- "transient" (type *goa.ServiceError): http.StatusInternalServerError
//	- "notFound" (type *goa.ServiceError): http.StatusNotFound
//	- "validation" (type *goa.ServiceError): http.StatusBadRequest
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeRegisterStripeExpressResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			return nil, nil
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "internal":
				var (
					body RegisterStripeExpressInternalResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "RegisterStripeExpress", err)
				}
				err = ValidateRegisterStripeExpressInternalResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "RegisterStripeExpress", err)
				}
				return nil, NewRegisterStripeExpressInternal(&body)
			case "transient":
				var (
					body RegisterStripeExpressTransientResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "RegisterStripeExpress", err)
				}
				err = ValidateRegisterStripeExpressTransientResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "RegisterStripeExpress", err)
				}
				return nil, NewRegisterStripeExpressTransient(&body)
			default:
				body, _ := ioutil.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("coachee", "RegisterStripeExpress", resp.StatusCode, string(body))
			}
		case http.StatusNotFound:
			var (
				body RegisterStripeExpressNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "RegisterStripeExpress", err)
			}
			err = ValidateRegisterStripeExpressNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "RegisterStripeExpress", err)
			}
			return nil, NewRegisterStripeExpressNotFound(&body)
		case http.StatusBadRequest:
			var (
				body RegisterStripeExpressValidationResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "RegisterStripeExpress", err)
			}
			err = ValidateRegisterStripeExpressValidationResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "RegisterStripeExpress", err)
			}
			return nil, NewRegisterStripeExpressValidation(&body)
		case http.StatusUnauthorized:
			var (
				body RegisterStripeExpressUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "RegisterStripeExpress", err)
			}
			err = ValidateRegisterStripeExpressUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "RegisterStripeExpress", err)
			}
			return nil, NewRegisterStripeExpressUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("coachee", "RegisterStripeExpress", resp.StatusCode, string(body))
		}
	}
}

// BuildAdminLoginRequest instantiates a HTTP request object with method and
// path set to call the "coachee" service "AdminLogin" endpoint
func (c *Client) BuildAdminLoginRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AdminLoginCoacheePath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("coachee", "AdminLogin", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeAdminLoginRequest returns an encoder for requests sent to the coachee
// AdminLogin server.
func EncodeAdminLoginRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*coachee.AdminLoginPayload)
		if !ok {
			return goahttp.ErrInvalidType("coachee", "AdminLogin", "*coachee.AdminLoginPayload", v)
		}
		body := NewAdminLoginRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("coachee", "AdminLogin", err)
		}
		return nil
	}
}

// DecodeAdminLoginResponse returns a decoder for responses returned by the
// coachee AdminLogin endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeAdminLoginResponse may return the following errors:
//	- "internal" (type *goa.ServiceError): http.StatusInternalServerError
//	- "transient" (type *goa.ServiceError): http.StatusInternalServerError
//	- "notFound" (type *goa.ServiceError): http.StatusNotFound
//	- "validation" (type *goa.ServiceError): http.StatusBadRequest
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeAdminLoginResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body AdminLoginResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "AdminLogin", err)
			}
			err = ValidateAdminLoginResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "AdminLogin", err)
			}
			res := NewAdminLoginResultOK(&body)
			return res, nil
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "internal":
				var (
					body AdminLoginInternalResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "AdminLogin", err)
				}
				err = ValidateAdminLoginInternalResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "AdminLogin", err)
				}
				return nil, NewAdminLoginInternal(&body)
			case "transient":
				var (
					body AdminLoginTransientResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "AdminLogin", err)
				}
				err = ValidateAdminLoginTransientResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "AdminLogin", err)
				}
				return nil, NewAdminLoginTransient(&body)
			default:
				body, _ := ioutil.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("coachee", "AdminLogin", resp.StatusCode, string(body))
			}
		case http.StatusNotFound:
			var (
				body AdminLoginNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "AdminLogin", err)
			}
			err = ValidateAdminLoginNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "AdminLogin", err)
			}
			return nil, NewAdminLoginNotFound(&body)
		case http.StatusBadRequest:
			var (
				body AdminLoginValidationResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "AdminLogin", err)
			}
			err = ValidateAdminLoginValidationResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "AdminLogin", err)
			}
			return nil, NewAdminLoginValidation(&body)
		case http.StatusUnauthorized:
			var (
				body AdminLoginUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "AdminLogin", err)
			}
			err = ValidateAdminLoginUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "AdminLogin", err)
			}
			return nil, NewAdminLoginUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("coachee", "AdminLogin", resp.StatusCode, string(body))
		}
	}
}

// unmarshalCertificationResponseToCoacheeCertification builds a value of type
// *coachee.Certification from a value of type *CertificationResponse.
func unmarshalCertificationResponseToCoacheeCertification(v *CertificationResponse) *coachee.Certification {
	if v == nil {
		return nil
	}
	res := &coachee.Certification{
		ID:          v.ID,
		Title:       *v.Title,
		Description: *v.Description,
		Institution: *v.Institution,
		Month:       *v.Month,
		Year:        *v.Year,
	}

	return res
}

// unmarshalProgramResponseToCoacheeProgram builds a value of type
// *coachee.Program from a value of type *ProgramResponse.
func unmarshalProgramResponseToCoacheeProgram(v *ProgramResponse) *coachee.Program {
	if v == nil {
		return nil
	}
	res := &coachee.Program{
		ID:          v.ID,
		Name:        *v.Name,
		Sessions:    *v.Sessions,
		Duration:    *v.Duration,
		Description: *v.Description,
		TotalPrice:  *v.TotalPrice,
		TaxPercent:  *v.TaxPercent,
	}

	return res
}

// unmarshalAvailabilityResponseToCoacheeAvailability builds a value of type
// *coachee.Availability from a value of type *AvailabilityResponse.
func unmarshalAvailabilityResponseToCoacheeAvailability(v *AvailabilityResponse) *coachee.Availability {
	if v == nil {
		return nil
	}
	res := &coachee.Availability{
		ID:        *v.ID,
		WeekDay:   *v.WeekDay,
		Start:     *v.Start,
		End:       *v.End,
		DateLabel: *v.DateLabel,
	}

	return res
}

// unmarshalCertificationResponseBodyToCoacheeCertification builds a value of
// type *coachee.Certification from a value of type *CertificationResponseBody.
func unmarshalCertificationResponseBodyToCoacheeCertification(v *CertificationResponseBody) *coachee.Certification {
	if v == nil {
		return nil
	}
	res := &coachee.Certification{
		ID:          v.ID,
		Title:       *v.Title,
		Description: *v.Description,
		Institution: *v.Institution,
		Month:       *v.Month,
		Year:        *v.Year,
	}

	return res
}

// unmarshalProgramResponseBodyToCoacheeProgram builds a value of type
// *coachee.Program from a value of type *ProgramResponseBody.
func unmarshalProgramResponseBodyToCoacheeProgram(v *ProgramResponseBody) *coachee.Program {
	if v == nil {
		return nil
	}
	res := &coachee.Program{
		ID:          v.ID,
		Name:        *v.Name,
		Sessions:    *v.Sessions,
		Duration:    *v.Duration,
		Description: *v.Description,
		TotalPrice:  *v.TotalPrice,
		TaxPercent:  *v.TaxPercent,
	}

	return res
}

// unmarshalAvailabilityResponseBodyToCoacheeAvailability builds a value of
// type *coachee.Availability from a value of type *AvailabilityResponseBody.
func unmarshalAvailabilityResponseBodyToCoacheeAvailability(v *AvailabilityResponseBody) *coachee.Availability {
	if v == nil {
		return nil
	}
	res := &coachee.Availability{
		ID:        *v.ID,
		WeekDay:   *v.WeekDay,
		Start:     *v.Start,
		End:       *v.End,
		DateLabel: *v.DateLabel,
	}

	return res
}

// marshalCoacheeCertificationToCertificationRequestBody builds a value of type
// *CertificationRequestBody from a value of type *coachee.Certification.
func marshalCoacheeCertificationToCertificationRequestBody(v *coachee.Certification) *CertificationRequestBody {
	res := &CertificationRequestBody{
		ID:          v.ID,
		Title:       v.Title,
		Description: v.Description,
		Institution: v.Institution,
		Month:       v.Month,
		Year:        v.Year,
	}

	return res
}

// marshalCertificationRequestBodyToCoacheeCertification builds a value of type
// *coachee.Certification from a value of type *CertificationRequestBody.
func marshalCertificationRequestBodyToCoacheeCertification(v *CertificationRequestBody) *coachee.Certification {
	res := &coachee.Certification{
		ID:          v.ID,
		Title:       v.Title,
		Description: v.Description,
		Institution: v.Institution,
		Month:       v.Month,
		Year:        v.Year,
	}

	return res
}

// marshalCoacheeProgramToProgramRequestBody builds a value of type
// *ProgramRequestBody from a value of type *coachee.Program.
func marshalCoacheeProgramToProgramRequestBody(v *coachee.Program) *ProgramRequestBody {
	res := &ProgramRequestBody{
		ID:          v.ID,
		Name:        v.Name,
		Sessions:    v.Sessions,
		Duration:    v.Duration,
		Description: v.Description,
		TotalPrice:  v.TotalPrice,
		TaxPercent:  v.TaxPercent,
	}

	return res
}

// marshalProgramRequestBodyToCoacheeProgram builds a value of type
// *coachee.Program from a value of type *ProgramRequestBody.
func marshalProgramRequestBodyToCoacheeProgram(v *ProgramRequestBody) *coachee.Program {
	res := &coachee.Program{
		ID:          v.ID,
		Name:        v.Name,
		Sessions:    v.Sessions,
		Duration:    v.Duration,
		Description: v.Description,
		TotalPrice:  v.TotalPrice,
		TaxPercent:  v.TaxPercent,
	}

	return res
}

// unmarshalBaseClientResponseBodyToCoacheeBaseClient builds a value of type
// *coachee.BaseClient from a value of type *BaseClientResponseBody.
func unmarshalBaseClientResponseBodyToCoacheeBaseClient(v *BaseClientResponseBody) *coachee.BaseClient {
	res := &coachee.BaseClient{
		ID:        *v.ID,
		FirstName: *v.FirstName,
		LastName:  *v.LastName,
	}

	return res
}
