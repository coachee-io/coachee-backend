// Code generated by goa v3.0.7, DO NOT EDIT.
//
// coachee HTTP client encoders and decoders
//
// Command:
// $ goa gen coachee-backend/design

package client

import (
	"bytes"
	coachee "coachee-backend/gen/coachee"
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// BuildGetCoachesRequest instantiates a HTTP request object with method and
// path set to call the "coachee" service "GetCoaches" endpoint
func (c *Client) BuildGetCoachesRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetCoachesCoacheePath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("coachee", "GetCoaches", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetCoachesRequest returns an encoder for requests sent to the coachee
// GetCoaches server.
func EncodeGetCoachesRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*coachee.GetCoachesPayload)
		if !ok {
			return goahttp.ErrInvalidType("coachee", "GetCoaches", "*coachee.GetCoachesPayload", v)
		}
		values := req.URL.Query()
		if p.Tag != nil {
			values.Add("tag", *p.Tag)
		}
		if p.Limit != nil {
			values.Add("limit", fmt.Sprintf("%v", *p.Limit))
		}
		if p.Page != nil {
			values.Add("page", fmt.Sprintf("%v", *p.Page))
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeGetCoachesResponse returns a decoder for responses returned by the
// coachee GetCoaches endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeGetCoachesResponse may return the following errors:
//	- "internal" (type *goa.ServiceError): http.StatusInternalServerError
//	- "transient" (type *goa.ServiceError): http.StatusInternalServerError
//	- "notFound" (type *goa.ServiceError): http.StatusNotFound
//	- "validation" (type *goa.ServiceError): http.StatusBadRequest
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeGetCoachesResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetCoachesResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "GetCoaches", err)
			}
			for _, e := range body {
				if e != nil {
					if err2 := ValidateCoachResponse(e); err2 != nil {
						err = goa.MergeErrors(err, err2)
					}
				}
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "GetCoaches", err)
			}
			res := NewGetCoachesCoachOK(body)
			return res, nil
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "internal":
				var (
					body GetCoachesInternalResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "GetCoaches", err)
				}
				err = ValidateGetCoachesInternalResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "GetCoaches", err)
				}
				return nil, NewGetCoachesInternal(&body)
			case "transient":
				var (
					body GetCoachesTransientResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "GetCoaches", err)
				}
				err = ValidateGetCoachesTransientResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "GetCoaches", err)
				}
				return nil, NewGetCoachesTransient(&body)
			default:
				body, _ := ioutil.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("coachee", "GetCoaches", resp.StatusCode, string(body))
			}
		case http.StatusNotFound:
			var (
				body GetCoachesNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "GetCoaches", err)
			}
			err = ValidateGetCoachesNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "GetCoaches", err)
			}
			return nil, NewGetCoachesNotFound(&body)
		case http.StatusBadRequest:
			var (
				body GetCoachesValidationResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "GetCoaches", err)
			}
			err = ValidateGetCoachesValidationResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "GetCoaches", err)
			}
			return nil, NewGetCoachesValidation(&body)
		case http.StatusUnauthorized:
			var (
				body GetCoachesUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "GetCoaches", err)
			}
			err = ValidateGetCoachesUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "GetCoaches", err)
			}
			return nil, NewGetCoachesUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("coachee", "GetCoaches", resp.StatusCode, string(body))
		}
	}
}

// BuildGetCoachRequest instantiates a HTTP request object with method and path
// set to call the "coachee" service "GetCoach" endpoint
func (c *Client) BuildGetCoachRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id uint
	)
	{
		p, ok := v.(*coachee.GetCoachPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("coachee", "GetCoach", "*coachee.GetCoachPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetCoachCoacheePath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("coachee", "GetCoach", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetCoachResponse returns a decoder for responses returned by the
// coachee GetCoach endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeGetCoachResponse may return the following errors:
//	- "internal" (type *goa.ServiceError): http.StatusInternalServerError
//	- "transient" (type *goa.ServiceError): http.StatusInternalServerError
//	- "notFound" (type *goa.ServiceError): http.StatusNotFound
//	- "validation" (type *goa.ServiceError): http.StatusBadRequest
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeGetCoachResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetCoachResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "GetCoach", err)
			}
			err = ValidateGetCoachResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "GetCoach", err)
			}
			res := NewGetCoachCoachOK(&body)
			return res, nil
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "internal":
				var (
					body GetCoachInternalResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "GetCoach", err)
				}
				err = ValidateGetCoachInternalResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "GetCoach", err)
				}
				return nil, NewGetCoachInternal(&body)
			case "transient":
				var (
					body GetCoachTransientResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "GetCoach", err)
				}
				err = ValidateGetCoachTransientResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "GetCoach", err)
				}
				return nil, NewGetCoachTransient(&body)
			default:
				body, _ := ioutil.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("coachee", "GetCoach", resp.StatusCode, string(body))
			}
		case http.StatusNotFound:
			var (
				body GetCoachNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "GetCoach", err)
			}
			err = ValidateGetCoachNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "GetCoach", err)
			}
			return nil, NewGetCoachNotFound(&body)
		case http.StatusBadRequest:
			var (
				body GetCoachValidationResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "GetCoach", err)
			}
			err = ValidateGetCoachValidationResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "GetCoach", err)
			}
			return nil, NewGetCoachValidation(&body)
		case http.StatusUnauthorized:
			var (
				body GetCoachUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "GetCoach", err)
			}
			err = ValidateGetCoachUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "GetCoach", err)
			}
			return nil, NewGetCoachUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("coachee", "GetCoach", resp.StatusCode, string(body))
		}
	}
}

// BuildLenCoachesRequest instantiates a HTTP request object with method and
// path set to call the "coachee" service "LenCoaches" endpoint
func (c *Client) BuildLenCoachesRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		tag string
	)
	{
		p, ok := v.(*coachee.LenCoachesPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("coachee", "LenCoaches", "*coachee.LenCoachesPayload", v)
		}
		tag = p.Tag
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: LenCoachesCoacheePath(tag)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("coachee", "LenCoaches", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeLenCoachesResponse returns a decoder for responses returned by the
// coachee LenCoaches endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeLenCoachesResponse may return the following errors:
//	- "internal" (type *goa.ServiceError): http.StatusInternalServerError
//	- "transient" (type *goa.ServiceError): http.StatusInternalServerError
//	- "notFound" (type *goa.ServiceError): http.StatusNotFound
//	- "validation" (type *goa.ServiceError): http.StatusBadRequest
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeLenCoachesResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body uint
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "LenCoaches", err)
			}
			return body, nil
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "internal":
				var (
					body LenCoachesInternalResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "LenCoaches", err)
				}
				err = ValidateLenCoachesInternalResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "LenCoaches", err)
				}
				return nil, NewLenCoachesInternal(&body)
			case "transient":
				var (
					body LenCoachesTransientResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "LenCoaches", err)
				}
				err = ValidateLenCoachesTransientResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "LenCoaches", err)
				}
				return nil, NewLenCoachesTransient(&body)
			default:
				body, _ := ioutil.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("coachee", "LenCoaches", resp.StatusCode, string(body))
			}
		case http.StatusNotFound:
			var (
				body LenCoachesNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "LenCoaches", err)
			}
			err = ValidateLenCoachesNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "LenCoaches", err)
			}
			return nil, NewLenCoachesNotFound(&body)
		case http.StatusBadRequest:
			var (
				body LenCoachesValidationResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "LenCoaches", err)
			}
			err = ValidateLenCoachesValidationResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "LenCoaches", err)
			}
			return nil, NewLenCoachesValidation(&body)
		case http.StatusUnauthorized:
			var (
				body LenCoachesUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "LenCoaches", err)
			}
			err = ValidateLenCoachesUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "LenCoaches", err)
			}
			return nil, NewLenCoachesUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("coachee", "LenCoaches", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateCoachRequest instantiates a HTTP request object with method and
// path set to call the "coachee" service "CreateCoach" endpoint
func (c *Client) BuildCreateCoachRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateCoachCoacheePath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("coachee", "CreateCoach", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateCoachRequest returns an encoder for requests sent to the coachee
// CreateCoach server.
func EncodeCreateCoachRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*coachee.CreateCoachPayload)
		if !ok {
			return goahttp.ErrInvalidType("coachee", "CreateCoach", "*coachee.CreateCoachPayload", v)
		}
		body := NewCreateCoachRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("coachee", "CreateCoach", err)
		}
		return nil
	}
}

// DecodeCreateCoachResponse returns a decoder for responses returned by the
// coachee CreateCoach endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeCreateCoachResponse may return the following errors:
//	- "internal" (type *goa.ServiceError): http.StatusInternalServerError
//	- "transient" (type *goa.ServiceError): http.StatusInternalServerError
//	- "notFound" (type *goa.ServiceError): http.StatusNotFound
//	- "validation" (type *goa.ServiceError): http.StatusBadRequest
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeCreateCoachResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body uint
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "CreateCoach", err)
			}
			return body, nil
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "internal":
				var (
					body CreateCoachInternalResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "CreateCoach", err)
				}
				err = ValidateCreateCoachInternalResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "CreateCoach", err)
				}
				return nil, NewCreateCoachInternal(&body)
			case "transient":
				var (
					body CreateCoachTransientResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "CreateCoach", err)
				}
				err = ValidateCreateCoachTransientResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "CreateCoach", err)
				}
				return nil, NewCreateCoachTransient(&body)
			default:
				body, _ := ioutil.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("coachee", "CreateCoach", resp.StatusCode, string(body))
			}
		case http.StatusNotFound:
			var (
				body CreateCoachNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "CreateCoach", err)
			}
			err = ValidateCreateCoachNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "CreateCoach", err)
			}
			return nil, NewCreateCoachNotFound(&body)
		case http.StatusBadRequest:
			var (
				body CreateCoachValidationResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "CreateCoach", err)
			}
			err = ValidateCreateCoachValidationResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "CreateCoach", err)
			}
			return nil, NewCreateCoachValidation(&body)
		case http.StatusUnauthorized:
			var (
				body CreateCoachUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "CreateCoach", err)
			}
			err = ValidateCreateCoachUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "CreateCoach", err)
			}
			return nil, NewCreateCoachUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("coachee", "CreateCoach", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateCoachRequest instantiates a HTTP request object with method and
// path set to call the "coachee" service "UpdateCoach" endpoint
func (c *Client) BuildUpdateCoachRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id uint
	)
	{
		p, ok := v.(*coachee.UpdateCoachPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("coachee", "UpdateCoach", "*coachee.UpdateCoachPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateCoachCoacheePath(id)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("coachee", "UpdateCoach", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateCoachRequest returns an encoder for requests sent to the coachee
// UpdateCoach server.
func EncodeUpdateCoachRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*coachee.UpdateCoachPayload)
		if !ok {
			return goahttp.ErrInvalidType("coachee", "UpdateCoach", "*coachee.UpdateCoachPayload", v)
		}
		body := NewUpdateCoachRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("coachee", "UpdateCoach", err)
		}
		return nil
	}
}

// DecodeUpdateCoachResponse returns a decoder for responses returned by the
// coachee UpdateCoach endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeUpdateCoachResponse may return the following errors:
//	- "internal" (type *goa.ServiceError): http.StatusInternalServerError
//	- "transient" (type *goa.ServiceError): http.StatusInternalServerError
//	- "notFound" (type *goa.ServiceError): http.StatusNotFound
//	- "validation" (type *goa.ServiceError): http.StatusBadRequest
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeUpdateCoachResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusAccepted:
			return nil, nil
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "internal":
				var (
					body UpdateCoachInternalResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "UpdateCoach", err)
				}
				err = ValidateUpdateCoachInternalResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "UpdateCoach", err)
				}
				return nil, NewUpdateCoachInternal(&body)
			case "transient":
				var (
					body UpdateCoachTransientResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "UpdateCoach", err)
				}
				err = ValidateUpdateCoachTransientResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "UpdateCoach", err)
				}
				return nil, NewUpdateCoachTransient(&body)
			default:
				body, _ := ioutil.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("coachee", "UpdateCoach", resp.StatusCode, string(body))
			}
		case http.StatusNotFound:
			var (
				body UpdateCoachNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "UpdateCoach", err)
			}
			err = ValidateUpdateCoachNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "UpdateCoach", err)
			}
			return nil, NewUpdateCoachNotFound(&body)
		case http.StatusBadRequest:
			var (
				body UpdateCoachValidationResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "UpdateCoach", err)
			}
			err = ValidateUpdateCoachValidationResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "UpdateCoach", err)
			}
			return nil, NewUpdateCoachValidation(&body)
		case http.StatusUnauthorized:
			var (
				body UpdateCoachUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "UpdateCoach", err)
			}
			err = ValidateUpdateCoachUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "UpdateCoach", err)
			}
			return nil, NewUpdateCoachUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("coachee", "UpdateCoach", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateCertificationRequest instantiates a HTTP request object with
// method and path set to call the "coachee" service "CreateCertification"
// endpoint
func (c *Client) BuildCreateCertificationRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id uint
	)
	{
		p, ok := v.(*coachee.CreateCertificationPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("coachee", "CreateCertification", "*coachee.CreateCertificationPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateCertificationCoacheePath(id)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("coachee", "CreateCertification", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateCertificationRequest returns an encoder for requests sent to the
// coachee CreateCertification server.
func EncodeCreateCertificationRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*coachee.CreateCertificationPayload)
		if !ok {
			return goahttp.ErrInvalidType("coachee", "CreateCertification", "*coachee.CreateCertificationPayload", v)
		}
		body := NewCreateCertificationRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("coachee", "CreateCertification", err)
		}
		return nil
	}
}

// DecodeCreateCertificationResponse returns a decoder for responses returned
// by the coachee CreateCertification endpoint. restoreBody controls whether
// the response body should be restored after having been read.
// DecodeCreateCertificationResponse may return the following errors:
//	- "internal" (type *goa.ServiceError): http.StatusInternalServerError
//	- "transient" (type *goa.ServiceError): http.StatusInternalServerError
//	- "notFound" (type *goa.ServiceError): http.StatusNotFound
//	- "validation" (type *goa.ServiceError): http.StatusBadRequest
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeCreateCertificationResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusAccepted:
			return nil, nil
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "internal":
				var (
					body CreateCertificationInternalResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "CreateCertification", err)
				}
				err = ValidateCreateCertificationInternalResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "CreateCertification", err)
				}
				return nil, NewCreateCertificationInternal(&body)
			case "transient":
				var (
					body CreateCertificationTransientResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "CreateCertification", err)
				}
				err = ValidateCreateCertificationTransientResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "CreateCertification", err)
				}
				return nil, NewCreateCertificationTransient(&body)
			default:
				body, _ := ioutil.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("coachee", "CreateCertification", resp.StatusCode, string(body))
			}
		case http.StatusNotFound:
			var (
				body CreateCertificationNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "CreateCertification", err)
			}
			err = ValidateCreateCertificationNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "CreateCertification", err)
			}
			return nil, NewCreateCertificationNotFound(&body)
		case http.StatusBadRequest:
			var (
				body CreateCertificationValidationResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "CreateCertification", err)
			}
			err = ValidateCreateCertificationValidationResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "CreateCertification", err)
			}
			return nil, NewCreateCertificationValidation(&body)
		case http.StatusUnauthorized:
			var (
				body CreateCertificationUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "CreateCertification", err)
			}
			err = ValidateCreateCertificationUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "CreateCertification", err)
			}
			return nil, NewCreateCertificationUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("coachee", "CreateCertification", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteCertificationRequest instantiates a HTTP request object with
// method and path set to call the "coachee" service "DeleteCertification"
// endpoint
func (c *Client) BuildDeleteCertificationRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id     uint
		certID string
	)
	{
		p, ok := v.(*coachee.DeleteCertificationPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("coachee", "DeleteCertification", "*coachee.DeleteCertificationPayload", v)
		}
		id = p.ID
		certID = p.CertID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteCertificationCoacheePath(id, certID)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("coachee", "DeleteCertification", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeDeleteCertificationResponse returns a decoder for responses returned
// by the coachee DeleteCertification endpoint. restoreBody controls whether
// the response body should be restored after having been read.
// DecodeDeleteCertificationResponse may return the following errors:
//	- "internal" (type *goa.ServiceError): http.StatusInternalServerError
//	- "transient" (type *goa.ServiceError): http.StatusInternalServerError
//	- "notFound" (type *goa.ServiceError): http.StatusNotFound
//	- "validation" (type *goa.ServiceError): http.StatusBadRequest
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeDeleteCertificationResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "internal":
				var (
					body DeleteCertificationInternalResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "DeleteCertification", err)
				}
				err = ValidateDeleteCertificationInternalResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "DeleteCertification", err)
				}
				return nil, NewDeleteCertificationInternal(&body)
			case "transient":
				var (
					body DeleteCertificationTransientResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "DeleteCertification", err)
				}
				err = ValidateDeleteCertificationTransientResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "DeleteCertification", err)
				}
				return nil, NewDeleteCertificationTransient(&body)
			default:
				body, _ := ioutil.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("coachee", "DeleteCertification", resp.StatusCode, string(body))
			}
		case http.StatusNotFound:
			var (
				body DeleteCertificationNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "DeleteCertification", err)
			}
			err = ValidateDeleteCertificationNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "DeleteCertification", err)
			}
			return nil, NewDeleteCertificationNotFound(&body)
		case http.StatusBadRequest:
			var (
				body DeleteCertificationValidationResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "DeleteCertification", err)
			}
			err = ValidateDeleteCertificationValidationResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "DeleteCertification", err)
			}
			return nil, NewDeleteCertificationValidation(&body)
		case http.StatusUnauthorized:
			var (
				body DeleteCertificationUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "DeleteCertification", err)
			}
			err = ValidateDeleteCertificationUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "DeleteCertification", err)
			}
			return nil, NewDeleteCertificationUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("coachee", "DeleteCertification", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateProgramRequest instantiates a HTTP request object with method and
// path set to call the "coachee" service "CreateProgram" endpoint
func (c *Client) BuildCreateProgramRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id uint
	)
	{
		p, ok := v.(*coachee.CreateProgramPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("coachee", "CreateProgram", "*coachee.CreateProgramPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateProgramCoacheePath(id)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("coachee", "CreateProgram", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateProgramRequest returns an encoder for requests sent to the
// coachee CreateProgram server.
func EncodeCreateProgramRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*coachee.CreateProgramPayload)
		if !ok {
			return goahttp.ErrInvalidType("coachee", "CreateProgram", "*coachee.CreateProgramPayload", v)
		}
		body := NewCreateProgramRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("coachee", "CreateProgram", err)
		}
		return nil
	}
}

// DecodeCreateProgramResponse returns a decoder for responses returned by the
// coachee CreateProgram endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeCreateProgramResponse may return the following errors:
//	- "internal" (type *goa.ServiceError): http.StatusInternalServerError
//	- "transient" (type *goa.ServiceError): http.StatusInternalServerError
//	- "notFound" (type *goa.ServiceError): http.StatusNotFound
//	- "validation" (type *goa.ServiceError): http.StatusBadRequest
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeCreateProgramResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusAccepted:
			return nil, nil
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "internal":
				var (
					body CreateProgramInternalResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "CreateProgram", err)
				}
				err = ValidateCreateProgramInternalResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "CreateProgram", err)
				}
				return nil, NewCreateProgramInternal(&body)
			case "transient":
				var (
					body CreateProgramTransientResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "CreateProgram", err)
				}
				err = ValidateCreateProgramTransientResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "CreateProgram", err)
				}
				return nil, NewCreateProgramTransient(&body)
			default:
				body, _ := ioutil.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("coachee", "CreateProgram", resp.StatusCode, string(body))
			}
		case http.StatusNotFound:
			var (
				body CreateProgramNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "CreateProgram", err)
			}
			err = ValidateCreateProgramNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "CreateProgram", err)
			}
			return nil, NewCreateProgramNotFound(&body)
		case http.StatusBadRequest:
			var (
				body CreateProgramValidationResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "CreateProgram", err)
			}
			err = ValidateCreateProgramValidationResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "CreateProgram", err)
			}
			return nil, NewCreateProgramValidation(&body)
		case http.StatusUnauthorized:
			var (
				body CreateProgramUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "CreateProgram", err)
			}
			err = ValidateCreateProgramUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "CreateProgram", err)
			}
			return nil, NewCreateProgramUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("coachee", "CreateProgram", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteProgramRequest instantiates a HTTP request object with method and
// path set to call the "coachee" service "DeleteProgram" endpoint
func (c *Client) BuildDeleteProgramRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id        uint
		programID string
	)
	{
		p, ok := v.(*coachee.DeleteProgramPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("coachee", "DeleteProgram", "*coachee.DeleteProgramPayload", v)
		}
		id = p.ID
		programID = p.ProgramID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteProgramCoacheePath(id, programID)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("coachee", "DeleteProgram", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeDeleteProgramResponse returns a decoder for responses returned by the
// coachee DeleteProgram endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeDeleteProgramResponse may return the following errors:
//	- "internal" (type *goa.ServiceError): http.StatusInternalServerError
//	- "transient" (type *goa.ServiceError): http.StatusInternalServerError
//	- "notFound" (type *goa.ServiceError): http.StatusNotFound
//	- "validation" (type *goa.ServiceError): http.StatusBadRequest
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeDeleteProgramResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "internal":
				var (
					body DeleteProgramInternalResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "DeleteProgram", err)
				}
				err = ValidateDeleteProgramInternalResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "DeleteProgram", err)
				}
				return nil, NewDeleteProgramInternal(&body)
			case "transient":
				var (
					body DeleteProgramTransientResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "DeleteProgram", err)
				}
				err = ValidateDeleteProgramTransientResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "DeleteProgram", err)
				}
				return nil, NewDeleteProgramTransient(&body)
			default:
				body, _ := ioutil.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("coachee", "DeleteProgram", resp.StatusCode, string(body))
			}
		case http.StatusNotFound:
			var (
				body DeleteProgramNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "DeleteProgram", err)
			}
			err = ValidateDeleteProgramNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "DeleteProgram", err)
			}
			return nil, NewDeleteProgramNotFound(&body)
		case http.StatusBadRequest:
			var (
				body DeleteProgramValidationResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "DeleteProgram", err)
			}
			err = ValidateDeleteProgramValidationResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "DeleteProgram", err)
			}
			return nil, NewDeleteProgramValidation(&body)
		case http.StatusUnauthorized:
			var (
				body DeleteProgramUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "DeleteProgram", err)
			}
			err = ValidateDeleteProgramUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "DeleteProgram", err)
			}
			return nil, NewDeleteProgramUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("coachee", "DeleteProgram", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateAvailabilityRequest instantiates a HTTP request object with
// method and path set to call the "coachee" service "CreateAvailability"
// endpoint
func (c *Client) BuildCreateAvailabilityRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id uint
	)
	{
		p, ok := v.(*coachee.CreateAvailabilityPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("coachee", "CreateAvailability", "*coachee.CreateAvailabilityPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateAvailabilityCoacheePath(id)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("coachee", "CreateAvailability", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateAvailabilityRequest returns an encoder for requests sent to the
// coachee CreateAvailability server.
func EncodeCreateAvailabilityRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*coachee.CreateAvailabilityPayload)
		if !ok {
			return goahttp.ErrInvalidType("coachee", "CreateAvailability", "*coachee.CreateAvailabilityPayload", v)
		}
		body := NewCreateAvailabilityRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("coachee", "CreateAvailability", err)
		}
		return nil
	}
}

// DecodeCreateAvailabilityResponse returns a decoder for responses returned by
// the coachee CreateAvailability endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeCreateAvailabilityResponse may return the following errors:
//	- "internal" (type *goa.ServiceError): http.StatusInternalServerError
//	- "transient" (type *goa.ServiceError): http.StatusInternalServerError
//	- "notFound" (type *goa.ServiceError): http.StatusNotFound
//	- "validation" (type *goa.ServiceError): http.StatusBadRequest
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeCreateAvailabilityResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusAccepted:
			return nil, nil
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "internal":
				var (
					body CreateAvailabilityInternalResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "CreateAvailability", err)
				}
				err = ValidateCreateAvailabilityInternalResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "CreateAvailability", err)
				}
				return nil, NewCreateAvailabilityInternal(&body)
			case "transient":
				var (
					body CreateAvailabilityTransientResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "CreateAvailability", err)
				}
				err = ValidateCreateAvailabilityTransientResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "CreateAvailability", err)
				}
				return nil, NewCreateAvailabilityTransient(&body)
			default:
				body, _ := ioutil.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("coachee", "CreateAvailability", resp.StatusCode, string(body))
			}
		case http.StatusNotFound:
			var (
				body CreateAvailabilityNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "CreateAvailability", err)
			}
			err = ValidateCreateAvailabilityNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "CreateAvailability", err)
			}
			return nil, NewCreateAvailabilityNotFound(&body)
		case http.StatusBadRequest:
			var (
				body CreateAvailabilityValidationResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "CreateAvailability", err)
			}
			err = ValidateCreateAvailabilityValidationResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "CreateAvailability", err)
			}
			return nil, NewCreateAvailabilityValidation(&body)
		case http.StatusUnauthorized:
			var (
				body CreateAvailabilityUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "CreateAvailability", err)
			}
			err = ValidateCreateAvailabilityUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "CreateAvailability", err)
			}
			return nil, NewCreateAvailabilityUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("coachee", "CreateAvailability", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteAvailabilityRequest instantiates a HTTP request object with
// method and path set to call the "coachee" service "DeleteAvailability"
// endpoint
func (c *Client) BuildDeleteAvailabilityRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id   uint
		avID string
	)
	{
		p, ok := v.(*coachee.DeleteAvailabilityPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("coachee", "DeleteAvailability", "*coachee.DeleteAvailabilityPayload", v)
		}
		id = p.ID
		avID = p.AvID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteAvailabilityCoacheePath(id, avID)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("coachee", "DeleteAvailability", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeDeleteAvailabilityResponse returns a decoder for responses returned by
// the coachee DeleteAvailability endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeDeleteAvailabilityResponse may return the following errors:
//	- "internal" (type *goa.ServiceError): http.StatusInternalServerError
//	- "transient" (type *goa.ServiceError): http.StatusInternalServerError
//	- "notFound" (type *goa.ServiceError): http.StatusNotFound
//	- "validation" (type *goa.ServiceError): http.StatusBadRequest
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeDeleteAvailabilityResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "internal":
				var (
					body DeleteAvailabilityInternalResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "DeleteAvailability", err)
				}
				err = ValidateDeleteAvailabilityInternalResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "DeleteAvailability", err)
				}
				return nil, NewDeleteAvailabilityInternal(&body)
			case "transient":
				var (
					body DeleteAvailabilityTransientResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "DeleteAvailability", err)
				}
				err = ValidateDeleteAvailabilityTransientResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "DeleteAvailability", err)
				}
				return nil, NewDeleteAvailabilityTransient(&body)
			default:
				body, _ := ioutil.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("coachee", "DeleteAvailability", resp.StatusCode, string(body))
			}
		case http.StatusNotFound:
			var (
				body DeleteAvailabilityNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "DeleteAvailability", err)
			}
			err = ValidateDeleteAvailabilityNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "DeleteAvailability", err)
			}
			return nil, NewDeleteAvailabilityNotFound(&body)
		case http.StatusBadRequest:
			var (
				body DeleteAvailabilityValidationResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "DeleteAvailability", err)
			}
			err = ValidateDeleteAvailabilityValidationResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "DeleteAvailability", err)
			}
			return nil, NewDeleteAvailabilityValidation(&body)
		case http.StatusUnauthorized:
			var (
				body DeleteAvailabilityUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "DeleteAvailability", err)
			}
			err = ValidateDeleteAvailabilityUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "DeleteAvailability", err)
			}
			return nil, NewDeleteAvailabilityUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("coachee", "DeleteAvailability", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateClientRequest instantiates a HTTP request object with method and
// path set to call the "coachee" service "CreateClient" endpoint
func (c *Client) BuildCreateClientRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateClientCoacheePath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("coachee", "CreateClient", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateClientRequest returns an encoder for requests sent to the
// coachee CreateClient server.
func EncodeCreateClientRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*coachee.CreateClientPayload)
		if !ok {
			return goahttp.ErrInvalidType("coachee", "CreateClient", "*coachee.CreateClientPayload", v)
		}
		body := NewCreateClientRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("coachee", "CreateClient", err)
		}
		return nil
	}
}

// DecodeCreateClientResponse returns a decoder for responses returned by the
// coachee CreateClient endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeCreateClientResponse may return the following errors:
//	- "internal" (type *goa.ServiceError): http.StatusInternalServerError
//	- "transient" (type *goa.ServiceError): http.StatusInternalServerError
//	- "notFound" (type *goa.ServiceError): http.StatusNotFound
//	- "validation" (type *goa.ServiceError): http.StatusBadRequest
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeCreateClientResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body CreateClientResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "CreateClient", err)
			}
			err = ValidateCreateClientResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "CreateClient", err)
			}
			res := NewCreateClientResultCreated(&body)
			return res, nil
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "internal":
				var (
					body CreateClientInternalResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "CreateClient", err)
				}
				err = ValidateCreateClientInternalResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "CreateClient", err)
				}
				return nil, NewCreateClientInternal(&body)
			case "transient":
				var (
					body CreateClientTransientResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "CreateClient", err)
				}
				err = ValidateCreateClientTransientResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "CreateClient", err)
				}
				return nil, NewCreateClientTransient(&body)
			default:
				body, _ := ioutil.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("coachee", "CreateClient", resp.StatusCode, string(body))
			}
		case http.StatusNotFound:
			var (
				body CreateClientNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "CreateClient", err)
			}
			err = ValidateCreateClientNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "CreateClient", err)
			}
			return nil, NewCreateClientNotFound(&body)
		case http.StatusBadRequest:
			var (
				body CreateClientValidationResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "CreateClient", err)
			}
			err = ValidateCreateClientValidationResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "CreateClient", err)
			}
			return nil, NewCreateClientValidation(&body)
		case http.StatusUnauthorized:
			var (
				body CreateClientUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "CreateClient", err)
			}
			err = ValidateCreateClientUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "CreateClient", err)
			}
			return nil, NewCreateClientUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("coachee", "CreateClient", resp.StatusCode, string(body))
		}
	}
}

// BuildClientLoginRequest instantiates a HTTP request object with method and
// path set to call the "coachee" service "ClientLogin" endpoint
func (c *Client) BuildClientLoginRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ClientLoginCoacheePath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("coachee", "ClientLogin", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeClientLoginRequest returns an encoder for requests sent to the coachee
// ClientLogin server.
func EncodeClientLoginRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*coachee.ClientLoginPayload)
		if !ok {
			return goahttp.ErrInvalidType("coachee", "ClientLogin", "*coachee.ClientLoginPayload", v)
		}
		body := NewClientLoginRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("coachee", "ClientLogin", err)
		}
		return nil
	}
}

// DecodeClientLoginResponse returns a decoder for responses returned by the
// coachee ClientLogin endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeClientLoginResponse may return the following errors:
//	- "internal" (type *goa.ServiceError): http.StatusInternalServerError
//	- "transient" (type *goa.ServiceError): http.StatusInternalServerError
//	- "notFound" (type *goa.ServiceError): http.StatusNotFound
//	- "validation" (type *goa.ServiceError): http.StatusBadRequest
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeClientLoginResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ClientLoginResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "ClientLogin", err)
			}
			err = ValidateClientLoginResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "ClientLogin", err)
			}
			res := NewClientLoginResultOK(&body)
			return res, nil
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "internal":
				var (
					body ClientLoginInternalResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "ClientLogin", err)
				}
				err = ValidateClientLoginInternalResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "ClientLogin", err)
				}
				return nil, NewClientLoginInternal(&body)
			case "transient":
				var (
					body ClientLoginTransientResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "ClientLogin", err)
				}
				err = ValidateClientLoginTransientResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "ClientLogin", err)
				}
				return nil, NewClientLoginTransient(&body)
			default:
				body, _ := ioutil.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("coachee", "ClientLogin", resp.StatusCode, string(body))
			}
		case http.StatusNotFound:
			var (
				body ClientLoginNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "ClientLogin", err)
			}
			err = ValidateClientLoginNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "ClientLogin", err)
			}
			return nil, NewClientLoginNotFound(&body)
		case http.StatusBadRequest:
			var (
				body ClientLoginValidationResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "ClientLogin", err)
			}
			err = ValidateClientLoginValidationResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "ClientLogin", err)
			}
			return nil, NewClientLoginValidation(&body)
		case http.StatusUnauthorized:
			var (
				body ClientLoginUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "ClientLogin", err)
			}
			err = ValidateClientLoginUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "ClientLogin", err)
			}
			return nil, NewClientLoginUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("coachee", "ClientLogin", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateOrderRequest instantiates a HTTP request object with method and
// path set to call the "coachee" service "CreateOrder" endpoint
func (c *Client) BuildCreateOrderRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateOrderCoacheePath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("coachee", "CreateOrder", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateOrderRequest returns an encoder for requests sent to the coachee
// CreateOrder server.
func EncodeCreateOrderRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*coachee.CreateOrderPayload)
		if !ok {
			return goahttp.ErrInvalidType("coachee", "CreateOrder", "*coachee.CreateOrderPayload", v)
		}
		req.Header.Set("Authorization", p.Token)
		body := NewCreateOrderRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("coachee", "CreateOrder", err)
		}
		return nil
	}
}

// DecodeCreateOrderResponse returns a decoder for responses returned by the
// coachee CreateOrder endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeCreateOrderResponse may return the following errors:
//	- "internal" (type *goa.ServiceError): http.StatusInternalServerError
//	- "transient" (type *goa.ServiceError): http.StatusInternalServerError
//	- "notFound" (type *goa.ServiceError): http.StatusNotFound
//	- "validation" (type *goa.ServiceError): http.StatusBadRequest
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- error: internal error
func DecodeCreateOrderResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			return nil, nil
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "internal":
				var (
					body CreateOrderInternalResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "CreateOrder", err)
				}
				err = ValidateCreateOrderInternalResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "CreateOrder", err)
				}
				return nil, NewCreateOrderInternal(&body)
			case "transient":
				var (
					body CreateOrderTransientResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("coachee", "CreateOrder", err)
				}
				err = ValidateCreateOrderTransientResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("coachee", "CreateOrder", err)
				}
				return nil, NewCreateOrderTransient(&body)
			default:
				body, _ := ioutil.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("coachee", "CreateOrder", resp.StatusCode, string(body))
			}
		case http.StatusNotFound:
			var (
				body CreateOrderNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "CreateOrder", err)
			}
			err = ValidateCreateOrderNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "CreateOrder", err)
			}
			return nil, NewCreateOrderNotFound(&body)
		case http.StatusBadRequest:
			var (
				body CreateOrderValidationResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "CreateOrder", err)
			}
			err = ValidateCreateOrderValidationResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "CreateOrder", err)
			}
			return nil, NewCreateOrderValidation(&body)
		case http.StatusUnauthorized:
			var (
				body CreateOrderUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("coachee", "CreateOrder", err)
			}
			err = ValidateCreateOrderUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("coachee", "CreateOrder", err)
			}
			return nil, NewCreateOrderUnauthorized(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("coachee", "CreateOrder", resp.StatusCode, string(body))
		}
	}
}

// unmarshalCertificationResponseToCoacheeCertification builds a value of type
// *coachee.Certification from a value of type *CertificationResponse.
func unmarshalCertificationResponseToCoacheeCertification(v *CertificationResponse) *coachee.Certification {
	if v == nil {
		return nil
	}
	res := &coachee.Certification{
		ID:          v.ID,
		Title:       *v.Title,
		Description: *v.Description,
		Institution: *v.Institution,
		Month:       *v.Month,
		Year:        *v.Year,
	}

	return res
}

// unmarshalProgramResponseToCoacheeProgram builds a value of type
// *coachee.Program from a value of type *ProgramResponse.
func unmarshalProgramResponseToCoacheeProgram(v *ProgramResponse) *coachee.Program {
	if v == nil {
		return nil
	}
	res := &coachee.Program{
		ID:          v.ID,
		Name:        *v.Name,
		Sessions:    *v.Sessions,
		Duration:    *v.Duration,
		Description: *v.Description,
		TotalPrice:  *v.TotalPrice,
		TaxPercent:  *v.TaxPercent,
	}

	return res
}

// unmarshalAvailabilityResponseToCoacheeAvailability builds a value of type
// *coachee.Availability from a value of type *AvailabilityResponse.
func unmarshalAvailabilityResponseToCoacheeAvailability(v *AvailabilityResponse) *coachee.Availability {
	if v == nil {
		return nil
	}
	res := &coachee.Availability{
		ID:      v.ID,
		WeekDay: *v.WeekDay,
		Start:   *v.Start,
		End:     *v.End,
	}

	return res
}

// unmarshalCertificationResponseBodyToCoacheeCertification builds a value of
// type *coachee.Certification from a value of type *CertificationResponseBody.
func unmarshalCertificationResponseBodyToCoacheeCertification(v *CertificationResponseBody) *coachee.Certification {
	if v == nil {
		return nil
	}
	res := &coachee.Certification{
		ID:          v.ID,
		Title:       *v.Title,
		Description: *v.Description,
		Institution: *v.Institution,
		Month:       *v.Month,
		Year:        *v.Year,
	}

	return res
}

// unmarshalProgramResponseBodyToCoacheeProgram builds a value of type
// *coachee.Program from a value of type *ProgramResponseBody.
func unmarshalProgramResponseBodyToCoacheeProgram(v *ProgramResponseBody) *coachee.Program {
	if v == nil {
		return nil
	}
	res := &coachee.Program{
		ID:          v.ID,
		Name:        *v.Name,
		Sessions:    *v.Sessions,
		Duration:    *v.Duration,
		Description: *v.Description,
		TotalPrice:  *v.TotalPrice,
		TaxPercent:  *v.TaxPercent,
	}

	return res
}

// unmarshalAvailabilityResponseBodyToCoacheeAvailability builds a value of
// type *coachee.Availability from a value of type *AvailabilityResponseBody.
func unmarshalAvailabilityResponseBodyToCoacheeAvailability(v *AvailabilityResponseBody) *coachee.Availability {
	if v == nil {
		return nil
	}
	res := &coachee.Availability{
		ID:      v.ID,
		WeekDay: *v.WeekDay,
		Start:   *v.Start,
		End:     *v.End,
	}

	return res
}

// marshalCoacheeCertificationToCertificationRequestBody builds a value of type
// *CertificationRequestBody from a value of type *coachee.Certification.
func marshalCoacheeCertificationToCertificationRequestBody(v *coachee.Certification) *CertificationRequestBody {
	res := &CertificationRequestBody{
		ID:          v.ID,
		Title:       v.Title,
		Description: v.Description,
		Institution: v.Institution,
		Month:       v.Month,
		Year:        v.Year,
	}

	return res
}

// marshalCertificationRequestBodyToCoacheeCertification builds a value of type
// *coachee.Certification from a value of type *CertificationRequestBody.
func marshalCertificationRequestBodyToCoacheeCertification(v *CertificationRequestBody) *coachee.Certification {
	res := &coachee.Certification{
		ID:          v.ID,
		Title:       v.Title,
		Description: v.Description,
		Institution: v.Institution,
		Month:       v.Month,
		Year:        v.Year,
	}

	return res
}

// marshalCoacheeProgramToProgramRequestBody builds a value of type
// *ProgramRequestBody from a value of type *coachee.Program.
func marshalCoacheeProgramToProgramRequestBody(v *coachee.Program) *ProgramRequestBody {
	res := &ProgramRequestBody{
		ID:          v.ID,
		Name:        v.Name,
		Sessions:    v.Sessions,
		Duration:    v.Duration,
		Description: v.Description,
		TotalPrice:  v.TotalPrice,
		TaxPercent:  v.TaxPercent,
	}

	return res
}

// marshalProgramRequestBodyToCoacheeProgram builds a value of type
// *coachee.Program from a value of type *ProgramRequestBody.
func marshalProgramRequestBodyToCoacheeProgram(v *ProgramRequestBody) *coachee.Program {
	res := &coachee.Program{
		ID:          v.ID,
		Name:        v.Name,
		Sessions:    v.Sessions,
		Duration:    v.Duration,
		Description: v.Description,
		TotalPrice:  v.TotalPrice,
		TaxPercent:  v.TaxPercent,
	}

	return res
}

// marshalCoacheeAvailabilityToAvailabilityRequestBody builds a value of type
// *AvailabilityRequestBody from a value of type *coachee.Availability.
func marshalCoacheeAvailabilityToAvailabilityRequestBody(v *coachee.Availability) *AvailabilityRequestBody {
	res := &AvailabilityRequestBody{
		ID:      v.ID,
		WeekDay: v.WeekDay,
		Start:   v.Start,
		End:     v.End,
	}

	return res
}

// marshalAvailabilityRequestBodyToCoacheeAvailability builds a value of type
// *coachee.Availability from a value of type *AvailabilityRequestBody.
func marshalAvailabilityRequestBodyToCoacheeAvailability(v *AvailabilityRequestBody) *coachee.Availability {
	res := &coachee.Availability{
		ID:      v.ID,
		WeekDay: v.WeekDay,
		Start:   v.Start,
		End:     v.End,
	}

	return res
}

// unmarshalBaseClientResponseBodyToCoacheeBaseClient builds a value of type
// *coachee.BaseClient from a value of type *BaseClientResponseBody.
func unmarshalBaseClientResponseBodyToCoacheeBaseClient(v *BaseClientResponseBody) *coachee.BaseClient {
	res := &coachee.BaseClient{
		ID:        *v.ID,
		FirstName: *v.FirstName,
		LastName:  *v.LastName,
	}

	return res
}
