// Code generated by goa v3.0.7, DO NOT EDIT.
//
// coachee HTTP client types
//
// Command:
// $ goa gen coachee-backend/design

package client

import (
	coachee "coachee-backend/gen/coachee"

	goa "goa.design/goa/v3/pkg"
)

// CreateCoachRequestBody is the type of the "coachee" service "CreateCoach"
// endpoint HTTP request body.
type CreateCoachRequestBody struct {
	FirstName      string                       `form:"firstName" json:"firstName" xml:"firstName"`
	LastName       string                       `form:"lastName" json:"lastName" xml:"lastName"`
	Email          string                       `form:"email" json:"email" xml:"email"`
	Phone          string                       `form:"phone" json:"phone" xml:"phone"`
	Tags           string                       `form:"tags" json:"tags" xml:"tags"`
	Description    string                       `form:"description" json:"description" xml:"description"`
	City           *string                      `form:"city,omitempty" json:"city,omitempty" xml:"city,omitempty"`
	Country        *string                      `form:"country,omitempty" json:"country,omitempty" xml:"country,omitempty"`
	Certifications []*CertificationsRequestBody `form:"certifications" json:"certifications" xml:"certifications"`
	Programs       []*ProgramRequestBody        `form:"programs" json:"programs" xml:"programs"`
	IntroCall      uint                         `form:"introCall" json:"introCall" xml:"introCall"`
}

// UpdateCoachRequestBody is the type of the "coachee" service "UpdateCoach"
// endpoint HTTP request body.
type UpdateCoachRequestBody struct {
	FirstName   *string `form:"firstName,omitempty" json:"firstName,omitempty" xml:"firstName,omitempty"`
	LastName    *string `form:"lastName,omitempty" json:"lastName,omitempty" xml:"lastName,omitempty"`
	Email       *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	Phone       *string `form:"phone,omitempty" json:"phone,omitempty" xml:"phone,omitempty"`
	Tags        *string `form:"tags,omitempty" json:"tags,omitempty" xml:"tags,omitempty"`
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	City        *string `form:"city,omitempty" json:"city,omitempty" xml:"city,omitempty"`
	Country     *string `form:"country,omitempty" json:"country,omitempty" xml:"country,omitempty"`
	IntroCall   *uint   `form:"introCall,omitempty" json:"introCall,omitempty" xml:"introCall,omitempty"`
	StripeID    *string `form:"stripeID,omitempty" json:"stripeID,omitempty" xml:"stripeID,omitempty"`
	PictureURL  *string `form:"pictureURL,omitempty" json:"pictureURL,omitempty" xml:"pictureURL,omitempty"`
}

// CreateCertificationRequestBody is the type of the "coachee" service
// "CreateCertification" endpoint HTTP request body.
type CreateCertificationRequestBody struct {
	Certification *CertificationsRequestBody `form:"certification" json:"certification" xml:"certification"`
}

// CreateProgramRequestBody is the type of the "coachee" service
// "CreateProgram" endpoint HTTP request body.
type CreateProgramRequestBody struct {
	Program *ProgramRequestBody `form:"program" json:"program" xml:"program"`
}

// CreateAvailabilityRequestBody is the type of the "coachee" service
// "CreateAvailability" endpoint HTTP request body.
type CreateAvailabilityRequestBody struct {
	Availability *AvailabilityRequestBody `form:"availability" json:"availability" xml:"availability"`
}

// GetCoachesResponseBody is the type of the "coachee" service "GetCoaches"
// endpoint HTTP response body.
type GetCoachesResponseBody struct {
	ID             *uint                         `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	FirstName      *string                       `form:"firstName,omitempty" json:"firstName,omitempty" xml:"firstName,omitempty"`
	LastName       *string                       `form:"lastName,omitempty" json:"lastName,omitempty" xml:"lastName,omitempty"`
	Tags           *string                       `form:"tags,omitempty" json:"tags,omitempty" xml:"tags,omitempty"`
	Description    *string                       `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	City           *string                       `form:"city,omitempty" json:"city,omitempty" xml:"city,omitempty"`
	Country        *string                       `form:"country,omitempty" json:"country,omitempty" xml:"country,omitempty"`
	PictureURL     *string                       `form:"pictureURL,omitempty" json:"pictureURL,omitempty" xml:"pictureURL,omitempty"`
	Certifications []*CertificationsResponseBody `form:"certifications,omitempty" json:"certifications,omitempty" xml:"certifications,omitempty"`
	Programs       []*ProgramResponseBody        `form:"programs,omitempty" json:"programs,omitempty" xml:"programs,omitempty"`
	Availability   []*AvailabilityResponseBody   `form:"availability,omitempty" json:"availability,omitempty" xml:"availability,omitempty"`
}

// CertificationsResponseBody is used to define fields on response body types.
type CertificationsResponseBody struct {
	ID          *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Title       *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	Institution *string `form:"institution,omitempty" json:"institution,omitempty" xml:"institution,omitempty"`
	Month       *uint   `form:"month,omitempty" json:"month,omitempty" xml:"month,omitempty"`
	Year        *uint   `form:"year,omitempty" json:"year,omitempty" xml:"year,omitempty"`
}

// ProgramResponseBody is used to define fields on response body types.
type ProgramResponseBody struct {
	ID          *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name        *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Sessions    *uint   `form:"sessions,omitempty" json:"sessions,omitempty" xml:"sessions,omitempty"`
	Duration    *uint   `form:"duration,omitempty" json:"duration,omitempty" xml:"duration,omitempty"`
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	TotalPrice  *uint   `form:"totalPrice,omitempty" json:"totalPrice,omitempty" xml:"totalPrice,omitempty"`
	TaxPercent  *uint   `form:"taxPercent,omitempty" json:"taxPercent,omitempty" xml:"taxPercent,omitempty"`
}

// AvailabilityResponseBody is used to define fields on response body types.
type AvailabilityResponseBody struct {
	ID      *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	WeekDay *uint   `form:"weekDay,omitempty" json:"weekDay,omitempty" xml:"weekDay,omitempty"`
	Start   *uint   `form:"start,omitempty" json:"start,omitempty" xml:"start,omitempty"`
	End     *uint   `form:"end,omitempty" json:"end,omitempty" xml:"end,omitempty"`
}

// CertificationsRequestBody is used to define fields on request body types.
type CertificationsRequestBody struct {
	ID          *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Title       string  `form:"title" json:"title" xml:"title"`
	Description string  `form:"description" json:"description" xml:"description"`
	Institution string  `form:"institution" json:"institution" xml:"institution"`
	Month       uint    `form:"month" json:"month" xml:"month"`
	Year        uint    `form:"year" json:"year" xml:"year"`
}

// ProgramRequestBody is used to define fields on request body types.
type ProgramRequestBody struct {
	ID          *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name        string  `form:"name" json:"name" xml:"name"`
	Sessions    uint    `form:"sessions" json:"sessions" xml:"sessions"`
	Duration    uint    `form:"duration" json:"duration" xml:"duration"`
	Description string  `form:"description" json:"description" xml:"description"`
	TotalPrice  uint    `form:"totalPrice" json:"totalPrice" xml:"totalPrice"`
	TaxPercent  uint    `form:"taxPercent" json:"taxPercent" xml:"taxPercent"`
}

// AvailabilityRequestBody is used to define fields on request body types.
type AvailabilityRequestBody struct {
	ID      *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	WeekDay *uint   `form:"weekDay,omitempty" json:"weekDay,omitempty" xml:"weekDay,omitempty"`
	Start   *uint   `form:"start,omitempty" json:"start,omitempty" xml:"start,omitempty"`
	End     *uint   `form:"end,omitempty" json:"end,omitempty" xml:"end,omitempty"`
}

// NewCreateCoachRequestBody builds the HTTP request body from the payload of
// the "CreateCoach" endpoint of the "coachee" service.
func NewCreateCoachRequestBody(p *coachee.CreateCoachPayload) *CreateCoachRequestBody {
	body := &CreateCoachRequestBody{
		FirstName:   p.FirstName,
		LastName:    p.LastName,
		Email:       p.Email,
		Phone:       p.Phone,
		Tags:        p.Tags,
		Description: p.Description,
		City:        p.City,
		Country:     p.Country,
		IntroCall:   p.IntroCall,
	}
	if p.Certifications != nil {
		body.Certifications = make([]*CertificationsRequestBody, len(p.Certifications))
		for i, val := range p.Certifications {
			body.Certifications[i] = marshalCoacheeCertificationsToCertificationsRequestBody(val)
		}
	}
	if p.Programs != nil {
		body.Programs = make([]*ProgramRequestBody, len(p.Programs))
		for i, val := range p.Programs {
			body.Programs[i] = marshalCoacheeProgramToProgramRequestBody(val)
		}
	}
	return body
}

// NewUpdateCoachRequestBody builds the HTTP request body from the payload of
// the "UpdateCoach" endpoint of the "coachee" service.
func NewUpdateCoachRequestBody(p *coachee.UpdateCoachPayload) *UpdateCoachRequestBody {
	body := &UpdateCoachRequestBody{
		FirstName:   p.FirstName,
		LastName:    p.LastName,
		Email:       p.Email,
		Phone:       p.Phone,
		Tags:        p.Tags,
		Description: p.Description,
		City:        p.City,
		Country:     p.Country,
		IntroCall:   p.IntroCall,
		StripeID:    p.StripeID,
		PictureURL:  p.PictureURL,
	}
	return body
}

// NewCreateCertificationRequestBody builds the HTTP request body from the
// payload of the "CreateCertification" endpoint of the "coachee" service.
func NewCreateCertificationRequestBody(p *coachee.CreateCertificationPayload) *CreateCertificationRequestBody {
	body := &CreateCertificationRequestBody{}
	if p.Certification != nil {
		body.Certification = marshalCoacheeCertificationsToCertificationsRequestBody(p.Certification)
	}
	return body
}

// NewCreateProgramRequestBody builds the HTTP request body from the payload of
// the "CreateProgram" endpoint of the "coachee" service.
func NewCreateProgramRequestBody(p *coachee.CreateProgramPayload) *CreateProgramRequestBody {
	body := &CreateProgramRequestBody{}
	if p.Program != nil {
		body.Program = marshalCoacheeProgramToProgramRequestBody(p.Program)
	}
	return body
}

// NewCreateAvailabilityRequestBody builds the HTTP request body from the
// payload of the "CreateAvailability" endpoint of the "coachee" service.
func NewCreateAvailabilityRequestBody(p *coachee.CreateAvailabilityPayload) *CreateAvailabilityRequestBody {
	body := &CreateAvailabilityRequestBody{}
	if p.Availability != nil {
		body.Availability = marshalCoacheeAvailabilityToAvailabilityRequestBody(p.Availability)
	}
	return body
}

// NewGetCoachesCoachOK builds a "coachee" service "GetCoaches" endpoint result
// from a HTTP "OK" response.
func NewGetCoachesCoachOK(body *GetCoachesResponseBody) *coachee.Coach {
	v := &coachee.Coach{
		ID:          body.ID,
		FirstName:   body.FirstName,
		LastName:    body.LastName,
		Tags:        body.Tags,
		Description: body.Description,
		City:        body.City,
		Country:     body.Country,
		PictureURL:  body.PictureURL,
	}
	if body.Certifications != nil {
		v.Certifications = make([]*coachee.Certifications, len(body.Certifications))
		for i, val := range body.Certifications {
			v.Certifications[i] = unmarshalCertificationsResponseBodyToCoacheeCertifications(val)
		}
	}
	if body.Programs != nil {
		v.Programs = make([]*coachee.Program, len(body.Programs))
		for i, val := range body.Programs {
			v.Programs[i] = unmarshalProgramResponseBodyToCoacheeProgram(val)
		}
	}
	if body.Availability != nil {
		v.Availability = make([]*coachee.Availability, len(body.Availability))
		for i, val := range body.Availability {
			v.Availability[i] = unmarshalAvailabilityResponseBodyToCoacheeAvailability(val)
		}
	}
	return v
}

// ValidateGetCoachesResponseBody runs the validations defined on
// GetCoachesResponseBody
func ValidateGetCoachesResponseBody(body *GetCoachesResponseBody) (err error) {
	for _, e := range body.Certifications {
		if e != nil {
			if err2 := ValidateCertificationsResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, e := range body.Programs {
		if e != nil {
			if err2 := ValidateProgramResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, e := range body.Availability {
		if e != nil {
			if err2 := ValidateAvailabilityResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateCertificationsResponseBody runs the validations defined on
// certificationsResponseBody
func ValidateCertificationsResponseBody(body *CertificationsResponseBody) (err error) {
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Institution == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("institution", "body"))
	}
	if body.Month == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("month", "body"))
	}
	if body.Year == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("year", "body"))
	}
	if body.Month != nil {
		if *body.Month < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.month", *body.Month, 1, true))
		}
	}
	if body.Month != nil {
		if *body.Month > 12 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.month", *body.Month, 12, false))
		}
	}
	if body.Year != nil {
		if *body.Year < 1900 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.year", *body.Year, 1900, true))
		}
	}
	if body.Year != nil {
		if *body.Year > 2100 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.year", *body.Year, 2100, false))
		}
	}
	return
}

// ValidateProgramResponseBody runs the validations defined on
// programResponseBody
func ValidateProgramResponseBody(body *ProgramResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Sessions == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("sessions", "body"))
	}
	if body.Duration == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("duration", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.TotalPrice == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("totalPrice", "body"))
	}
	if body.TaxPercent == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("taxPercent", "body"))
	}
	return
}

// ValidateAvailabilityResponseBody runs the validations defined on
// availabilityResponseBody
func ValidateAvailabilityResponseBody(body *AvailabilityResponseBody) (err error) {
	if body.WeekDay != nil {
		if *body.WeekDay < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.weekDay", *body.WeekDay, 0, true))
		}
	}
	if body.WeekDay != nil {
		if *body.WeekDay > 6 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.weekDay", *body.WeekDay, 6, false))
		}
	}
	if body.Start != nil {
		if *body.Start < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.start", *body.Start, 0, true))
		}
	}
	if body.Start != nil {
		if *body.Start > 1440 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.start", *body.Start, 1440, false))
		}
	}
	if body.End != nil {
		if *body.End < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.end", *body.End, 0, true))
		}
	}
	if body.End != nil {
		if *body.End > 1440 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.end", *body.End, 1440, false))
		}
	}
	return
}

// ValidateCertificationsRequestBody runs the validations defined on
// certificationsRequestBody
func ValidateCertificationsRequestBody(body *CertificationsRequestBody) (err error) {
	if body.Month < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("body.month", body.Month, 1, true))
	}
	if body.Month > 12 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("body.month", body.Month, 12, false))
	}
	if body.Year < 1900 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("body.year", body.Year, 1900, true))
	}
	if body.Year > 2100 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("body.year", body.Year, 2100, false))
	}
	return
}

// ValidateAvailabilityRequestBody runs the validations defined on
// availabilityRequestBody
func ValidateAvailabilityRequestBody(body *AvailabilityRequestBody) (err error) {
	if body.WeekDay != nil {
		if *body.WeekDay < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.weekDay", *body.WeekDay, 0, true))
		}
	}
	if body.WeekDay != nil {
		if *body.WeekDay > 6 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.weekDay", *body.WeekDay, 6, false))
		}
	}
	if body.Start != nil {
		if *body.Start < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.start", *body.Start, 0, true))
		}
	}
	if body.Start != nil {
		if *body.Start > 1440 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.start", *body.Start, 1440, false))
		}
	}
	if body.End != nil {
		if *body.End < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.end", *body.End, 0, true))
		}
	}
	if body.End != nil {
		if *body.End > 1440 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.end", *body.End, 1440, false))
		}
	}
	return
}
