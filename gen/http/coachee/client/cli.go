// Code generated by goa v3.0.7, DO NOT EDIT.
//
// coachee HTTP client CLI support package
//
// Command:
// $ goa gen coachee-backend/design

package client

import (
	coachee "coachee-backend/gen/coachee"
	"encoding/json"
	"fmt"
	"strconv"

	goa "goa.design/goa/v3/pkg"
)

// BuildGetCoachesPayload builds the payload for the coachee GetCoaches
// endpoint from CLI flags.
func BuildGetCoachesPayload(coacheeGetCoachesTag string, coacheeGetCoachesLimit string, coacheeGetCoachesPage string) (*coachee.GetCoachesPayload, error) {
	var err error
	var tag string
	{
		tag = coacheeGetCoachesTag
	}
	var limit *uint
	{
		if coacheeGetCoachesLimit != "" {
			var v uint64
			v, err = strconv.ParseUint(coacheeGetCoachesLimit, 10, 64)
			val := uint(v)
			limit = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for limit, must be UINT")
			}
		}
	}
	var page *uint
	{
		if coacheeGetCoachesPage != "" {
			var v uint64
			v, err = strconv.ParseUint(coacheeGetCoachesPage, 10, 64)
			val := uint(v)
			page = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for page, must be UINT")
			}
		}
	}
	payload := &coachee.GetCoachesPayload{
		Tag:   tag,
		Limit: limit,
		Page:  page,
	}
	return payload, nil
}

// BuildCreateCoachPayload builds the payload for the coachee CreateCoach
// endpoint from CLI flags.
func BuildCreateCoachPayload(coacheeCreateCoachBody string) (*coachee.CreateCoachPayload, error) {
	var err error
	var body CreateCoachRequestBody
	{
		err = json.Unmarshal([]byte(coacheeCreateCoachBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"certifications\": [\n         {\n            \"description\": \"Ex sed et.\",\n            \"id\": \"Eos nam aperiam.\",\n            \"institution\": \"Eligendi rerum animi tenetur ipsa debitis molestiae.\",\n            \"month\": 1,\n            \"title\": \"Quae iure assumenda sequi.\",\n            \"year\": 2023\n         },\n         {\n            \"description\": \"Ex sed et.\",\n            \"id\": \"Eos nam aperiam.\",\n            \"institution\": \"Eligendi rerum animi tenetur ipsa debitis molestiae.\",\n            \"month\": 1,\n            \"title\": \"Quae iure assumenda sequi.\",\n            \"year\": 2023\n         }\n      ],\n      \"city\": \"Aut nam eveniet.\",\n      \"country\": \"Non saepe ullam eveniet delectus est.\",\n      \"description\": \"Doloremque ut reprehenderit.\",\n      \"email\": \"Ipsa qui qui alias numquam nulla.\",\n      \"firstName\": \"Non ea esse et.\",\n      \"introCall\": 8764910572718661629,\n      \"lastName\": \"Consectetur aut similique omnis pariatur dolores.\",\n      \"phone\": \"Consequatur aut et sint.\",\n      \"programs\": [\n         {\n            \"description\": \"Hic eveniet placeat reiciendis cum reiciendis.\",\n            \"duration\": 13130017794459440444,\n            \"id\": \"Enim et quas ex ut.\",\n            \"name\": \"Aut voluptatem.\",\n            \"sessions\": 14817489201336631492,\n            \"taxPercent\": 6813321315917995789,\n            \"totalPrice\": 2652402719978733960\n         },\n         {\n            \"description\": \"Hic eveniet placeat reiciendis cum reiciendis.\",\n            \"duration\": 13130017794459440444,\n            \"id\": \"Enim et quas ex ut.\",\n            \"name\": \"Aut voluptatem.\",\n            \"sessions\": 14817489201336631492,\n            \"taxPercent\": 6813321315917995789,\n            \"totalPrice\": 2652402719978733960\n         },\n         {\n            \"description\": \"Hic eveniet placeat reiciendis cum reiciendis.\",\n            \"duration\": 13130017794459440444,\n            \"id\": \"Enim et quas ex ut.\",\n            \"name\": \"Aut voluptatem.\",\n            \"sessions\": 14817489201336631492,\n            \"taxPercent\": 6813321315917995789,\n            \"totalPrice\": 2652402719978733960\n         },\n         {\n            \"description\": \"Hic eveniet placeat reiciendis cum reiciendis.\",\n            \"duration\": 13130017794459440444,\n            \"id\": \"Enim et quas ex ut.\",\n            \"name\": \"Aut voluptatem.\",\n            \"sessions\": 14817489201336631492,\n            \"taxPercent\": 6813321315917995789,\n            \"totalPrice\": 2652402719978733960\n         }\n      ],\n      \"tags\": \"Consequatur sed dolorem aut et.\"\n   }'")
		}
		if body.Certifications == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("certifications", "body"))
		}
		if body.Programs == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("programs", "body"))
		}
		for _, e := range body.Certifications {
			if e != nil {
				if err2 := ValidateCertificationsRequestBody(e); err2 != nil {
					err = goa.MergeErrors(err, err2)
				}
			}
		}
		if err != nil {
			return nil, err
		}
	}
	v := &coachee.CreateCoachPayload{
		FirstName:   body.FirstName,
		LastName:    body.LastName,
		Email:       body.Email,
		Phone:       body.Phone,
		Tags:        body.Tags,
		Description: body.Description,
		City:        body.City,
		Country:     body.Country,
		IntroCall:   body.IntroCall,
	}
	if body.Certifications != nil {
		v.Certifications = make([]*coachee.Certifications, len(body.Certifications))
		for i, val := range body.Certifications {
			v.Certifications[i] = marshalCertificationsRequestBodyToCoacheeCertifications(val)
		}
	}
	if body.Programs != nil {
		v.Programs = make([]*coachee.Program, len(body.Programs))
		for i, val := range body.Programs {
			v.Programs[i] = marshalProgramRequestBodyToCoacheeProgram(val)
		}
	}
	return v, nil
}

// BuildUpdateCoachPayload builds the payload for the coachee UpdateCoach
// endpoint from CLI flags.
func BuildUpdateCoachPayload(coacheeUpdateCoachBody string, coacheeUpdateCoachID string) (*coachee.UpdateCoachPayload, error) {
	var err error
	var body UpdateCoachRequestBody
	{
		err = json.Unmarshal([]byte(coacheeUpdateCoachBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"city\": \"Veritatis consectetur velit.\",\n      \"country\": \"Magnam quidem reprehenderit.\",\n      \"description\": \"Et qui sequi omnis et praesentium voluptatum.\",\n      \"email\": \"Quasi dolorum consectetur.\",\n      \"firstName\": \"Et doloremque.\",\n      \"introCall\": 11500264445055308145,\n      \"lastName\": \"Enim est.\",\n      \"phone\": \"Nihil quasi et ab et veniam.\",\n      \"pictureURL\": \"Culpa recusandae reiciendis laudantium deserunt reiciendis.\",\n      \"stripeID\": \"Illum veritatis nemo.\",\n      \"tags\": \"Et rem possimus voluptatem possimus omnis sequi.\"\n   }'")
		}
	}
	var id uint
	{
		var v uint64
		v, err = strconv.ParseUint(coacheeUpdateCoachID, 10, 64)
		id = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT")
		}
	}
	v := &coachee.UpdateCoachPayload{
		FirstName:   body.FirstName,
		LastName:    body.LastName,
		Email:       body.Email,
		Phone:       body.Phone,
		Tags:        body.Tags,
		Description: body.Description,
		City:        body.City,
		Country:     body.Country,
		IntroCall:   body.IntroCall,
		StripeID:    body.StripeID,
		PictureURL:  body.PictureURL,
	}
	v.ID = id
	return v, nil
}

// BuildCreateCertificationPayload builds the payload for the coachee
// CreateCertification endpoint from CLI flags.
func BuildCreateCertificationPayload(coacheeCreateCertificationBody string, coacheeCreateCertificationID string) (*coachee.CreateCertificationPayload, error) {
	var err error
	var body CreateCertificationRequestBody
	{
		err = json.Unmarshal([]byte(coacheeCreateCertificationBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"certification\": {\n         \"description\": \"Ex sed et.\",\n         \"id\": \"Eos nam aperiam.\",\n         \"institution\": \"Eligendi rerum animi tenetur ipsa debitis molestiae.\",\n         \"month\": 1,\n         \"title\": \"Quae iure assumenda sequi.\",\n         \"year\": 2023\n      }\n   }'")
		}
		if body.Certification == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("certification", "body"))
		}
		if body.Certification != nil {
			if err2 := ValidateCertificationsRequestBody(body.Certification); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var id uint
	{
		var v uint64
		v, err = strconv.ParseUint(coacheeCreateCertificationID, 10, 64)
		id = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT")
		}
	}
	v := &coachee.CreateCertificationPayload{}
	if body.Certification != nil {
		v.Certification = marshalCertificationsRequestBodyToCoacheeCertifications(body.Certification)
	}
	v.ID = id
	return v, nil
}

// BuildDeleteCertificationPayload builds the payload for the coachee
// DeleteCertification endpoint from CLI flags.
func BuildDeleteCertificationPayload(coacheeDeleteCertificationID string, coacheeDeleteCertificationCertID string) (*coachee.DeleteCertificationPayload, error) {
	var err error
	var id uint
	{
		var v uint64
		v, err = strconv.ParseUint(coacheeDeleteCertificationID, 10, 64)
		id = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT")
		}
	}
	var certID string
	{
		certID = coacheeDeleteCertificationCertID
	}
	payload := &coachee.DeleteCertificationPayload{
		ID:     id,
		CertID: certID,
	}
	return payload, nil
}

// BuildCreateProgramPayload builds the payload for the coachee CreateProgram
// endpoint from CLI flags.
func BuildCreateProgramPayload(coacheeCreateProgramBody string, coacheeCreateProgramID string) (*coachee.CreateProgramPayload, error) {
	var err error
	var body CreateProgramRequestBody
	{
		err = json.Unmarshal([]byte(coacheeCreateProgramBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"program\": {\n         \"description\": \"Hic eveniet placeat reiciendis cum reiciendis.\",\n         \"duration\": 13130017794459440444,\n         \"id\": \"Enim et quas ex ut.\",\n         \"name\": \"Aut voluptatem.\",\n         \"sessions\": 14817489201336631492,\n         \"taxPercent\": 6813321315917995789,\n         \"totalPrice\": 2652402719978733960\n      }\n   }'")
		}
		if body.Program == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("program", "body"))
		}
		if err != nil {
			return nil, err
		}
	}
	var id uint
	{
		var v uint64
		v, err = strconv.ParseUint(coacheeCreateProgramID, 10, 64)
		id = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT")
		}
	}
	v := &coachee.CreateProgramPayload{}
	if body.Program != nil {
		v.Program = marshalProgramRequestBodyToCoacheeProgram(body.Program)
	}
	v.ID = id
	return v, nil
}

// BuildDeleteProgramPayload builds the payload for the coachee DeleteProgram
// endpoint from CLI flags.
func BuildDeleteProgramPayload(coacheeDeleteProgramID string, coacheeDeleteProgramProgramID string) (*coachee.DeleteProgramPayload, error) {
	var err error
	var id uint
	{
		var v uint64
		v, err = strconv.ParseUint(coacheeDeleteProgramID, 10, 64)
		id = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT")
		}
	}
	var programID string
	{
		programID = coacheeDeleteProgramProgramID
	}
	payload := &coachee.DeleteProgramPayload{
		ID:        id,
		ProgramID: programID,
	}
	return payload, nil
}

// BuildCreateAvailabilityPayload builds the payload for the coachee
// CreateAvailability endpoint from CLI flags.
func BuildCreateAvailabilityPayload(coacheeCreateAvailabilityBody string, coacheeCreateAvailabilityID string) (*coachee.CreateAvailabilityPayload, error) {
	var err error
	var body CreateAvailabilityRequestBody
	{
		err = json.Unmarshal([]byte(coacheeCreateAvailabilityBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"availability\": {\n         \"end\": 765,\n         \"id\": \"Nisi occaecati recusandae voluptatem dolorem omnis.\",\n         \"start\": 706,\n         \"weekDay\": 4\n      }\n   }'")
		}
		if body.Availability == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("availability", "body"))
		}
		if body.Availability != nil {
			if err2 := ValidateAvailabilityRequestBody(body.Availability); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var id uint
	{
		var v uint64
		v, err = strconv.ParseUint(coacheeCreateAvailabilityID, 10, 64)
		id = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT")
		}
	}
	v := &coachee.CreateAvailabilityPayload{}
	if body.Availability != nil {
		v.Availability = marshalAvailabilityRequestBodyToCoacheeAvailability(body.Availability)
	}
	v.ID = id
	return v, nil
}

// BuildDeleteAvailabilityPayload builds the payload for the coachee
// DeleteAvailability endpoint from CLI flags.
func BuildDeleteAvailabilityPayload(coacheeDeleteAvailabilityID string, coacheeDeleteAvailabilityAvID string) (*coachee.DeleteAvailabilityPayload, error) {
	var err error
	var id uint
	{
		var v uint64
		v, err = strconv.ParseUint(coacheeDeleteAvailabilityID, 10, 64)
		id = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT")
		}
	}
	var avID string
	{
		avID = coacheeDeleteAvailabilityAvID
	}
	payload := &coachee.DeleteAvailabilityPayload{
		ID:   id,
		AvID: avID,
	}
	return payload, nil
}
