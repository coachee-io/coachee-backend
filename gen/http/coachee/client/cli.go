// Code generated by goa v3.0.9, DO NOT EDIT.
//
// coachee HTTP client CLI support package
//
// Command:
// $ goa gen coachee-backend/design

package client

import (
	coachee "coachee-backend/gen/coachee"
	"encoding/json"
	"fmt"
	"strconv"

	goa "goa.design/goa/v3/pkg"
)

// BuildGetCoachesPayload builds the payload for the coachee GetCoaches
// endpoint from CLI flags.
func BuildGetCoachesPayload(coacheeGetCoachesTag string, coacheeGetCoachesLimit string, coacheeGetCoachesPage string, coacheeGetCoachesShowAll string) (*coachee.GetCoachesPayload, error) {
	var err error
	var tag *string
	{
		if coacheeGetCoachesTag != "" {
			tag = &coacheeGetCoachesTag
		}
	}
	var limit *uint
	{
		if coacheeGetCoachesLimit != "" {
			var v uint64
			v, err = strconv.ParseUint(coacheeGetCoachesLimit, 10, 64)
			val := uint(v)
			limit = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for limit, must be UINT")
			}
		}
	}
	var page *uint
	{
		if coacheeGetCoachesPage != "" {
			var v uint64
			v, err = strconv.ParseUint(coacheeGetCoachesPage, 10, 64)
			val := uint(v)
			page = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for page, must be UINT")
			}
		}
	}
	var showAll *bool
	{
		if coacheeGetCoachesShowAll != "" {
			var val bool
			val, err = strconv.ParseBool(coacheeGetCoachesShowAll)
			showAll = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for showAll, must be BOOL")
			}
		}
	}
	payload := &coachee.GetCoachesPayload{
		Tag:     tag,
		Limit:   limit,
		Page:    page,
		ShowAll: showAll,
	}
	return payload, nil
}

// BuildGetCoachPayload builds the payload for the coachee GetCoach endpoint
// from CLI flags.
func BuildGetCoachPayload(coacheeGetCoachID string) (*coachee.GetCoachPayload, error) {
	var err error
	var id uint
	{
		var v uint64
		v, err = strconv.ParseUint(coacheeGetCoachID, 10, 64)
		id = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT")
		}
	}
	payload := &coachee.GetCoachPayload{
		ID: id,
	}
	return payload, nil
}

// BuildAdminGetCoachPayload builds the payload for the coachee AdminGetCoach
// endpoint from CLI flags.
func BuildAdminGetCoachPayload(coacheeAdminGetCoachID string, coacheeAdminGetCoachToken string) (*coachee.AdminGetCoachPayload, error) {
	var err error
	var id uint
	{
		var v uint64
		v, err = strconv.ParseUint(coacheeAdminGetCoachID, 10, 64)
		id = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT")
		}
	}
	var token string
	{
		token = coacheeAdminGetCoachToken
	}
	payload := &coachee.AdminGetCoachPayload{
		ID:    id,
		Token: token,
	}
	return payload, nil
}

// BuildLenCoachesPayload builds the payload for the coachee LenCoaches
// endpoint from CLI flags.
func BuildLenCoachesPayload(coacheeLenCoachesTag string) (*coachee.LenCoachesPayload, error) {
	var tag string
	{
		tag = coacheeLenCoachesTag
	}
	payload := &coachee.LenCoachesPayload{
		Tag: tag,
	}
	return payload, nil
}

// BuildCreateCoachPayload builds the payload for the coachee CreateCoach
// endpoint from CLI flags.
func BuildCreateCoachPayload(coacheeCreateCoachBody string) (*coachee.CreateCoachPayload, error) {
	var err error
	var body CreateCoachRequestBody
	{
		err = json.Unmarshal([]byte(coacheeCreateCoachBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"city\": \"Dolorem quo.\",\n      \"country\": \"Dolorum reprehenderit exercitationem est dolores.\",\n      \"description\": \"Neque quis sunt esse placeat consequatur.\",\n      \"email\": \"Non quia blanditiis.\",\n      \"firstName\": \"Delectus quia possimus perferendis tempore accusantium.\",\n      \"introCall\": 4633399502815089578,\n      \"lastName\": \"Nisi aut aut.\",\n      \"password\": \"Necessitatibus sint qui odit quia.\",\n      \"phone\": \"Labore voluptatum.\",\n      \"tags\": \"Assumenda distinctio.\",\n      \"textAvailability\": \"Iure vel officia non et voluptates.\",\n      \"textCertifications\": \"Corporis voluptas sapiente deserunt molestiae.\",\n      \"textPrograms\": \"Qui laboriosam eveniet animi est et suscipit.\",\n      \"vat\": \"Illum dolore amet fugiat ab dolorum.\"\n   }'")
		}
	}
	v := &coachee.CreateCoachPayload{
		FirstName:          body.FirstName,
		LastName:           body.LastName,
		Email:              body.Email,
		Password:           body.Password,
		Phone:              body.Phone,
		Tags:               body.Tags,
		Description:        body.Description,
		City:               body.City,
		Country:            body.Country,
		IntroCall:          body.IntroCall,
		TextCertifications: body.TextCertifications,
		TextPrograms:       body.TextPrograms,
		TextAvailability:   body.TextAvailability,
		Vat:                body.Vat,
	}
	return v, nil
}

// BuildLoginCoachPayload builds the payload for the coachee LoginCoach
// endpoint from CLI flags.
func BuildLoginCoachPayload(coacheeLoginCoachBody string) (*coachee.LoginCoachPayload, error) {
	var err error
	var body LoginCoachRequestBody
	{
		err = json.Unmarshal([]byte(coacheeLoginCoachBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"email\": \"Modi facere quos eum.\",\n      \"password\": \"Architecto et facere.\"\n   }'")
		}
	}
	v := &coachee.LoginCoachPayload{
		Email:    body.Email,
		Password: body.Password,
	}
	return v, nil
}

// BuildStartCoachPasswordRecoveryFlowPayload builds the payload for the
// coachee StartCoachPasswordRecoveryFlow endpoint from CLI flags.
func BuildStartCoachPasswordRecoveryFlowPayload(coacheeStartCoachPasswordRecoveryFlowBody string) (*coachee.StartCoachPasswordRecoveryFlowPayload, error) {
	var err error
	var body StartCoachPasswordRecoveryFlowRequestBody
	{
		err = json.Unmarshal([]byte(coacheeStartCoachPasswordRecoveryFlowBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"email\": \"Quia nihil tempora eos ut.\"\n   }'")
		}
	}
	v := &coachee.StartCoachPasswordRecoveryFlowPayload{
		Email: body.Email,
	}
	return v, nil
}

// BuildCheckCoachPasswordRecoveryTokenPayload builds the payload for the
// coachee CheckCoachPasswordRecoveryToken endpoint from CLI flags.
func BuildCheckCoachPasswordRecoveryTokenPayload(coacheeCheckCoachPasswordRecoveryTokenToken string) (*coachee.CheckCoachPasswordRecoveryTokenPayload, error) {
	var token string
	{
		token = coacheeCheckCoachPasswordRecoveryTokenToken
	}
	payload := &coachee.CheckCoachPasswordRecoveryTokenPayload{
		Token: token,
	}
	return payload, nil
}

// BuildFinalizeCoachPasswordRecoveryFlowPayload builds the payload for the
// coachee FinalizeCoachPasswordRecoveryFlow endpoint from CLI flags.
func BuildFinalizeCoachPasswordRecoveryFlowPayload(coacheeFinalizeCoachPasswordRecoveryFlowBody string, coacheeFinalizeCoachPasswordRecoveryFlowToken string) (*coachee.FinalizeCoachPasswordRecoveryFlowPayload, error) {
	var err error
	var body FinalizeCoachPasswordRecoveryFlowRequestBody
	{
		err = json.Unmarshal([]byte(coacheeFinalizeCoachPasswordRecoveryFlowBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"password\": \"Iusto illo sit voluptatem dolor qui omnis.\"\n   }'")
		}
	}
	var token string
	{
		token = coacheeFinalizeCoachPasswordRecoveryFlowToken
	}
	v := &coachee.FinalizeCoachPasswordRecoveryFlowPayload{
		Password: body.Password,
	}
	v.Token = token
	return v, nil
}

// BuildUpdateCoachPayload builds the payload for the coachee UpdateCoach
// endpoint from CLI flags.
func BuildUpdateCoachPayload(coacheeUpdateCoachBody string, coacheeUpdateCoachID string, coacheeUpdateCoachToken string) (*coachee.UpdateCoachPayload, error) {
	var err error
	var body UpdateCoachRequestBody
	{
		err = json.Unmarshal([]byte(coacheeUpdateCoachBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"city\": \"Accusamus labore.\",\n      \"country\": \"Asperiores laudantium in id.\",\n      \"description\": \"Quia placeat adipisci error ipsa.\",\n      \"email\": \"Ad quibusdam neque sunt aut autem ut.\",\n      \"firstName\": \"Sit aut optio sunt blanditiis illum in.\",\n      \"introCall\": 7654048878308119394,\n      \"lastName\": \"Ipsa vel eligendi magnam repudiandae consequuntur.\",\n      \"phone\": \"Et qui facere facilis.\",\n      \"pictureURL\": \"Voluptatem vel rerum eum praesentium eum.\",\n      \"status\": \"Nobis voluptatem delectus ut et.\",\n      \"stripeID\": \"Asperiores amet reiciendis voluptates et sed.\",\n      \"tags\": \"Sapiente molestiae.\",\n      \"vat\": \"Nemo sit voluptatem dolorem libero assumenda molestias.\"\n   }'")
		}
	}
	var id uint
	{
		var v uint64
		v, err = strconv.ParseUint(coacheeUpdateCoachID, 10, 64)
		id = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT")
		}
	}
	var token string
	{
		token = coacheeUpdateCoachToken
	}
	v := &coachee.UpdateCoachPayload{
		FirstName:   body.FirstName,
		LastName:    body.LastName,
		Email:       body.Email,
		Phone:       body.Phone,
		Tags:        body.Tags,
		Description: body.Description,
		City:        body.City,
		Country:     body.Country,
		IntroCall:   body.IntroCall,
		StripeID:    body.StripeID,
		PictureURL:  body.PictureURL,
		Vat:         body.Vat,
		Status:      body.Status,
	}
	v.ID = id
	v.Token = token
	return v, nil
}

// BuildCreateCertificationPayload builds the payload for the coachee
// CreateCertification endpoint from CLI flags.
func BuildCreateCertificationPayload(coacheeCreateCertificationBody string, coacheeCreateCertificationID string, coacheeCreateCertificationToken string) (*coachee.CreateCertificationPayload, error) {
	var err error
	var body CreateCertificationRequestBody
	{
		err = json.Unmarshal([]byte(coacheeCreateCertificationBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"certification\": {\n         \"description\": \"Ea ut alias dicta dolorem omnis rerum.\",\n         \"id\": \"Explicabo aut provident qui et quibusdam.\",\n         \"institution\": \"Id ut et dolores.\",\n         \"month\": 2,\n         \"title\": \"Molestias optio commodi.\",\n         \"year\": 1992\n      }\n   }'")
		}
		if body.Certification == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("certification", "body"))
		}
		if body.Certification != nil {
			if err2 := ValidateCertificationRequestBody(body.Certification); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var id uint
	{
		var v uint64
		v, err = strconv.ParseUint(coacheeCreateCertificationID, 10, 64)
		id = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT")
		}
	}
	var token string
	{
		token = coacheeCreateCertificationToken
	}
	v := &coachee.CreateCertificationPayload{}
	if body.Certification != nil {
		v.Certification = marshalCertificationRequestBodyToCoacheeCertification(body.Certification)
	}
	v.ID = id
	v.Token = token
	return v, nil
}

// BuildDeleteCertificationPayload builds the payload for the coachee
// DeleteCertification endpoint from CLI flags.
func BuildDeleteCertificationPayload(coacheeDeleteCertificationID string, coacheeDeleteCertificationCertID string, coacheeDeleteCertificationToken string) (*coachee.DeleteCertificationPayload, error) {
	var err error
	var id uint
	{
		var v uint64
		v, err = strconv.ParseUint(coacheeDeleteCertificationID, 10, 64)
		id = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT")
		}
	}
	var certID string
	{
		certID = coacheeDeleteCertificationCertID
	}
	var token string
	{
		token = coacheeDeleteCertificationToken
	}
	payload := &coachee.DeleteCertificationPayload{
		ID:     id,
		CertID: certID,
		Token:  token,
	}
	return payload, nil
}

// BuildCreateProgramPayload builds the payload for the coachee CreateProgram
// endpoint from CLI flags.
func BuildCreateProgramPayload(coacheeCreateProgramBody string, coacheeCreateProgramID string, coacheeCreateProgramToken string) (*coachee.CreateProgramPayload, error) {
	var err error
	var body CreateProgramRequestBody
	{
		err = json.Unmarshal([]byte(coacheeCreateProgramBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"program\": {\n         \"description\": \"Sint odio sint dolor eum.\",\n         \"duration\": 14789201130694119165,\n         \"id\": \"Quo praesentium quis et id vel.\",\n         \"name\": \"Ipsam est magni natus in aut illum.\",\n         \"sessions\": 4361438354368673299,\n         \"taxPercent\": 13315595510178612560,\n         \"totalPrice\": 4014935064152875587\n      }\n   }'")
		}
		if body.Program == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("program", "body"))
		}
		if err != nil {
			return nil, err
		}
	}
	var id uint
	{
		var v uint64
		v, err = strconv.ParseUint(coacheeCreateProgramID, 10, 64)
		id = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT")
		}
	}
	var token string
	{
		token = coacheeCreateProgramToken
	}
	v := &coachee.CreateProgramPayload{}
	if body.Program != nil {
		v.Program = marshalProgramRequestBodyToCoacheeProgram(body.Program)
	}
	v.ID = id
	v.Token = token
	return v, nil
}

// BuildDeleteProgramPayload builds the payload for the coachee DeleteProgram
// endpoint from CLI flags.
func BuildDeleteProgramPayload(coacheeDeleteProgramID string, coacheeDeleteProgramProgramID string, coacheeDeleteProgramToken string) (*coachee.DeleteProgramPayload, error) {
	var err error
	var id uint
	{
		var v uint64
		v, err = strconv.ParseUint(coacheeDeleteProgramID, 10, 64)
		id = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT")
		}
	}
	var programID string
	{
		programID = coacheeDeleteProgramProgramID
	}
	var token string
	{
		token = coacheeDeleteProgramToken
	}
	payload := &coachee.DeleteProgramPayload{
		ID:        id,
		ProgramID: programID,
		Token:     token,
	}
	return payload, nil
}

// BuildCreateAvailabilityPayload builds the payload for the coachee
// CreateAvailability endpoint from CLI flags.
func BuildCreateAvailabilityPayload(coacheeCreateAvailabilityBody string, coacheeCreateAvailabilityID string, coacheeCreateAvailabilityToken string) (*coachee.CreateAvailabilityPayload, error) {
	var err error
	var body CreateAvailabilityRequestBody
	{
		err = json.Unmarshal([]byte(coacheeCreateAvailabilityBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"end\": 902,\n      \"start\": 563,\n      \"weekDay\": 2\n   }'")
		}
		if body.WeekDay < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.weekDay", body.WeekDay, 0, true))
		}
		if body.WeekDay > 6 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.weekDay", body.WeekDay, 6, false))
		}
		if body.Start < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.start", body.Start, 0, true))
		}
		if body.Start > 1440 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.start", body.Start, 1440, false))
		}
		if body.End < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.end", body.End, 0, true))
		}
		if body.End > 1440 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.end", body.End, 1440, false))
		}
		if err != nil {
			return nil, err
		}
	}
	var id uint
	{
		var v uint64
		v, err = strconv.ParseUint(coacheeCreateAvailabilityID, 10, 64)
		id = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT")
		}
	}
	var token string
	{
		token = coacheeCreateAvailabilityToken
	}
	v := &coachee.CreateAvailabilityPayload{
		WeekDay: body.WeekDay,
		Start:   body.Start,
		End:     body.End,
	}
	v.ID = id
	v.Token = token
	return v, nil
}

// BuildDeleteAvailabilityPayload builds the payload for the coachee
// DeleteAvailability endpoint from CLI flags.
func BuildDeleteAvailabilityPayload(coacheeDeleteAvailabilityID string, coacheeDeleteAvailabilityAvID string, coacheeDeleteAvailabilityToken string) (*coachee.DeleteAvailabilityPayload, error) {
	var err error
	var id uint
	{
		var v uint64
		v, err = strconv.ParseUint(coacheeDeleteAvailabilityID, 10, 64)
		id = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT")
		}
	}
	var avID string
	{
		avID = coacheeDeleteAvailabilityAvID
	}
	var token string
	{
		token = coacheeDeleteAvailabilityToken
	}
	payload := &coachee.DeleteAvailabilityPayload{
		ID:    id,
		AvID:  avID,
		Token: token,
	}
	return payload, nil
}

// BuildCreateCustomerPayload builds the payload for the coachee CreateCustomer
// endpoint from CLI flags.
func BuildCreateCustomerPayload(coacheeCreateCustomerBody string) (*coachee.CreateCustomerPayload, error) {
	var err error
	var body CreateCustomerRequestBody
	{
		err = json.Unmarshal([]byte(coacheeCreateCustomerBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"birthDate\": 3392507168016314691,\n      \"email\": \"Enim et deleniti repudiandae autem qui modi.\",\n      \"firstName\": \"Veniam rerum fugiat.\",\n      \"lastName\": \"Inventore sint ea.\",\n      \"password\": \"Aperiam nihil aut.\"\n   }'")
		}
	}
	v := &coachee.CreateCustomerPayload{
		Email:     body.Email,
		FirstName: body.FirstName,
		LastName:  body.LastName,
		BirthDate: body.BirthDate,
		Password:  body.Password,
	}
	return v, nil
}

// BuildCustomerLoginPayload builds the payload for the coachee CustomerLogin
// endpoint from CLI flags.
func BuildCustomerLoginPayload(coacheeCustomerLoginBody string) (*coachee.CustomerLoginPayload, error) {
	var err error
	var body CustomerLoginRequestBody
	{
		err = json.Unmarshal([]byte(coacheeCustomerLoginBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"email\": \"Neque dolore sunt.\",\n      \"password\": \"Eos explicabo ab inventore.\"\n   }'")
		}
	}
	v := &coachee.CustomerLoginPayload{
		Email:    body.Email,
		Password: body.Password,
	}
	return v, nil
}

// BuildStartPasswordRecoveryFlowPayload builds the payload for the coachee
// StartPasswordRecoveryFlow endpoint from CLI flags.
func BuildStartPasswordRecoveryFlowPayload(coacheeStartPasswordRecoveryFlowBody string) (*coachee.StartPasswordRecoveryFlowPayload, error) {
	var err error
	var body StartPasswordRecoveryFlowRequestBody
	{
		err = json.Unmarshal([]byte(coacheeStartPasswordRecoveryFlowBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"email\": \"Autem dignissimos officiis labore quo reiciendis.\"\n   }'")
		}
	}
	v := &coachee.StartPasswordRecoveryFlowPayload{
		Email: body.Email,
	}
	return v, nil
}

// BuildCheckPasswordRecoveryTokenPayload builds the payload for the coachee
// CheckPasswordRecoveryToken endpoint from CLI flags.
func BuildCheckPasswordRecoveryTokenPayload(coacheeCheckPasswordRecoveryTokenToken string) (*coachee.CheckPasswordRecoveryTokenPayload, error) {
	var token string
	{
		token = coacheeCheckPasswordRecoveryTokenToken
	}
	payload := &coachee.CheckPasswordRecoveryTokenPayload{
		Token: token,
	}
	return payload, nil
}

// BuildFinalizePasswordRecoveryFlowPayload builds the payload for the coachee
// FinalizePasswordRecoveryFlow endpoint from CLI flags.
func BuildFinalizePasswordRecoveryFlowPayload(coacheeFinalizePasswordRecoveryFlowBody string, coacheeFinalizePasswordRecoveryFlowToken string) (*coachee.FinalizePasswordRecoveryFlowPayload, error) {
	var err error
	var body FinalizePasswordRecoveryFlowRequestBody
	{
		err = json.Unmarshal([]byte(coacheeFinalizePasswordRecoveryFlowBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"password\": \"Deleniti praesentium at culpa non quod perferendis.\"\n   }'")
		}
	}
	var token string
	{
		token = coacheeFinalizePasswordRecoveryFlowToken
	}
	v := &coachee.FinalizePasswordRecoveryFlowPayload{
		Password: body.Password,
	}
	v.Token = token
	return v, nil
}

// BuildCreateOrderPayload builds the payload for the coachee CreateOrder
// endpoint from CLI flags.
func BuildCreateOrderPayload(coacheeCreateOrderBody string, coacheeCreateOrderToken string) (*coachee.CreateOrderPayload, error) {
	var err error
	var body CreateOrderRequestBody
	{
		err = json.Unmarshal([]byte(coacheeCreateOrderBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"coachId\": 7481746633666812241,\n      \"introCall\": 8523130133761264387,\n      \"programId\": \"Expedita qui adipisci molestiae qui.\"\n   }'")
		}
	}
	var token string
	{
		token = coacheeCreateOrderToken
	}
	v := &coachee.CreateOrderPayload{
		CoachID:   body.CoachID,
		ProgramID: body.ProgramID,
		IntroCall: body.IntroCall,
	}
	v.Token = token
	return v, nil
}

// BuildRegisterStripeExpressPayload builds the payload for the coachee
// RegisterStripeExpress endpoint from CLI flags.
func BuildRegisterStripeExpressPayload(coacheeRegisterStripeExpressBody string, coacheeRegisterStripeExpressID string) (*coachee.RegisterStripeExpressPayload, error) {
	var err error
	var body RegisterStripeExpressRequestBody
	{
		err = json.Unmarshal([]byte(coacheeRegisterStripeExpressBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"authorizationCode\": \"In mollitia voluptates id qui.\"\n   }'")
		}
	}
	var id uint
	{
		var v uint64
		v, err = strconv.ParseUint(coacheeRegisterStripeExpressID, 10, 64)
		id = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT")
		}
	}
	v := &coachee.RegisterStripeExpressPayload{
		AuthorizationCode: body.AuthorizationCode,
	}
	v.ID = id
	return v, nil
}

// BuildAdminLoginPayload builds the payload for the coachee AdminLogin
// endpoint from CLI flags.
func BuildAdminLoginPayload(coacheeAdminLoginBody string) (*coachee.AdminLoginPayload, error) {
	var err error
	var body AdminLoginRequestBody
	{
		err = json.Unmarshal([]byte(coacheeAdminLoginBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"email\": \"Aut eius delectus optio dolore.\",\n      \"password\": \"Voluptatum architecto.\"\n   }'")
		}
	}
	v := &coachee.AdminLoginPayload{
		Email:    body.Email,
		Password: body.Password,
	}
	return v, nil
}
