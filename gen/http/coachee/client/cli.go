// Code generated by goa v3.0.9, DO NOT EDIT.
//
// coachee HTTP client CLI support package
//
// Command:
// $ goa gen coachee-backend/design

package client

import (
	coachee "coachee-backend/gen/coachee"
	"encoding/json"
	"fmt"
	"strconv"

	goa "goa.design/goa/v3/pkg"
)

// BuildGetCoachesPayload builds the payload for the coachee GetCoaches
// endpoint from CLI flags.
func BuildGetCoachesPayload(coacheeGetCoachesTag string, coacheeGetCoachesLimit string, coacheeGetCoachesPage string, coacheeGetCoachesShowAll string) (*coachee.GetCoachesPayload, error) {
	var err error
	var tag *string
	{
		if coacheeGetCoachesTag != "" {
			tag = &coacheeGetCoachesTag
		}
	}
	var limit *uint
	{
		if coacheeGetCoachesLimit != "" {
			var v uint64
			v, err = strconv.ParseUint(coacheeGetCoachesLimit, 10, 64)
			val := uint(v)
			limit = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for limit, must be UINT")
			}
		}
	}
	var page *uint
	{
		if coacheeGetCoachesPage != "" {
			var v uint64
			v, err = strconv.ParseUint(coacheeGetCoachesPage, 10, 64)
			val := uint(v)
			page = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for page, must be UINT")
			}
		}
	}
	var showAll *bool
	{
		if coacheeGetCoachesShowAll != "" {
			var val bool
			val, err = strconv.ParseBool(coacheeGetCoachesShowAll)
			showAll = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for showAll, must be BOOL")
			}
		}
	}
	payload := &coachee.GetCoachesPayload{
		Tag:     tag,
		Limit:   limit,
		Page:    page,
		ShowAll: showAll,
	}
	return payload, nil
}

// BuildGetCoachPayload builds the payload for the coachee GetCoach endpoint
// from CLI flags.
func BuildGetCoachPayload(coacheeGetCoachID string) (*coachee.GetCoachPayload, error) {
	var err error
	var id uint
	{
		var v uint64
		v, err = strconv.ParseUint(coacheeGetCoachID, 10, 64)
		id = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT")
		}
	}
	payload := &coachee.GetCoachPayload{
		ID: id,
	}
	return payload, nil
}

// BuildAdminGetCoachPayload builds the payload for the coachee AdminGetCoach
// endpoint from CLI flags.
func BuildAdminGetCoachPayload(coacheeAdminGetCoachID string, coacheeAdminGetCoachToken string) (*coachee.AdminGetCoachPayload, error) {
	var err error
	var id uint
	{
		var v uint64
		v, err = strconv.ParseUint(coacheeAdminGetCoachID, 10, 64)
		id = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT")
		}
	}
	var token string
	{
		token = coacheeAdminGetCoachToken
	}
	payload := &coachee.AdminGetCoachPayload{
		ID:    id,
		Token: token,
	}
	return payload, nil
}

// BuildLenCoachesPayload builds the payload for the coachee LenCoaches
// endpoint from CLI flags.
func BuildLenCoachesPayload(coacheeLenCoachesTag string) (*coachee.LenCoachesPayload, error) {
	var tag string
	{
		tag = coacheeLenCoachesTag
	}
	payload := &coachee.LenCoachesPayload{
		Tag: tag,
	}
	return payload, nil
}

// BuildCreateCoachPayload builds the payload for the coachee CreateCoach
// endpoint from CLI flags.
func BuildCreateCoachPayload(coacheeCreateCoachBody string) (*coachee.CreateCoachPayload, error) {
	var err error
	var body CreateCoachRequestBody
	{
		err = json.Unmarshal([]byte(coacheeCreateCoachBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"acceptTerms\": true,\n      \"city\": \"Magnam repudiandae consequuntur explicabo ad quibusdam.\",\n      \"country\": \"Sunt aut autem.\",\n      \"description\": \"In illo ipsa vel.\",\n      \"email\": \"Quo laborum quod.\",\n      \"firstName\": \"Dolor qui omnis.\",\n      \"introCall\": 16258794455693004843,\n      \"lastName\": \"In omnis et.\",\n      \"password\": \"Ut ut molestias enim voluptas ad quia.\",\n      \"phone\": \"Aut eos libero numquam sit.\",\n      \"tags\": \"Optio sunt blanditiis.\",\n      \"textAvailability\": \"Quia placeat adipisci error ipsa.\",\n      \"textCertifications\": \"Et qui facere facilis.\",\n      \"textPrograms\": \"Sapiente molestiae.\",\n      \"vat\": \"Accusamus labore.\"\n   }'")
		}
	}
	v := &coachee.CreateCoachPayload{
		FirstName:          body.FirstName,
		LastName:           body.LastName,
		Email:              body.Email,
		Password:           body.Password,
		Phone:              body.Phone,
		Tags:               body.Tags,
		Description:        body.Description,
		City:               body.City,
		Country:            body.Country,
		IntroCall:          body.IntroCall,
		TextCertifications: body.TextCertifications,
		TextPrograms:       body.TextPrograms,
		TextAvailability:   body.TextAvailability,
		Vat:                body.Vat,
		AcceptTerms:        body.AcceptTerms,
	}
	return v, nil
}

// BuildLoginCoachPayload builds the payload for the coachee LoginCoach
// endpoint from CLI flags.
func BuildLoginCoachPayload(coacheeLoginCoachBody string) (*coachee.LoginCoachPayload, error) {
	var err error
	var body LoginCoachRequestBody
	{
		err = json.Unmarshal([]byte(coacheeLoginCoachBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"email\": \"Eum quasi.\",\n      \"password\": \"Sit voluptatem dolorem.\"\n   }'")
		}
	}
	v := &coachee.LoginCoachPayload{
		Email:    body.Email,
		Password: body.Password,
	}
	return v, nil
}

// BuildStartCoachPasswordRecoveryFlowPayload builds the payload for the
// coachee StartCoachPasswordRecoveryFlow endpoint from CLI flags.
func BuildStartCoachPasswordRecoveryFlowPayload(coacheeStartCoachPasswordRecoveryFlowBody string) (*coachee.StartCoachPasswordRecoveryFlowPayload, error) {
	var err error
	var body StartCoachPasswordRecoveryFlowRequestBody
	{
		err = json.Unmarshal([]byte(coacheeStartCoachPasswordRecoveryFlowBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"email\": \"Nemo quaerat quia voluptates aut aut ex.\"\n   }'")
		}
	}
	v := &coachee.StartCoachPasswordRecoveryFlowPayload{
		Email: body.Email,
	}
	return v, nil
}

// BuildCheckCoachPasswordRecoveryTokenPayload builds the payload for the
// coachee CheckCoachPasswordRecoveryToken endpoint from CLI flags.
func BuildCheckCoachPasswordRecoveryTokenPayload(coacheeCheckCoachPasswordRecoveryTokenToken string) (*coachee.CheckCoachPasswordRecoveryTokenPayload, error) {
	var token string
	{
		token = coacheeCheckCoachPasswordRecoveryTokenToken
	}
	payload := &coachee.CheckCoachPasswordRecoveryTokenPayload{
		Token: token,
	}
	return payload, nil
}

// BuildFinalizeCoachPasswordRecoveryFlowPayload builds the payload for the
// coachee FinalizeCoachPasswordRecoveryFlow endpoint from CLI flags.
func BuildFinalizeCoachPasswordRecoveryFlowPayload(coacheeFinalizeCoachPasswordRecoveryFlowBody string, coacheeFinalizeCoachPasswordRecoveryFlowToken string) (*coachee.FinalizeCoachPasswordRecoveryFlowPayload, error) {
	var err error
	var body FinalizeCoachPasswordRecoveryFlowRequestBody
	{
		err = json.Unmarshal([]byte(coacheeFinalizeCoachPasswordRecoveryFlowBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"password\": \"Ratione aut distinctio officia repellat quisquam.\"\n   }'")
		}
	}
	var token string
	{
		token = coacheeFinalizeCoachPasswordRecoveryFlowToken
	}
	v := &coachee.FinalizeCoachPasswordRecoveryFlowPayload{
		Password: body.Password,
	}
	v.Token = token
	return v, nil
}

// BuildUpdateCoachPayload builds the payload for the coachee UpdateCoach
// endpoint from CLI flags.
func BuildUpdateCoachPayload(coacheeUpdateCoachBody string, coacheeUpdateCoachID string, coacheeUpdateCoachToken string) (*coachee.UpdateCoachPayload, error) {
	var err error
	var body UpdateCoachRequestBody
	{
		err = json.Unmarshal([]byte(coacheeUpdateCoachBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"cardDescription\": \"Quod quis aut nostrum odio quia ea.\",\n      \"city\": \"Et natus ut sed et nihil exercitationem.\",\n      \"country\": \"Et ea consequatur officiis dolorem.\",\n      \"description\": \"Placeat ducimus autem dolor officia ipsam et.\",\n      \"email\": \"In aut illum.\",\n      \"firstCallDuration\": 1793992873,\n      \"firstName\": \"Praesentium quis et id vel totam.\",\n      \"introCall\": 4934597670587943903,\n      \"lastName\": \"Est magni.\",\n      \"phone\": \"Aut praesentium sint.\",\n      \"pictureURL\": \"Voluptate rem dolor ad qui et eligendi.\",\n      \"status\": \"Corrupti fugit exercitationem rerum.\",\n      \"stripeID\": \"Omnis et dignissimos quae.\",\n      \"tags\": \"Sint dolor eum non quae itaque.\",\n      \"vat\": \"Dolores eveniet reiciendis similique.\",\n      \"videoURL\": \"Iure voluptas architecto officiis et ad consequuntur.\"\n   }'")
		}
	}
	var id uint
	{
		var v uint64
		v, err = strconv.ParseUint(coacheeUpdateCoachID, 10, 64)
		id = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT")
		}
	}
	var token string
	{
		token = coacheeUpdateCoachToken
	}
	v := &coachee.UpdateCoachPayload{
		FirstName:         body.FirstName,
		LastName:          body.LastName,
		Email:             body.Email,
		Phone:             body.Phone,
		Tags:              body.Tags,
		Description:       body.Description,
		City:              body.City,
		Country:           body.Country,
		IntroCall:         body.IntroCall,
		StripeID:          body.StripeID,
		PictureURL:        body.PictureURL,
		Vat:               body.Vat,
		Status:            body.Status,
		FirstCallDuration: body.FirstCallDuration,
		VideoURL:          body.VideoURL,
		CardDescription:   body.CardDescription,
	}
	v.ID = id
	v.Token = token
	return v, nil
}

// BuildCreateCertificationPayload builds the payload for the coachee
// CreateCertification endpoint from CLI flags.
func BuildCreateCertificationPayload(coacheeCreateCertificationBody string, coacheeCreateCertificationID string, coacheeCreateCertificationToken string) (*coachee.CreateCertificationPayload, error) {
	var err error
	var body CreateCertificationRequestBody
	{
		err = json.Unmarshal([]byte(coacheeCreateCertificationBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"certification\": {\n         \"description\": \"Et molestiae veritatis eum facere alias in.\",\n         \"id\": \"Omnis ex mollitia aut.\",\n         \"institution\": \"Rem et iure dignissimos.\",\n         \"month\": 11,\n         \"title\": \"Veritatis qui optio.\",\n         \"year\": 2001\n      }\n   }'")
		}
		if body.Certification == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("certification", "body"))
		}
		if body.Certification != nil {
			if err2 := ValidateCertificationRequestBody(body.Certification); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var id uint
	{
		var v uint64
		v, err = strconv.ParseUint(coacheeCreateCertificationID, 10, 64)
		id = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT")
		}
	}
	var token string
	{
		token = coacheeCreateCertificationToken
	}
	v := &coachee.CreateCertificationPayload{}
	if body.Certification != nil {
		v.Certification = marshalCertificationRequestBodyToCoacheeCertification(body.Certification)
	}
	v.ID = id
	v.Token = token
	return v, nil
}

// BuildDeleteCertificationPayload builds the payload for the coachee
// DeleteCertification endpoint from CLI flags.
func BuildDeleteCertificationPayload(coacheeDeleteCertificationID string, coacheeDeleteCertificationCertID string, coacheeDeleteCertificationToken string) (*coachee.DeleteCertificationPayload, error) {
	var err error
	var id uint
	{
		var v uint64
		v, err = strconv.ParseUint(coacheeDeleteCertificationID, 10, 64)
		id = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT")
		}
	}
	var certID string
	{
		certID = coacheeDeleteCertificationCertID
	}
	var token string
	{
		token = coacheeDeleteCertificationToken
	}
	payload := &coachee.DeleteCertificationPayload{
		ID:     id,
		CertID: certID,
		Token:  token,
	}
	return payload, nil
}

// BuildCreateProgramPayload builds the payload for the coachee CreateProgram
// endpoint from CLI flags.
func BuildCreateProgramPayload(coacheeCreateProgramBody string, coacheeCreateProgramID string, coacheeCreateProgramToken string) (*coachee.CreateProgramPayload, error) {
	var err error
	var body CreateProgramRequestBody
	{
		err = json.Unmarshal([]byte(coacheeCreateProgramBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"program\": {\n         \"description\": \"Repellat assumenda consequatur explicabo perspiciatis asperiores.\",\n         \"duration\": 1314670451368075891,\n         \"extraSessions\": [\n            {\n               \"duration\": 8197823858361608076,\n               \"sessions\": 11168025737299342441\n            },\n            {\n               \"duration\": 8197823858361608076,\n               \"sessions\": 11168025737299342441\n            }\n         ],\n         \"id\": \"Placeat voluptas neque dolore sunt maiores eos.\",\n         \"name\": \"Ab inventore non necessitatibus quisquam ut ut.\",\n         \"sessions\": 11812977056033744357,\n         \"taxPercent\": 12821193929366618505,\n         \"totalPrice\": 8988768073390760373\n      }\n   }'")
		}
		if body.Program == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("program", "body"))
		}
		if err != nil {
			return nil, err
		}
	}
	var id uint
	{
		var v uint64
		v, err = strconv.ParseUint(coacheeCreateProgramID, 10, 64)
		id = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT")
		}
	}
	var token string
	{
		token = coacheeCreateProgramToken
	}
	v := &coachee.CreateProgramPayload{}
	if body.Program != nil {
		v.Program = marshalProgramRequestBodyToCoacheeProgram(body.Program)
	}
	v.ID = id
	v.Token = token
	return v, nil
}

// BuildDeleteProgramPayload builds the payload for the coachee DeleteProgram
// endpoint from CLI flags.
func BuildDeleteProgramPayload(coacheeDeleteProgramID string, coacheeDeleteProgramProgramID string, coacheeDeleteProgramToken string) (*coachee.DeleteProgramPayload, error) {
	var err error
	var id uint
	{
		var v uint64
		v, err = strconv.ParseUint(coacheeDeleteProgramID, 10, 64)
		id = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT")
		}
	}
	var programID string
	{
		programID = coacheeDeleteProgramProgramID
	}
	var token string
	{
		token = coacheeDeleteProgramToken
	}
	payload := &coachee.DeleteProgramPayload{
		ID:        id,
		ProgramID: programID,
		Token:     token,
	}
	return payload, nil
}

// BuildCreateAvailabilityPayload builds the payload for the coachee
// CreateAvailability endpoint from CLI flags.
func BuildCreateAvailabilityPayload(coacheeCreateAvailabilityBody string, coacheeCreateAvailabilityID string, coacheeCreateAvailabilityToken string) (*coachee.CreateAvailabilityPayload, error) {
	var err error
	var body CreateAvailabilityRequestBody
	{
		err = json.Unmarshal([]byte(coacheeCreateAvailabilityBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"end\": 316,\n      \"start\": 1372,\n      \"weekDay\": 2\n   }'")
		}
		if body.WeekDay < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.weekDay", body.WeekDay, 0, true))
		}
		if body.WeekDay > 6 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.weekDay", body.WeekDay, 6, false))
		}
		if body.Start < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.start", body.Start, 0, true))
		}
		if body.Start > 1440 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.start", body.Start, 1440, false))
		}
		if body.End < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.end", body.End, 0, true))
		}
		if body.End > 1440 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.end", body.End, 1440, false))
		}
		if err != nil {
			return nil, err
		}
	}
	var id uint
	{
		var v uint64
		v, err = strconv.ParseUint(coacheeCreateAvailabilityID, 10, 64)
		id = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT")
		}
	}
	var token string
	{
		token = coacheeCreateAvailabilityToken
	}
	v := &coachee.CreateAvailabilityPayload{
		WeekDay: body.WeekDay,
		Start:   body.Start,
		End:     body.End,
	}
	v.ID = id
	v.Token = token
	return v, nil
}

// BuildDeleteAvailabilityPayload builds the payload for the coachee
// DeleteAvailability endpoint from CLI flags.
func BuildDeleteAvailabilityPayload(coacheeDeleteAvailabilityID string, coacheeDeleteAvailabilityAvID string, coacheeDeleteAvailabilityToken string) (*coachee.DeleteAvailabilityPayload, error) {
	var err error
	var id uint
	{
		var v uint64
		v, err = strconv.ParseUint(coacheeDeleteAvailabilityID, 10, 64)
		id = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT")
		}
	}
	var avID string
	{
		avID = coacheeDeleteAvailabilityAvID
	}
	var token string
	{
		token = coacheeDeleteAvailabilityToken
	}
	payload := &coachee.DeleteAvailabilityPayload{
		ID:    id,
		AvID:  avID,
		Token: token,
	}
	return payload, nil
}

// BuildCreateCustomerPayload builds the payload for the coachee CreateCustomer
// endpoint from CLI flags.
func BuildCreateCustomerPayload(coacheeCreateCustomerBody string) (*coachee.CreateCustomerPayload, error) {
	var err error
	var body CreateCustomerRequestBody
	{
		err = json.Unmarshal([]byte(coacheeCreateCustomerBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"acceptTerms\": false,\n      \"email\": \"Qui quo nihil est vitae.\",\n      \"firstName\": \"Est occaecati molestiae praesentium illum et rerum.\",\n      \"lastName\": \"Alias ab dolores ratione aut eius.\",\n      \"newsletter\": false,\n      \"password\": \"Optio dolore quo voluptatum architecto.\",\n      \"reason\": \"Quia sit.\"\n   }'")
		}
	}
	v := &coachee.CreateCustomerPayload{
		Email:       body.Email,
		FirstName:   body.FirstName,
		LastName:    body.LastName,
		Password:    body.Password,
		AcceptTerms: body.AcceptTerms,
		Reason:      body.Reason,
		Newsletter:  body.Newsletter,
	}
	return v, nil
}

// BuildCustomerLoginPayload builds the payload for the coachee CustomerLogin
// endpoint from CLI flags.
func BuildCustomerLoginPayload(coacheeCustomerLoginBody string) (*coachee.CustomerLoginPayload, error) {
	var err error
	var body CustomerLoginRequestBody
	{
		err = json.Unmarshal([]byte(coacheeCustomerLoginBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"email\": \"Esse facere minus incidunt.\",\n      \"password\": \"Et perspiciatis.\"\n   }'")
		}
	}
	v := &coachee.CustomerLoginPayload{
		Email:    body.Email,
		Password: body.Password,
	}
	return v, nil
}

// BuildStartPasswordRecoveryFlowPayload builds the payload for the coachee
// StartPasswordRecoveryFlow endpoint from CLI flags.
func BuildStartPasswordRecoveryFlowPayload(coacheeStartPasswordRecoveryFlowBody string) (*coachee.StartPasswordRecoveryFlowPayload, error) {
	var err error
	var body StartPasswordRecoveryFlowRequestBody
	{
		err = json.Unmarshal([]byte(coacheeStartPasswordRecoveryFlowBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"email\": \"Nihil dolor voluptatem sed eius.\"\n   }'")
		}
	}
	v := &coachee.StartPasswordRecoveryFlowPayload{
		Email: body.Email,
	}
	return v, nil
}

// BuildCheckPasswordRecoveryTokenPayload builds the payload for the coachee
// CheckPasswordRecoveryToken endpoint from CLI flags.
func BuildCheckPasswordRecoveryTokenPayload(coacheeCheckPasswordRecoveryTokenToken string) (*coachee.CheckPasswordRecoveryTokenPayload, error) {
	var token string
	{
		token = coacheeCheckPasswordRecoveryTokenToken
	}
	payload := &coachee.CheckPasswordRecoveryTokenPayload{
		Token: token,
	}
	return payload, nil
}

// BuildFinalizePasswordRecoveryFlowPayload builds the payload for the coachee
// FinalizePasswordRecoveryFlow endpoint from CLI flags.
func BuildFinalizePasswordRecoveryFlowPayload(coacheeFinalizePasswordRecoveryFlowBody string, coacheeFinalizePasswordRecoveryFlowToken string) (*coachee.FinalizePasswordRecoveryFlowPayload, error) {
	var err error
	var body FinalizePasswordRecoveryFlowRequestBody
	{
		err = json.Unmarshal([]byte(coacheeFinalizePasswordRecoveryFlowBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"password\": \"Numquam atque iure quia placeat minus quasi.\"\n   }'")
		}
	}
	var token string
	{
		token = coacheeFinalizePasswordRecoveryFlowToken
	}
	v := &coachee.FinalizePasswordRecoveryFlowPayload{
		Password: body.Password,
	}
	v.Token = token
	return v, nil
}

// BuildCreateOrderPayload builds the payload for the coachee CreateOrder
// endpoint from CLI flags.
func BuildCreateOrderPayload(coacheeCreateOrderBody string, coacheeCreateOrderToken string) (*coachee.CreateOrderPayload, error) {
	var err error
	var body CreateOrderRequestBody
	{
		err = json.Unmarshal([]byte(coacheeCreateOrderBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"coachId\": 14610319604433047900,\n      \"introCall\": 5395595565603867440,\n      \"programId\": \"Aut dolore debitis pariatur sit veritatis rerum.\"\n   }'")
		}
	}
	var token string
	{
		token = coacheeCreateOrderToken
	}
	v := &coachee.CreateOrderPayload{
		CoachID:   body.CoachID,
		ProgramID: body.ProgramID,
		IntroCall: body.IntroCall,
	}
	v.Token = token
	return v, nil
}

// BuildRegisterStripeExpressPayload builds the payload for the coachee
// RegisterStripeExpress endpoint from CLI flags.
func BuildRegisterStripeExpressPayload(coacheeRegisterStripeExpressBody string, coacheeRegisterStripeExpressID string) (*coachee.RegisterStripeExpressPayload, error) {
	var err error
	var body RegisterStripeExpressRequestBody
	{
		err = json.Unmarshal([]byte(coacheeRegisterStripeExpressBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"authorizationCode\": \"Dignissimos odit.\"\n   }'")
		}
	}
	var id uint
	{
		var v uint64
		v, err = strconv.ParseUint(coacheeRegisterStripeExpressID, 10, 64)
		id = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT")
		}
	}
	v := &coachee.RegisterStripeExpressPayload{
		AuthorizationCode: body.AuthorizationCode,
	}
	v.ID = id
	return v, nil
}

// BuildAdminLoginPayload builds the payload for the coachee AdminLogin
// endpoint from CLI flags.
func BuildAdminLoginPayload(coacheeAdminLoginBody string) (*coachee.AdminLoginPayload, error) {
	var err error
	var body AdminLoginRequestBody
	{
		err = json.Unmarshal([]byte(coacheeAdminLoginBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"email\": \"Rem ipsa id dicta ipsam.\",\n      \"password\": \"Sit eos odio et sint repudiandae ea.\"\n   }'")
		}
	}
	v := &coachee.AdminLoginPayload{
		Email:    body.Email,
		Password: body.Password,
	}
	return v, nil
}

// BuildRegisterNewsletterEmailPayload builds the payload for the coachee
// RegisterNewsletterEmail endpoint from CLI flags.
func BuildRegisterNewsletterEmailPayload(coacheeRegisterNewsletterEmailBody string) (*coachee.RegisterNewsletterEmailPayload, error) {
	var err error
	var body RegisterNewsletterEmailRequestBody
	{
		err = json.Unmarshal([]byte(coacheeRegisterNewsletterEmailBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"email\": \"Nihil eius reprehenderit consequatur animi.\"\n   }'")
		}
	}
	v := &coachee.RegisterNewsletterEmailPayload{
		Email: body.Email,
	}
	return v, nil
}
