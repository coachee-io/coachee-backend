// Code generated by goa v3.0.9, DO NOT EDIT.
//
// coachee HTTP client CLI support package
//
// Command:
// $ goa gen coachee-backend/design

package client

import (
	coachee "coachee-backend/gen/coachee"
	"encoding/json"
	"fmt"
	"strconv"

	goa "goa.design/goa/v3/pkg"
)

// BuildGetCoachesPayload builds the payload for the coachee GetCoaches
// endpoint from CLI flags.
func BuildGetCoachesPayload(coacheeGetCoachesTag string, coacheeGetCoachesLimit string, coacheeGetCoachesPage string) (*coachee.GetCoachesPayload, error) {
	var err error
	var tag *string
	{
		if coacheeGetCoachesTag != "" {
			tag = &coacheeGetCoachesTag
		}
	}
	var limit *uint
	{
		if coacheeGetCoachesLimit != "" {
			var v uint64
			v, err = strconv.ParseUint(coacheeGetCoachesLimit, 10, 64)
			val := uint(v)
			limit = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for limit, must be UINT")
			}
		}
	}
	var page *uint
	{
		if coacheeGetCoachesPage != "" {
			var v uint64
			v, err = strconv.ParseUint(coacheeGetCoachesPage, 10, 64)
			val := uint(v)
			page = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for page, must be UINT")
			}
		}
	}
	payload := &coachee.GetCoachesPayload{
		Tag:   tag,
		Limit: limit,
		Page:  page,
	}
	return payload, nil
}

// BuildGetCoachPayload builds the payload for the coachee GetCoach endpoint
// from CLI flags.
func BuildGetCoachPayload(coacheeGetCoachID string) (*coachee.GetCoachPayload, error) {
	var err error
	var id uint
	{
		var v uint64
		v, err = strconv.ParseUint(coacheeGetCoachID, 10, 64)
		id = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT")
		}
	}
	payload := &coachee.GetCoachPayload{
		ID: id,
	}
	return payload, nil
}

// BuildLenCoachesPayload builds the payload for the coachee LenCoaches
// endpoint from CLI flags.
func BuildLenCoachesPayload(coacheeLenCoachesTag string) (*coachee.LenCoachesPayload, error) {
	var tag string
	{
		tag = coacheeLenCoachesTag
	}
	payload := &coachee.LenCoachesPayload{
		Tag: tag,
	}
	return payload, nil
}

// BuildCreateCoachPayload builds the payload for the coachee CreateCoach
// endpoint from CLI flags.
func BuildCreateCoachPayload(coacheeCreateCoachBody string) (*coachee.CreateCoachPayload, error) {
	var err error
	var body CreateCoachRequestBody
	{
		err = json.Unmarshal([]byte(coacheeCreateCoachBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"city\": \"Iusto incidunt odio.\",\n      \"country\": \"Quo incidunt ad recusandae quam.\",\n      \"description\": \"Esse molestiae eum et et.\",\n      \"email\": \"Quia voluptatem.\",\n      \"firstName\": \"Provident provident porro doloremque.\",\n      \"introCall\": 2484851915066860437,\n      \"lastName\": \"Nemo aut fuga saepe sed.\",\n      \"password\": \"Et autem voluptatem veniam.\",\n      \"phone\": \"Inventore fugit distinctio delectus culpa doloremque.\",\n      \"tags\": \"Est tempora iure id aspernatur.\",\n      \"textAvailability\": \"Beatae vel repellat id aperiam.\",\n      \"textCertifications\": \"Facilis qui rerum laborum sapiente quae magnam.\",\n      \"textPrograms\": \"Vero autem magnam rerum ut autem harum.\",\n      \"vat\": \"Facere repellat distinctio.\"\n   }'")
		}
	}
	v := &coachee.CreateCoachPayload{
		FirstName:          body.FirstName,
		LastName:           body.LastName,
		Email:              body.Email,
		Password:           body.Password,
		Phone:              body.Phone,
		Tags:               body.Tags,
		Description:        body.Description,
		City:               body.City,
		Country:            body.Country,
		IntroCall:          body.IntroCall,
		TextCertifications: body.TextCertifications,
		TextPrograms:       body.TextPrograms,
		TextAvailability:   body.TextAvailability,
		Vat:                body.Vat,
	}
	return v, nil
}

// BuildLoginCoachPayload builds the payload for the coachee LoginCoach
// endpoint from CLI flags.
func BuildLoginCoachPayload(coacheeLoginCoachBody string) (*coachee.LoginCoachPayload, error) {
	var err error
	var body LoginCoachRequestBody
	{
		err = json.Unmarshal([]byte(coacheeLoginCoachBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"email\": \"Ad enim saepe.\",\n      \"password\": \"Assumenda debitis.\"\n   }'")
		}
	}
	v := &coachee.LoginCoachPayload{
		Email:    body.Email,
		Password: body.Password,
	}
	return v, nil
}

// BuildStartCoachPasswordRecoveryFlowPayload builds the payload for the
// coachee StartCoachPasswordRecoveryFlow endpoint from CLI flags.
func BuildStartCoachPasswordRecoveryFlowPayload(coacheeStartCoachPasswordRecoveryFlowBody string) (*coachee.StartCoachPasswordRecoveryFlowPayload, error) {
	var err error
	var body StartCoachPasswordRecoveryFlowRequestBody
	{
		err = json.Unmarshal([]byte(coacheeStartCoachPasswordRecoveryFlowBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"email\": \"Autem iste sint.\"\n   }'")
		}
	}
	v := &coachee.StartCoachPasswordRecoveryFlowPayload{
		Email: body.Email,
	}
	return v, nil
}

// BuildCheckCoachPasswordRecoveryTokenPayload builds the payload for the
// coachee CheckCoachPasswordRecoveryToken endpoint from CLI flags.
func BuildCheckCoachPasswordRecoveryTokenPayload(coacheeCheckCoachPasswordRecoveryTokenToken string) (*coachee.CheckCoachPasswordRecoveryTokenPayload, error) {
	var token string
	{
		token = coacheeCheckCoachPasswordRecoveryTokenToken
	}
	payload := &coachee.CheckCoachPasswordRecoveryTokenPayload{
		Token: token,
	}
	return payload, nil
}

// BuildFinalizeCoachPasswordRecoveryFlowPayload builds the payload for the
// coachee FinalizeCoachPasswordRecoveryFlow endpoint from CLI flags.
func BuildFinalizeCoachPasswordRecoveryFlowPayload(coacheeFinalizeCoachPasswordRecoveryFlowBody string, coacheeFinalizeCoachPasswordRecoveryFlowToken string) (*coachee.FinalizeCoachPasswordRecoveryFlowPayload, error) {
	var err error
	var body FinalizeCoachPasswordRecoveryFlowRequestBody
	{
		err = json.Unmarshal([]byte(coacheeFinalizeCoachPasswordRecoveryFlowBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"password\": \"Tempora fugit et provident dolore provident repellendus.\"\n   }'")
		}
	}
	var token string
	{
		token = coacheeFinalizeCoachPasswordRecoveryFlowToken
	}
	v := &coachee.FinalizeCoachPasswordRecoveryFlowPayload{
		Password: body.Password,
	}
	v.Token = token
	return v, nil
}

// BuildUpdateCoachPayload builds the payload for the coachee UpdateCoach
// endpoint from CLI flags.
func BuildUpdateCoachPayload(coacheeUpdateCoachBody string, coacheeUpdateCoachID string) (*coachee.UpdateCoachPayload, error) {
	var err error
	var body UpdateCoachRequestBody
	{
		err = json.Unmarshal([]byte(coacheeUpdateCoachBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"city\": \"Voluptatibus odio minima repudiandae.\",\n      \"country\": \"Voluptates omnis cumque quo.\",\n      \"description\": \"Qui excepturi vel ut consectetur.\",\n      \"email\": \"Sunt praesentium aut quasi ipsum dolores.\",\n      \"firstName\": \"Possimus numquam.\",\n      \"introCall\": 1864340654662324785,\n      \"lastName\": \"Ratione laudantium quae tenetur.\",\n      \"phone\": \"Ut officia et hic quo.\",\n      \"pictureURL\": \"Consequatur velit.\",\n      \"stripeID\": \"Officiis quo nobis soluta atque.\",\n      \"tags\": \"Amet non asperiores quia non commodi.\",\n      \"vat\": \"Ab omnis quaerat neque sunt voluptatem.\"\n   }'")
		}
	}
	var id uint
	{
		var v uint64
		v, err = strconv.ParseUint(coacheeUpdateCoachID, 10, 64)
		id = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT")
		}
	}
	v := &coachee.UpdateCoachPayload{
		FirstName:   body.FirstName,
		LastName:    body.LastName,
		Email:       body.Email,
		Phone:       body.Phone,
		Tags:        body.Tags,
		Description: body.Description,
		City:        body.City,
		Country:     body.Country,
		IntroCall:   body.IntroCall,
		StripeID:    body.StripeID,
		PictureURL:  body.PictureURL,
		Vat:         body.Vat,
	}
	v.ID = id
	return v, nil
}

// BuildCreateCertificationPayload builds the payload for the coachee
// CreateCertification endpoint from CLI flags.
func BuildCreateCertificationPayload(coacheeCreateCertificationBody string, coacheeCreateCertificationID string) (*coachee.CreateCertificationPayload, error) {
	var err error
	var body CreateCertificationRequestBody
	{
		err = json.Unmarshal([]byte(coacheeCreateCertificationBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"certification\": {\n         \"description\": \"Assumenda distinctio.\",\n         \"id\": \"Similique necessitatibus sint qui.\",\n         \"institution\": \"Neque quis sunt esse placeat consequatur.\",\n         \"month\": 11,\n         \"title\": \"Quia voluptas labore voluptatum.\",\n         \"year\": 1982\n      }\n   }'")
		}
		if body.Certification == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("certification", "body"))
		}
		if body.Certification != nil {
			if err2 := ValidateCertificationRequestBody(body.Certification); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var id uint
	{
		var v uint64
		v, err = strconv.ParseUint(coacheeCreateCertificationID, 10, 64)
		id = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT")
		}
	}
	v := &coachee.CreateCertificationPayload{}
	if body.Certification != nil {
		v.Certification = marshalCertificationRequestBodyToCoacheeCertification(body.Certification)
	}
	v.ID = id
	return v, nil
}

// BuildDeleteCertificationPayload builds the payload for the coachee
// DeleteCertification endpoint from CLI flags.
func BuildDeleteCertificationPayload(coacheeDeleteCertificationID string, coacheeDeleteCertificationCertID string) (*coachee.DeleteCertificationPayload, error) {
	var err error
	var id uint
	{
		var v uint64
		v, err = strconv.ParseUint(coacheeDeleteCertificationID, 10, 64)
		id = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT")
		}
	}
	var certID string
	{
		certID = coacheeDeleteCertificationCertID
	}
	payload := &coachee.DeleteCertificationPayload{
		ID:     id,
		CertID: certID,
	}
	return payload, nil
}

// BuildCreateProgramPayload builds the payload for the coachee CreateProgram
// endpoint from CLI flags.
func BuildCreateProgramPayload(coacheeCreateProgramBody string, coacheeCreateProgramID string) (*coachee.CreateProgramPayload, error) {
	var err error
	var body CreateProgramRequestBody
	{
		err = json.Unmarshal([]byte(coacheeCreateProgramBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"program\": {\n         \"description\": \"Tempore fugit doloremque quod veritatis.\",\n         \"duration\": 15441528118912166289,\n         \"id\": \"Sint sit laboriosam tempora modi facere quos.\",\n         \"name\": \"Rerum architecto et facere quidem aut libero.\",\n         \"sessions\": 6313759655879750564,\n         \"taxPercent\": 13999771392470398024,\n         \"totalPrice\": 15409970536085466204\n      }\n   }'")
		}
		if body.Program == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("program", "body"))
		}
		if err != nil {
			return nil, err
		}
	}
	var id uint
	{
		var v uint64
		v, err = strconv.ParseUint(coacheeCreateProgramID, 10, 64)
		id = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT")
		}
	}
	v := &coachee.CreateProgramPayload{}
	if body.Program != nil {
		v.Program = marshalProgramRequestBodyToCoacheeProgram(body.Program)
	}
	v.ID = id
	return v, nil
}

// BuildDeleteProgramPayload builds the payload for the coachee DeleteProgram
// endpoint from CLI flags.
func BuildDeleteProgramPayload(coacheeDeleteProgramID string, coacheeDeleteProgramProgramID string) (*coachee.DeleteProgramPayload, error) {
	var err error
	var id uint
	{
		var v uint64
		v, err = strconv.ParseUint(coacheeDeleteProgramID, 10, 64)
		id = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT")
		}
	}
	var programID string
	{
		programID = coacheeDeleteProgramProgramID
	}
	payload := &coachee.DeleteProgramPayload{
		ID:        id,
		ProgramID: programID,
	}
	return payload, nil
}

// BuildCreateAvailabilityPayload builds the payload for the coachee
// CreateAvailability endpoint from CLI flags.
func BuildCreateAvailabilityPayload(coacheeCreateAvailabilityBody string, coacheeCreateAvailabilityID string) (*coachee.CreateAvailabilityPayload, error) {
	var err error
	var body CreateAvailabilityRequestBody
	{
		err = json.Unmarshal([]byte(coacheeCreateAvailabilityBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"availability\": {\n         \"end\": 1074,\n         \"id\": \"Accusamus est.\",\n         \"start\": 79,\n         \"weekDay\": 3\n      }\n   }'")
		}
		if body.Availability == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("availability", "body"))
		}
		if body.Availability != nil {
			if err2 := ValidateAvailabilityRequestBody(body.Availability); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var id uint
	{
		var v uint64
		v, err = strconv.ParseUint(coacheeCreateAvailabilityID, 10, 64)
		id = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT")
		}
	}
	v := &coachee.CreateAvailabilityPayload{}
	if body.Availability != nil {
		v.Availability = marshalAvailabilityRequestBodyToCoacheeAvailability(body.Availability)
	}
	v.ID = id
	return v, nil
}

// BuildDeleteAvailabilityPayload builds the payload for the coachee
// DeleteAvailability endpoint from CLI flags.
func BuildDeleteAvailabilityPayload(coacheeDeleteAvailabilityID string, coacheeDeleteAvailabilityAvID string) (*coachee.DeleteAvailabilityPayload, error) {
	var err error
	var id uint
	{
		var v uint64
		v, err = strconv.ParseUint(coacheeDeleteAvailabilityID, 10, 64)
		id = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT")
		}
	}
	var avID string
	{
		avID = coacheeDeleteAvailabilityAvID
	}
	payload := &coachee.DeleteAvailabilityPayload{
		ID:   id,
		AvID: avID,
	}
	return payload, nil
}

// BuildCreateCustomerPayload builds the payload for the coachee CreateCustomer
// endpoint from CLI flags.
func BuildCreateCustomerPayload(coacheeCreateCustomerBody string) (*coachee.CreateCustomerPayload, error) {
	var err error
	var body CreateCustomerRequestBody
	{
		err = json.Unmarshal([]byte(coacheeCreateCustomerBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"birthDate\": 4912482196392485294,\n      \"email\": \"Ad quibusdam neque sunt aut autem ut.\",\n      \"firstName\": \"Et qui facere facilis.\",\n      \"lastName\": \"Sapiente molestiae.\",\n      \"password\": \"Placeat adipisci error ipsa.\"\n   }'")
		}
	}
	v := &coachee.CreateCustomerPayload{
		Email:     body.Email,
		FirstName: body.FirstName,
		LastName:  body.LastName,
		BirthDate: body.BirthDate,
		Password:  body.Password,
	}
	return v, nil
}

// BuildCustomerLoginPayload builds the payload for the coachee CustomerLogin
// endpoint from CLI flags.
func BuildCustomerLoginPayload(coacheeCustomerLoginBody string) (*coachee.CustomerLoginPayload, error) {
	var err error
	var body CustomerLoginRequestBody
	{
		err = json.Unmarshal([]byte(coacheeCustomerLoginBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"email\": \"Nobis voluptatem delectus ut et.\",\n      \"password\": \"Iste natus doloribus sunt magni.\"\n   }'")
		}
	}
	v := &coachee.CustomerLoginPayload{
		Email:    body.Email,
		Password: body.Password,
	}
	return v, nil
}

// BuildStartPasswordRecoveryFlowPayload builds the payload for the coachee
// StartPasswordRecoveryFlow endpoint from CLI flags.
func BuildStartPasswordRecoveryFlowPayload(coacheeStartPasswordRecoveryFlowBody string) (*coachee.StartPasswordRecoveryFlowPayload, error) {
	var err error
	var body StartPasswordRecoveryFlowRequestBody
	{
		err = json.Unmarshal([]byte(coacheeStartPasswordRecoveryFlowBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"email\": \"Deleniti ea ut alias dicta.\"\n   }'")
		}
	}
	v := &coachee.StartPasswordRecoveryFlowPayload{
		Email: body.Email,
	}
	return v, nil
}

// BuildCheckPasswordRecoveryTokenPayload builds the payload for the coachee
// CheckPasswordRecoveryToken endpoint from CLI flags.
func BuildCheckPasswordRecoveryTokenPayload(coacheeCheckPasswordRecoveryTokenToken string) (*coachee.CheckPasswordRecoveryTokenPayload, error) {
	var token string
	{
		token = coacheeCheckPasswordRecoveryTokenToken
	}
	payload := &coachee.CheckPasswordRecoveryTokenPayload{
		Token: token,
	}
	return payload, nil
}

// BuildFinalizePasswordRecoveryFlowPayload builds the payload for the coachee
// FinalizePasswordRecoveryFlow endpoint from CLI flags.
func BuildFinalizePasswordRecoveryFlowPayload(coacheeFinalizePasswordRecoveryFlowBody string, coacheeFinalizePasswordRecoveryFlowToken string) (*coachee.FinalizePasswordRecoveryFlowPayload, error) {
	var err error
	var body FinalizePasswordRecoveryFlowRequestBody
	{
		err = json.Unmarshal([]byte(coacheeFinalizePasswordRecoveryFlowBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"password\": \"Necessitatibus non.\"\n   }'")
		}
	}
	var token string
	{
		token = coacheeFinalizePasswordRecoveryFlowToken
	}
	v := &coachee.FinalizePasswordRecoveryFlowPayload{
		Password: body.Password,
	}
	v.Token = token
	return v, nil
}

// BuildCreateOrderPayload builds the payload for the coachee CreateOrder
// endpoint from CLI flags.
func BuildCreateOrderPayload(coacheeCreateOrderBody string, coacheeCreateOrderToken string) (*coachee.CreateOrderPayload, error) {
	var err error
	var body CreateOrderRequestBody
	{
		err = json.Unmarshal([]byte(coacheeCreateOrderBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"coachId\": 6155620230951574503,\n      \"introCall\": 4361438354368673299,\n      \"programId\": \"Natus in aut illum.\"\n   }'")
		}
	}
	var token string
	{
		token = coacheeCreateOrderToken
	}
	v := &coachee.CreateOrderPayload{
		CoachID:   body.CoachID,
		ProgramID: body.ProgramID,
		IntroCall: body.IntroCall,
	}
	v.Token = token
	return v, nil
}

// BuildRegisterStripeExpressPayload builds the payload for the coachee
// RegisterStripeExpress endpoint from CLI flags.
func BuildRegisterStripeExpressPayload(coacheeRegisterStripeExpressBody string, coacheeRegisterStripeExpressID string) (*coachee.RegisterStripeExpressPayload, error) {
	var err error
	var body RegisterStripeExpressRequestBody
	{
		err = json.Unmarshal([]byte(coacheeRegisterStripeExpressBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"authorizationCode\": \"Et dignissimos quae voluptatem voluptate rem dolor.\"\n   }'")
		}
	}
	var id uint
	{
		var v uint64
		v, err = strconv.ParseUint(coacheeRegisterStripeExpressID, 10, 64)
		id = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT")
		}
	}
	v := &coachee.RegisterStripeExpressPayload{
		AuthorizationCode: body.AuthorizationCode,
	}
	v.ID = id
	return v, nil
}
