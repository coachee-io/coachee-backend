// Code generated by goa v3.0.7, DO NOT EDIT.
//
// coachee HTTP client CLI support package
//
// Command:
// $ goa gen coachee-backend/design

package client

import (
	coachee "coachee-backend/gen/coachee"
	"encoding/json"
	"fmt"
	"strconv"

	goa "goa.design/goa/v3/pkg"
)

// BuildGetCoachesPayload builds the payload for the coachee GetCoaches
// endpoint from CLI flags.
func BuildGetCoachesPayload(coacheeGetCoachesTag string, coacheeGetCoachesLimit string, coacheeGetCoachesPage string) (*coachee.GetCoachesPayload, error) {
	var err error
	var tag *string
	{
		if coacheeGetCoachesTag != "" {
			tag = &coacheeGetCoachesTag
		}
	}
	var limit *uint
	{
		if coacheeGetCoachesLimit != "" {
			var v uint64
			v, err = strconv.ParseUint(coacheeGetCoachesLimit, 10, 64)
			val := uint(v)
			limit = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for limit, must be UINT")
			}
		}
	}
	var page *uint
	{
		if coacheeGetCoachesPage != "" {
			var v uint64
			v, err = strconv.ParseUint(coacheeGetCoachesPage, 10, 64)
			val := uint(v)
			page = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for page, must be UINT")
			}
		}
	}
	payload := &coachee.GetCoachesPayload{
		Tag:   tag,
		Limit: limit,
		Page:  page,
	}
	return payload, nil
}

// BuildGetCoachPayload builds the payload for the coachee GetCoach endpoint
// from CLI flags.
func BuildGetCoachPayload(coacheeGetCoachID string) (*coachee.GetCoachPayload, error) {
	var err error
	var id uint
	{
		var v uint64
		v, err = strconv.ParseUint(coacheeGetCoachID, 10, 64)
		id = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT")
		}
	}
	payload := &coachee.GetCoachPayload{
		ID: id,
	}
	return payload, nil
}

// BuildLenCoachesPayload builds the payload for the coachee LenCoaches
// endpoint from CLI flags.
func BuildLenCoachesPayload(coacheeLenCoachesTag string) (*coachee.LenCoachesPayload, error) {
	var tag string
	{
		tag = coacheeLenCoachesTag
	}
	payload := &coachee.LenCoachesPayload{
		Tag: tag,
	}
	return payload, nil
}

// BuildCreateCoachPayload builds the payload for the coachee CreateCoach
// endpoint from CLI flags.
func BuildCreateCoachPayload(coacheeCreateCoachBody string) (*coachee.CreateCoachPayload, error) {
	var err error
	var body CreateCoachRequestBody
	{
		err = json.Unmarshal([]byte(coacheeCreateCoachBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"city\": \"Quia sit est enim unde illo dolorem.\",\n      \"country\": \"Cum et magnam.\",\n      \"description\": \"Est culpa.\",\n      \"email\": \"Doloribus culpa amet dolor sunt eos illo.\",\n      \"firstName\": \"Omnis debitis omnis in aperiam quia.\",\n      \"introCall\": 8909263196681236987,\n      \"lastName\": \"Facilis dolorem debitis assumenda ipsum eligendi.\",\n      \"phone\": \"Quia blanditiis doloribus nam facilis.\",\n      \"tags\": \"Veritatis aut.\",\n      \"textAvailability\": \"Tenetur rerum nulla optio quisquam.\",\n      \"textCertifications\": \"Sint et voluptates tenetur in ut qui.\",\n      \"textPrograms\": \"Quidem qui accusamus mollitia.\",\n      \"vat\": \"Harum facere ipsa voluptate.\"\n   }'")
		}
	}
	v := &coachee.CreateCoachPayload{
		FirstName:          body.FirstName,
		LastName:           body.LastName,
		Email:              body.Email,
		Phone:              body.Phone,
		Tags:               body.Tags,
		Description:        body.Description,
		City:               body.City,
		Country:            body.Country,
		IntroCall:          body.IntroCall,
		TextCertifications: body.TextCertifications,
		TextPrograms:       body.TextPrograms,
		TextAvailability:   body.TextAvailability,
		Vat:                body.Vat,
	}
	return v, nil
}

// BuildUpdateCoachPayload builds the payload for the coachee UpdateCoach
// endpoint from CLI flags.
func BuildUpdateCoachPayload(coacheeUpdateCoachBody string, coacheeUpdateCoachID string) (*coachee.UpdateCoachPayload, error) {
	var err error
	var body UpdateCoachRequestBody
	{
		err = json.Unmarshal([]byte(coacheeUpdateCoachBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"city\": \"Iusto incidunt odio.\",\n      \"country\": \"Quo incidunt ad recusandae quam.\",\n      \"description\": \"Eum et et.\",\n      \"email\": \"Ut inventore fugit.\",\n      \"firstName\": \"Voluptatem repellat.\",\n      \"introCall\": 2484851915066860437,\n      \"lastName\": \"Autem voluptatem.\",\n      \"phone\": \"Delectus culpa doloremque aliquid.\",\n      \"pictureURL\": \"Vero autem magnam rerum ut autem harum.\",\n      \"stripeID\": \"Facilis qui rerum laborum sapiente quae magnam.\",\n      \"tags\": \"Tempora iure id aspernatur nam esse.\",\n      \"vat\": \"Beatae vel repellat id aperiam.\"\n   }'")
		}
	}
	var id uint
	{
		var v uint64
		v, err = strconv.ParseUint(coacheeUpdateCoachID, 10, 64)
		id = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT")
		}
	}
	v := &coachee.UpdateCoachPayload{
		FirstName:   body.FirstName,
		LastName:    body.LastName,
		Email:       body.Email,
		Phone:       body.Phone,
		Tags:        body.Tags,
		Description: body.Description,
		City:        body.City,
		Country:     body.Country,
		IntroCall:   body.IntroCall,
		StripeID:    body.StripeID,
		PictureURL:  body.PictureURL,
		Vat:         body.Vat,
	}
	v.ID = id
	return v, nil
}

// BuildCreateCertificationPayload builds the payload for the coachee
// CreateCertification endpoint from CLI flags.
func BuildCreateCertificationPayload(coacheeCreateCertificationBody string, coacheeCreateCertificationID string) (*coachee.CreateCertificationPayload, error) {
	var err error
	var body CreateCertificationRequestBody
	{
		err = json.Unmarshal([]byte(coacheeCreateCertificationBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"certification\": {\n         \"description\": \"Ut qui laboriosam id.\",\n         \"id\": \"Sit sit accusantium neque ad enim.\",\n         \"institution\": \"Recusandae ab sint.\",\n         \"month\": 2,\n         \"title\": \"Iste assumenda.\",\n         \"year\": 2026\n      }\n   }'")
		}
		if body.Certification == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("certification", "body"))
		}
		if body.Certification != nil {
			if err2 := ValidateCertificationRequestBody(body.Certification); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var id uint
	{
		var v uint64
		v, err = strconv.ParseUint(coacheeCreateCertificationID, 10, 64)
		id = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT")
		}
	}
	v := &coachee.CreateCertificationPayload{}
	if body.Certification != nil {
		v.Certification = marshalCertificationRequestBodyToCoacheeCertification(body.Certification)
	}
	v.ID = id
	return v, nil
}

// BuildDeleteCertificationPayload builds the payload for the coachee
// DeleteCertification endpoint from CLI flags.
func BuildDeleteCertificationPayload(coacheeDeleteCertificationID string, coacheeDeleteCertificationCertID string) (*coachee.DeleteCertificationPayload, error) {
	var err error
	var id uint
	{
		var v uint64
		v, err = strconv.ParseUint(coacheeDeleteCertificationID, 10, 64)
		id = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT")
		}
	}
	var certID string
	{
		certID = coacheeDeleteCertificationCertID
	}
	payload := &coachee.DeleteCertificationPayload{
		ID:     id,
		CertID: certID,
	}
	return payload, nil
}

// BuildCreateProgramPayload builds the payload for the coachee CreateProgram
// endpoint from CLI flags.
func BuildCreateProgramPayload(coacheeCreateProgramBody string, coacheeCreateProgramID string) (*coachee.CreateProgramPayload, error) {
	var err error
	var body CreateProgramRequestBody
	{
		err = json.Unmarshal([]byte(coacheeCreateProgramBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"program\": {\n         \"description\": \"Repellendus alias velit eveniet soluta.\",\n         \"duration\": 6103343100881137032,\n         \"id\": \"Consectetur in consequatur labore esse aut soluta.\",\n         \"name\": \"Labore tempora fugit et.\",\n         \"sessions\": 17501346860314557738,\n         \"taxPercent\": 8905936226137563789,\n         \"totalPrice\": 6575205625408737613\n      }\n   }'")
		}
		if body.Program == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("program", "body"))
		}
		if err != nil {
			return nil, err
		}
	}
	var id uint
	{
		var v uint64
		v, err = strconv.ParseUint(coacheeCreateProgramID, 10, 64)
		id = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT")
		}
	}
	v := &coachee.CreateProgramPayload{}
	if body.Program != nil {
		v.Program = marshalProgramRequestBodyToCoacheeProgram(body.Program)
	}
	v.ID = id
	return v, nil
}

// BuildDeleteProgramPayload builds the payload for the coachee DeleteProgram
// endpoint from CLI flags.
func BuildDeleteProgramPayload(coacheeDeleteProgramID string, coacheeDeleteProgramProgramID string) (*coachee.DeleteProgramPayload, error) {
	var err error
	var id uint
	{
		var v uint64
		v, err = strconv.ParseUint(coacheeDeleteProgramID, 10, 64)
		id = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT")
		}
	}
	var programID string
	{
		programID = coacheeDeleteProgramProgramID
	}
	payload := &coachee.DeleteProgramPayload{
		ID:        id,
		ProgramID: programID,
	}
	return payload, nil
}

// BuildCreateAvailabilityPayload builds the payload for the coachee
// CreateAvailability endpoint from CLI flags.
func BuildCreateAvailabilityPayload(coacheeCreateAvailabilityBody string, coacheeCreateAvailabilityID string) (*coachee.CreateAvailabilityPayload, error) {
	var err error
	var body CreateAvailabilityRequestBody
	{
		err = json.Unmarshal([]byte(coacheeCreateAvailabilityBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"availability\": {\n         \"end\": 1137,\n         \"id\": \"Odio minima repudiandae.\",\n         \"start\": 39,\n         \"weekDay\": 0\n      }\n   }'")
		}
		if body.Availability == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("availability", "body"))
		}
		if body.Availability != nil {
			if err2 := ValidateAvailabilityRequestBody(body.Availability); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var id uint
	{
		var v uint64
		v, err = strconv.ParseUint(coacheeCreateAvailabilityID, 10, 64)
		id = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT")
		}
	}
	v := &coachee.CreateAvailabilityPayload{}
	if body.Availability != nil {
		v.Availability = marshalAvailabilityRequestBodyToCoacheeAvailability(body.Availability)
	}
	v.ID = id
	return v, nil
}

// BuildDeleteAvailabilityPayload builds the payload for the coachee
// DeleteAvailability endpoint from CLI flags.
func BuildDeleteAvailabilityPayload(coacheeDeleteAvailabilityID string, coacheeDeleteAvailabilityAvID string) (*coachee.DeleteAvailabilityPayload, error) {
	var err error
	var id uint
	{
		var v uint64
		v, err = strconv.ParseUint(coacheeDeleteAvailabilityID, 10, 64)
		id = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT")
		}
	}
	var avID string
	{
		avID = coacheeDeleteAvailabilityAvID
	}
	payload := &coachee.DeleteAvailabilityPayload{
		ID:   id,
		AvID: avID,
	}
	return payload, nil
}

// BuildCreateCustomerPayload builds the payload for the coachee CreateCustomer
// endpoint from CLI flags.
func BuildCreateCustomerPayload(coacheeCreateCustomerBody string) (*coachee.CreateCustomerPayload, error) {
	var err error
	var body CreateCustomerRequestBody
	{
		err = json.Unmarshal([]byte(coacheeCreateCustomerBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"birthDate\": 3385436270829203418,\n      \"email\": \"Voluptatum nulla assumenda distinctio.\",\n      \"firstName\": \"Neque quis sunt esse placeat consequatur.\",\n      \"lastName\": \"Dolorem quo.\",\n      \"password\": \"Reprehenderit exercitationem est dolores harum eius.\"\n   }'")
		}
	}
	v := &coachee.CreateCustomerPayload{
		Email:     body.Email,
		FirstName: body.FirstName,
		LastName:  body.LastName,
		BirthDate: body.BirthDate,
		Password:  body.Password,
	}
	return v, nil
}

// BuildCustomerLoginPayload builds the payload for the coachee CustomerLogin
// endpoint from CLI flags.
func BuildCustomerLoginPayload(coacheeCustomerLoginBody string) (*coachee.CustomerLoginPayload, error) {
	var err error
	var body CustomerLoginRequestBody
	{
		err = json.Unmarshal([]byte(coacheeCustomerLoginBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"email\": \"Sit dolor.\",\n      \"password\": \"Et sint sit laboriosam tempora modi facere.\"\n   }'")
		}
	}
	v := &coachee.CustomerLoginPayload{
		Email:    body.Email,
		Password: body.Password,
	}
	return v, nil
}

// BuildCreateOrderPayload builds the payload for the coachee CreateOrder
// endpoint from CLI flags.
func BuildCreateOrderPayload(coacheeCreateOrderBody string, coacheeCreateOrderToken string) (*coachee.CreateOrderPayload, error) {
	var err error
	var body CreateOrderRequestBody
	{
		err = json.Unmarshal([]byte(coacheeCreateOrderBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"coachId\": 11357658429475809902,\n      \"introCall\": 8387831286000968232,\n      \"programId\": \"In enim quo commodi quia nihil.\"\n   }'")
		}
	}
	var token string
	{
		token = coacheeCreateOrderToken
	}
	v := &coachee.CreateOrderPayload{
		CoachID:   body.CoachID,
		ProgramID: body.ProgramID,
		IntroCall: body.IntroCall,
	}
	v.Token = token
	return v, nil
}
