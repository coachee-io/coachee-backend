// Code generated by goa v3.0.7, DO NOT EDIT.
//
// coachee client HTTP transport
//
// Command:
// $ goa gen coachee-backend/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the coachee service endpoint HTTP clients.
type Client struct {
	// GetCoaches Doer is the HTTP client used to make requests to the GetCoaches
	// endpoint.
	GetCoachesDoer goahttp.Doer

	// CreateCoach Doer is the HTTP client used to make requests to the CreateCoach
	// endpoint.
	CreateCoachDoer goahttp.Doer

	// UpdateCoach Doer is the HTTP client used to make requests to the UpdateCoach
	// endpoint.
	UpdateCoachDoer goahttp.Doer

	// CreateCertification Doer is the HTTP client used to make requests to the
	// CreateCertification endpoint.
	CreateCertificationDoer goahttp.Doer

	// DeleteCertification Doer is the HTTP client used to make requests to the
	// DeleteCertification endpoint.
	DeleteCertificationDoer goahttp.Doer

	// CreateProgram Doer is the HTTP client used to make requests to the
	// CreateProgram endpoint.
	CreateProgramDoer goahttp.Doer

	// DeleteProgram Doer is the HTTP client used to make requests to the
	// DeleteProgram endpoint.
	DeleteProgramDoer goahttp.Doer

	// CreateAvailability Doer is the HTTP client used to make requests to the
	// CreateAvailability endpoint.
	CreateAvailabilityDoer goahttp.Doer

	// DeleteAvailability Doer is the HTTP client used to make requests to the
	// DeleteAvailability endpoint.
	DeleteAvailabilityDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the coachee service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		GetCoachesDoer:          doer,
		CreateCoachDoer:         doer,
		UpdateCoachDoer:         doer,
		CreateCertificationDoer: doer,
		DeleteCertificationDoer: doer,
		CreateProgramDoer:       doer,
		DeleteProgramDoer:       doer,
		CreateAvailabilityDoer:  doer,
		DeleteAvailabilityDoer:  doer,
		RestoreResponseBody:     restoreBody,
		scheme:                  scheme,
		host:                    host,
		decoder:                 dec,
		encoder:                 enc,
	}
}

// GetCoaches returns an endpoint that makes HTTP requests to the coachee
// service GetCoaches server.
func (c *Client) GetCoaches() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetCoachesRequest(c.encoder)
		decodeResponse = DecodeGetCoachesResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetCoachesRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetCoachesDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("coachee", "GetCoaches", err)
		}
		return decodeResponse(resp)
	}
}

// CreateCoach returns an endpoint that makes HTTP requests to the coachee
// service CreateCoach server.
func (c *Client) CreateCoach() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateCoachRequest(c.encoder)
		decodeResponse = DecodeCreateCoachResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildCreateCoachRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateCoachDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("coachee", "CreateCoach", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateCoach returns an endpoint that makes HTTP requests to the coachee
// service UpdateCoach server.
func (c *Client) UpdateCoach() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateCoachRequest(c.encoder)
		decodeResponse = DecodeUpdateCoachResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildUpdateCoachRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateCoachDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("coachee", "UpdateCoach", err)
		}
		return decodeResponse(resp)
	}
}

// CreateCertification returns an endpoint that makes HTTP requests to the
// coachee service CreateCertification server.
func (c *Client) CreateCertification() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateCertificationRequest(c.encoder)
		decodeResponse = DecodeCreateCertificationResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildCreateCertificationRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateCertificationDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("coachee", "CreateCertification", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteCertification returns an endpoint that makes HTTP requests to the
// coachee service DeleteCertification server.
func (c *Client) DeleteCertification() goa.Endpoint {
	var (
		decodeResponse = DecodeDeleteCertificationResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildDeleteCertificationRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteCertificationDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("coachee", "DeleteCertification", err)
		}
		return decodeResponse(resp)
	}
}

// CreateProgram returns an endpoint that makes HTTP requests to the coachee
// service CreateProgram server.
func (c *Client) CreateProgram() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateProgramRequest(c.encoder)
		decodeResponse = DecodeCreateProgramResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildCreateProgramRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateProgramDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("coachee", "CreateProgram", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteProgram returns an endpoint that makes HTTP requests to the coachee
// service DeleteProgram server.
func (c *Client) DeleteProgram() goa.Endpoint {
	var (
		decodeResponse = DecodeDeleteProgramResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildDeleteProgramRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteProgramDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("coachee", "DeleteProgram", err)
		}
		return decodeResponse(resp)
	}
}

// CreateAvailability returns an endpoint that makes HTTP requests to the
// coachee service CreateAvailability server.
func (c *Client) CreateAvailability() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateAvailabilityRequest(c.encoder)
		decodeResponse = DecodeCreateAvailabilityResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildCreateAvailabilityRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateAvailabilityDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("coachee", "CreateAvailability", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteAvailability returns an endpoint that makes HTTP requests to the
// coachee service DeleteAvailability server.
func (c *Client) DeleteAvailability() goa.Endpoint {
	var (
		decodeResponse = DecodeDeleteAvailabilityResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildDeleteAvailabilityRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteAvailabilityDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("coachee", "DeleteAvailability", err)
		}
		return decodeResponse(resp)
	}
}
