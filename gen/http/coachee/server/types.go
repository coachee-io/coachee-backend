// Code generated by goa v3.0.9, DO NOT EDIT.
//
// coachee HTTP server types
//
// Command:
// $ goa gen coachee-backend/design

package server

import (
	coachee "coachee-backend/gen/coachee"

	goa "goa.design/goa/v3/pkg"
)

// CreateCoachRequestBody is the type of the "coachee" service "CreateCoach"
// endpoint HTTP request body.
type CreateCoachRequestBody struct {
	FirstName          *string `form:"firstName,omitempty" json:"firstName,omitempty" xml:"firstName,omitempty"`
	LastName           *string `form:"lastName,omitempty" json:"lastName,omitempty" xml:"lastName,omitempty"`
	Email              *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	Password           *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
	Phone              *string `form:"phone,omitempty" json:"phone,omitempty" xml:"phone,omitempty"`
	Tags               *string `form:"tags,omitempty" json:"tags,omitempty" xml:"tags,omitempty"`
	Description        *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	City               *string `form:"city,omitempty" json:"city,omitempty" xml:"city,omitempty"`
	Country            *string `form:"country,omitempty" json:"country,omitempty" xml:"country,omitempty"`
	IntroCall          *uint   `form:"introCall,omitempty" json:"introCall,omitempty" xml:"introCall,omitempty"`
	TextCertifications *string `form:"textCertifications,omitempty" json:"textCertifications,omitempty" xml:"textCertifications,omitempty"`
	TextPrograms       *string `form:"textPrograms,omitempty" json:"textPrograms,omitempty" xml:"textPrograms,omitempty"`
	TextAvailability   *string `form:"textAvailability,omitempty" json:"textAvailability,omitempty" xml:"textAvailability,omitempty"`
	Vat                *string `form:"vat,omitempty" json:"vat,omitempty" xml:"vat,omitempty"`
	AcceptTerms        *bool   `form:"acceptTerms,omitempty" json:"acceptTerms,omitempty" xml:"acceptTerms,omitempty"`
}

// LoginCoachRequestBody is the type of the "coachee" service "LoginCoach"
// endpoint HTTP request body.
type LoginCoachRequestBody struct {
	Email    *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// StartCoachPasswordRecoveryFlowRequestBody is the type of the "coachee"
// service "StartCoachPasswordRecoveryFlow" endpoint HTTP request body.
type StartCoachPasswordRecoveryFlowRequestBody struct {
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
}

// FinalizeCoachPasswordRecoveryFlowRequestBody is the type of the "coachee"
// service "FinalizeCoachPasswordRecoveryFlow" endpoint HTTP request body.
type FinalizeCoachPasswordRecoveryFlowRequestBody struct {
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// UpdateCoachRequestBody is the type of the "coachee" service "UpdateCoach"
// endpoint HTTP request body.
type UpdateCoachRequestBody struct {
	FirstName         *string `form:"firstName,omitempty" json:"firstName,omitempty" xml:"firstName,omitempty"`
	LastName          *string `form:"lastName,omitempty" json:"lastName,omitempty" xml:"lastName,omitempty"`
	Email             *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	Phone             *string `form:"phone,omitempty" json:"phone,omitempty" xml:"phone,omitempty"`
	Tags              *string `form:"tags,omitempty" json:"tags,omitempty" xml:"tags,omitempty"`
	Description       *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	City              *string `form:"city,omitempty" json:"city,omitempty" xml:"city,omitempty"`
	Country           *string `form:"country,omitempty" json:"country,omitempty" xml:"country,omitempty"`
	IntroCall         *uint   `form:"introCall,omitempty" json:"introCall,omitempty" xml:"introCall,omitempty"`
	StripeID          *string `form:"stripeID,omitempty" json:"stripeID,omitempty" xml:"stripeID,omitempty"`
	PictureURL        *string `form:"pictureURL,omitempty" json:"pictureURL,omitempty" xml:"pictureURL,omitempty"`
	Vat               *string `form:"vat,omitempty" json:"vat,omitempty" xml:"vat,omitempty"`
	Status            *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	FirstCallDuration *int32  `form:"firstCallDuration,omitempty" json:"firstCallDuration,omitempty" xml:"firstCallDuration,omitempty"`
	VideoURL          *string `form:"videoURL,omitempty" json:"videoURL,omitempty" xml:"videoURL,omitempty"`
	CardDescription   *string `form:"cardDescription,omitempty" json:"cardDescription,omitempty" xml:"cardDescription,omitempty"`
}

// CreateCertificationRequestBody is the type of the "coachee" service
// "CreateCertification" endpoint HTTP request body.
type CreateCertificationRequestBody struct {
	Certification *CertificationRequestBody `form:"certification,omitempty" json:"certification,omitempty" xml:"certification,omitempty"`
}

// CreateProgramRequestBody is the type of the "coachee" service
// "CreateProgram" endpoint HTTP request body.
type CreateProgramRequestBody struct {
	Program *ProgramRequestBody `form:"program,omitempty" json:"program,omitempty" xml:"program,omitempty"`
}

// CreateAvailabilityRequestBody is the type of the "coachee" service
// "CreateAvailability" endpoint HTTP request body.
type CreateAvailabilityRequestBody struct {
	WeekDay *uint `form:"weekDay,omitempty" json:"weekDay,omitempty" xml:"weekDay,omitempty"`
	Start   *uint `form:"start,omitempty" json:"start,omitempty" xml:"start,omitempty"`
	End     *uint `form:"end,omitempty" json:"end,omitempty" xml:"end,omitempty"`
}

// CreateCustomerRequestBody is the type of the "coachee" service
// "CreateCustomer" endpoint HTTP request body.
type CreateCustomerRequestBody struct {
	Email       *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	FirstName   *string `form:"firstName,omitempty" json:"firstName,omitempty" xml:"firstName,omitempty"`
	LastName    *string `form:"lastName,omitempty" json:"lastName,omitempty" xml:"lastName,omitempty"`
	Password    *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
	AcceptTerms *bool   `form:"acceptTerms,omitempty" json:"acceptTerms,omitempty" xml:"acceptTerms,omitempty"`
}

// CustomerLoginRequestBody is the type of the "coachee" service
// "CustomerLogin" endpoint HTTP request body.
type CustomerLoginRequestBody struct {
	Email    *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// StartPasswordRecoveryFlowRequestBody is the type of the "coachee" service
// "StartPasswordRecoveryFlow" endpoint HTTP request body.
type StartPasswordRecoveryFlowRequestBody struct {
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
}

// FinalizePasswordRecoveryFlowRequestBody is the type of the "coachee" service
// "FinalizePasswordRecoveryFlow" endpoint HTTP request body.
type FinalizePasswordRecoveryFlowRequestBody struct {
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// CreateOrderRequestBody is the type of the "coachee" service "CreateOrder"
// endpoint HTTP request body.
type CreateOrderRequestBody struct {
	CoachID   *uint   `form:"coachId,omitempty" json:"coachId,omitempty" xml:"coachId,omitempty"`
	ProgramID *string `form:"programId,omitempty" json:"programId,omitempty" xml:"programId,omitempty"`
	IntroCall *int64  `form:"introCall,omitempty" json:"introCall,omitempty" xml:"introCall,omitempty"`
}

// RegisterStripeExpressRequestBody is the type of the "coachee" service
// "RegisterStripeExpress" endpoint HTTP request body.
type RegisterStripeExpressRequestBody struct {
	AuthorizationCode *string `form:"authorizationCode,omitempty" json:"authorizationCode,omitempty" xml:"authorizationCode,omitempty"`
}

// AdminLoginRequestBody is the type of the "coachee" service "AdminLogin"
// endpoint HTTP request body.
type AdminLoginRequestBody struct {
	Email    *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// GetCoachesResponseBody is the type of the "coachee" service "GetCoaches"
// endpoint HTTP response body.
type GetCoachesResponseBody []*CoachResponse

// GetCoachResponseBody is the type of the "coachee" service "GetCoach"
// endpoint HTTP response body.
type GetCoachResponseBody struct {
	ID                uint                         `form:"id" json:"id" xml:"id"`
	FirstName         string                       `form:"firstName" json:"firstName" xml:"firstName"`
	LastName          string                       `form:"lastName" json:"lastName" xml:"lastName"`
	Tags              string                       `form:"tags" json:"tags" xml:"tags"`
	Description       string                       `form:"description" json:"description" xml:"description"`
	City              string                       `form:"city" json:"city" xml:"city"`
	Country           string                       `form:"country" json:"country" xml:"country"`
	PictureURL        string                       `form:"pictureURL" json:"pictureURL" xml:"pictureURL"`
	FirstCallDuration int32                        `form:"firstCallDuration" json:"firstCallDuration" xml:"firstCallDuration"`
	Certifications    []*CertificationResponseBody `form:"certifications,omitempty" json:"certifications,omitempty" xml:"certifications,omitempty"`
	Programs          []*ProgramResponseBody       `form:"programs,omitempty" json:"programs,omitempty" xml:"programs,omitempty"`
	Availability      []*AvailabilityResponseBody  `form:"availability,omitempty" json:"availability,omitempty" xml:"availability,omitempty"`
	VideoURL          string                       `form:"videoURL" json:"videoURL" xml:"videoURL"`
	CardDescription   string                       `form:"cardDescription" json:"cardDescription" xml:"cardDescription"`
}

// AdminGetCoachResponseBody is the type of the "coachee" service
// "AdminGetCoach" endpoint HTTP response body.
type AdminGetCoachResponseBody struct {
	ID                uint                         `form:"id" json:"id" xml:"id"`
	FirstName         string                       `form:"firstName" json:"firstName" xml:"firstName"`
	LastName          string                       `form:"lastName" json:"lastName" xml:"lastName"`
	Email             string                       `form:"email" json:"email" xml:"email"`
	Phone             string                       `form:"phone" json:"phone" xml:"phone"`
	StripeID          string                       `form:"stripeID" json:"stripeID" xml:"stripeID"`
	Tags              string                       `form:"tags" json:"tags" xml:"tags"`
	Description       string                       `form:"description" json:"description" xml:"description"`
	City              string                       `form:"city" json:"city" xml:"city"`
	Country           string                       `form:"country" json:"country" xml:"country"`
	PictureURL        string                       `form:"pictureURL" json:"pictureURL" xml:"pictureURL"`
	Status            string                       `form:"status" json:"status" xml:"status"`
	Vat               string                       `form:"vat" json:"vat" xml:"vat"`
	IntroCall         int                          `form:"introCall" json:"introCall" xml:"introCall"`
	FirstCallDuration int32                        `form:"firstCallDuration" json:"firstCallDuration" xml:"firstCallDuration"`
	VideoURL          string                       `form:"videoURL" json:"videoURL" xml:"videoURL"`
	CardDescription   string                       `form:"cardDescription" json:"cardDescription" xml:"cardDescription"`
	Availability      []*AvailabilityResponseBody  `form:"availability" json:"availability" xml:"availability"`
	Certifications    []*CertificationResponseBody `form:"certifications" json:"certifications" xml:"certifications"`
	Programs          []*ProgramResponseBody       `form:"programs" json:"programs" xml:"programs"`
}

// LoginCoachResponseBody is the type of the "coachee" service "LoginCoach"
// endpoint HTTP response body.
type LoginCoachResponseBody struct {
	URL string `form:"url" json:"url" xml:"url"`
}

// CreateCustomerResponseBody is the type of the "coachee" service
// "CreateCustomer" endpoint HTTP response body.
type CreateCustomerResponseBody struct {
	Token  string                  `form:"token" json:"token" xml:"token"`
	Expiry int64                   `form:"expiry" json:"expiry" xml:"expiry"`
	User   *BaseClientResponseBody `form:"user" json:"user" xml:"user"`
}

// CustomerLoginResponseBody is the type of the "coachee" service
// "CustomerLogin" endpoint HTTP response body.
type CustomerLoginResponseBody struct {
	Token  string                  `form:"token" json:"token" xml:"token"`
	Expiry int64                   `form:"expiry" json:"expiry" xml:"expiry"`
	User   *BaseClientResponseBody `form:"user" json:"user" xml:"user"`
}

// CreateOrderResponseBody is the type of the "coachee" service "CreateOrder"
// endpoint HTTP response body.
type CreateOrderResponseBody struct {
	ClientSecret  string `form:"clientSecret" json:"clientSecret" xml:"clientSecret"`
	PublishingKey string `form:"publishingKey" json:"publishingKey" xml:"publishingKey"`
}

// AdminLoginResponseBody is the type of the "coachee" service "AdminLogin"
// endpoint HTTP response body.
type AdminLoginResponseBody struct {
	Token  string `form:"token" json:"token" xml:"token"`
	Expiry int64  `form:"expiry" json:"expiry" xml:"expiry"`
}

// StripeWebhooksInternalResponseBody is the type of the "coachee" service
// "StripeWebhooks" endpoint HTTP response body for the "internal" error.
type StripeWebhooksInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// StripeWebhooksTransientResponseBody is the type of the "coachee" service
// "StripeWebhooks" endpoint HTTP response body for the "transient" error.
type StripeWebhooksTransientResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// StripeWebhooksNotFoundResponseBody is the type of the "coachee" service
// "StripeWebhooks" endpoint HTTP response body for the "notFound" error.
type StripeWebhooksNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// StripeWebhooksValidationResponseBody is the type of the "coachee" service
// "StripeWebhooks" endpoint HTTP response body for the "validation" error.
type StripeWebhooksValidationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// StripeWebhooksUnauthorizedResponseBody is the type of the "coachee" service
// "StripeWebhooks" endpoint HTTP response body for the "unauthorized" error.
type StripeWebhooksUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetCoachesInternalResponseBody is the type of the "coachee" service
// "GetCoaches" endpoint HTTP response body for the "internal" error.
type GetCoachesInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetCoachesTransientResponseBody is the type of the "coachee" service
// "GetCoaches" endpoint HTTP response body for the "transient" error.
type GetCoachesTransientResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetCoachesNotFoundResponseBody is the type of the "coachee" service
// "GetCoaches" endpoint HTTP response body for the "notFound" error.
type GetCoachesNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetCoachesValidationResponseBody is the type of the "coachee" service
// "GetCoaches" endpoint HTTP response body for the "validation" error.
type GetCoachesValidationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetCoachesUnauthorizedResponseBody is the type of the "coachee" service
// "GetCoaches" endpoint HTTP response body for the "unauthorized" error.
type GetCoachesUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetCoachInternalResponseBody is the type of the "coachee" service "GetCoach"
// endpoint HTTP response body for the "internal" error.
type GetCoachInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetCoachTransientResponseBody is the type of the "coachee" service
// "GetCoach" endpoint HTTP response body for the "transient" error.
type GetCoachTransientResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetCoachNotFoundResponseBody is the type of the "coachee" service "GetCoach"
// endpoint HTTP response body for the "notFound" error.
type GetCoachNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetCoachValidationResponseBody is the type of the "coachee" service
// "GetCoach" endpoint HTTP response body for the "validation" error.
type GetCoachValidationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetCoachUnauthorizedResponseBody is the type of the "coachee" service
// "GetCoach" endpoint HTTP response body for the "unauthorized" error.
type GetCoachUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AdminGetCoachInternalResponseBody is the type of the "coachee" service
// "AdminGetCoach" endpoint HTTP response body for the "internal" error.
type AdminGetCoachInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AdminGetCoachTransientResponseBody is the type of the "coachee" service
// "AdminGetCoach" endpoint HTTP response body for the "transient" error.
type AdminGetCoachTransientResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AdminGetCoachNotFoundResponseBody is the type of the "coachee" service
// "AdminGetCoach" endpoint HTTP response body for the "notFound" error.
type AdminGetCoachNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AdminGetCoachValidationResponseBody is the type of the "coachee" service
// "AdminGetCoach" endpoint HTTP response body for the "validation" error.
type AdminGetCoachValidationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AdminGetCoachUnauthorizedResponseBody is the type of the "coachee" service
// "AdminGetCoach" endpoint HTTP response body for the "unauthorized" error.
type AdminGetCoachUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// LenCoachesInternalResponseBody is the type of the "coachee" service
// "LenCoaches" endpoint HTTP response body for the "internal" error.
type LenCoachesInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// LenCoachesTransientResponseBody is the type of the "coachee" service
// "LenCoaches" endpoint HTTP response body for the "transient" error.
type LenCoachesTransientResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// LenCoachesNotFoundResponseBody is the type of the "coachee" service
// "LenCoaches" endpoint HTTP response body for the "notFound" error.
type LenCoachesNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// LenCoachesValidationResponseBody is the type of the "coachee" service
// "LenCoaches" endpoint HTTP response body for the "validation" error.
type LenCoachesValidationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// LenCoachesUnauthorizedResponseBody is the type of the "coachee" service
// "LenCoaches" endpoint HTTP response body for the "unauthorized" error.
type LenCoachesUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateCoachInternalResponseBody is the type of the "coachee" service
// "CreateCoach" endpoint HTTP response body for the "internal" error.
type CreateCoachInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateCoachTransientResponseBody is the type of the "coachee" service
// "CreateCoach" endpoint HTTP response body for the "transient" error.
type CreateCoachTransientResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateCoachNotFoundResponseBody is the type of the "coachee" service
// "CreateCoach" endpoint HTTP response body for the "notFound" error.
type CreateCoachNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateCoachValidationResponseBody is the type of the "coachee" service
// "CreateCoach" endpoint HTTP response body for the "validation" error.
type CreateCoachValidationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateCoachUnauthorizedResponseBody is the type of the "coachee" service
// "CreateCoach" endpoint HTTP response body for the "unauthorized" error.
type CreateCoachUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// LoginCoachInternalResponseBody is the type of the "coachee" service
// "LoginCoach" endpoint HTTP response body for the "internal" error.
type LoginCoachInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// LoginCoachTransientResponseBody is the type of the "coachee" service
// "LoginCoach" endpoint HTTP response body for the "transient" error.
type LoginCoachTransientResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// LoginCoachNotFoundResponseBody is the type of the "coachee" service
// "LoginCoach" endpoint HTTP response body for the "notFound" error.
type LoginCoachNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// LoginCoachValidationResponseBody is the type of the "coachee" service
// "LoginCoach" endpoint HTTP response body for the "validation" error.
type LoginCoachValidationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// LoginCoachUnauthorizedResponseBody is the type of the "coachee" service
// "LoginCoach" endpoint HTTP response body for the "unauthorized" error.
type LoginCoachUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// StartCoachPasswordRecoveryFlowInternalResponseBody is the type of the
// "coachee" service "StartCoachPasswordRecoveryFlow" endpoint HTTP response
// body for the "internal" error.
type StartCoachPasswordRecoveryFlowInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// StartCoachPasswordRecoveryFlowTransientResponseBody is the type of the
// "coachee" service "StartCoachPasswordRecoveryFlow" endpoint HTTP response
// body for the "transient" error.
type StartCoachPasswordRecoveryFlowTransientResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// StartCoachPasswordRecoveryFlowNotFoundResponseBody is the type of the
// "coachee" service "StartCoachPasswordRecoveryFlow" endpoint HTTP response
// body for the "notFound" error.
type StartCoachPasswordRecoveryFlowNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// StartCoachPasswordRecoveryFlowValidationResponseBody is the type of the
// "coachee" service "StartCoachPasswordRecoveryFlow" endpoint HTTP response
// body for the "validation" error.
type StartCoachPasswordRecoveryFlowValidationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// StartCoachPasswordRecoveryFlowUnauthorizedResponseBody is the type of the
// "coachee" service "StartCoachPasswordRecoveryFlow" endpoint HTTP response
// body for the "unauthorized" error.
type StartCoachPasswordRecoveryFlowUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CheckCoachPasswordRecoveryTokenInternalResponseBody is the type of the
// "coachee" service "CheckCoachPasswordRecoveryToken" endpoint HTTP response
// body for the "internal" error.
type CheckCoachPasswordRecoveryTokenInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CheckCoachPasswordRecoveryTokenTransientResponseBody is the type of the
// "coachee" service "CheckCoachPasswordRecoveryToken" endpoint HTTP response
// body for the "transient" error.
type CheckCoachPasswordRecoveryTokenTransientResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CheckCoachPasswordRecoveryTokenNotFoundResponseBody is the type of the
// "coachee" service "CheckCoachPasswordRecoveryToken" endpoint HTTP response
// body for the "notFound" error.
type CheckCoachPasswordRecoveryTokenNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CheckCoachPasswordRecoveryTokenValidationResponseBody is the type of the
// "coachee" service "CheckCoachPasswordRecoveryToken" endpoint HTTP response
// body for the "validation" error.
type CheckCoachPasswordRecoveryTokenValidationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CheckCoachPasswordRecoveryTokenUnauthorizedResponseBody is the type of the
// "coachee" service "CheckCoachPasswordRecoveryToken" endpoint HTTP response
// body for the "unauthorized" error.
type CheckCoachPasswordRecoveryTokenUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// FinalizeCoachPasswordRecoveryFlowInternalResponseBody is the type of the
// "coachee" service "FinalizeCoachPasswordRecoveryFlow" endpoint HTTP response
// body for the "internal" error.
type FinalizeCoachPasswordRecoveryFlowInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// FinalizeCoachPasswordRecoveryFlowTransientResponseBody is the type of the
// "coachee" service "FinalizeCoachPasswordRecoveryFlow" endpoint HTTP response
// body for the "transient" error.
type FinalizeCoachPasswordRecoveryFlowTransientResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// FinalizeCoachPasswordRecoveryFlowNotFoundResponseBody is the type of the
// "coachee" service "FinalizeCoachPasswordRecoveryFlow" endpoint HTTP response
// body for the "notFound" error.
type FinalizeCoachPasswordRecoveryFlowNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// FinalizeCoachPasswordRecoveryFlowValidationResponseBody is the type of the
// "coachee" service "FinalizeCoachPasswordRecoveryFlow" endpoint HTTP response
// body for the "validation" error.
type FinalizeCoachPasswordRecoveryFlowValidationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// FinalizeCoachPasswordRecoveryFlowUnauthorizedResponseBody is the type of the
// "coachee" service "FinalizeCoachPasswordRecoveryFlow" endpoint HTTP response
// body for the "unauthorized" error.
type FinalizeCoachPasswordRecoveryFlowUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateCoachInternalResponseBody is the type of the "coachee" service
// "UpdateCoach" endpoint HTTP response body for the "internal" error.
type UpdateCoachInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateCoachTransientResponseBody is the type of the "coachee" service
// "UpdateCoach" endpoint HTTP response body for the "transient" error.
type UpdateCoachTransientResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateCoachNotFoundResponseBody is the type of the "coachee" service
// "UpdateCoach" endpoint HTTP response body for the "notFound" error.
type UpdateCoachNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateCoachValidationResponseBody is the type of the "coachee" service
// "UpdateCoach" endpoint HTTP response body for the "validation" error.
type UpdateCoachValidationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateCoachUnauthorizedResponseBody is the type of the "coachee" service
// "UpdateCoach" endpoint HTTP response body for the "unauthorized" error.
type UpdateCoachUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateCertificationInternalResponseBody is the type of the "coachee" service
// "CreateCertification" endpoint HTTP response body for the "internal" error.
type CreateCertificationInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateCertificationTransientResponseBody is the type of the "coachee"
// service "CreateCertification" endpoint HTTP response body for the
// "transient" error.
type CreateCertificationTransientResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateCertificationNotFoundResponseBody is the type of the "coachee" service
// "CreateCertification" endpoint HTTP response body for the "notFound" error.
type CreateCertificationNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateCertificationValidationResponseBody is the type of the "coachee"
// service "CreateCertification" endpoint HTTP response body for the
// "validation" error.
type CreateCertificationValidationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateCertificationUnauthorizedResponseBody is the type of the "coachee"
// service "CreateCertification" endpoint HTTP response body for the
// "unauthorized" error.
type CreateCertificationUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteCertificationInternalResponseBody is the type of the "coachee" service
// "DeleteCertification" endpoint HTTP response body for the "internal" error.
type DeleteCertificationInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteCertificationTransientResponseBody is the type of the "coachee"
// service "DeleteCertification" endpoint HTTP response body for the
// "transient" error.
type DeleteCertificationTransientResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteCertificationNotFoundResponseBody is the type of the "coachee" service
// "DeleteCertification" endpoint HTTP response body for the "notFound" error.
type DeleteCertificationNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteCertificationValidationResponseBody is the type of the "coachee"
// service "DeleteCertification" endpoint HTTP response body for the
// "validation" error.
type DeleteCertificationValidationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteCertificationUnauthorizedResponseBody is the type of the "coachee"
// service "DeleteCertification" endpoint HTTP response body for the
// "unauthorized" error.
type DeleteCertificationUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateProgramInternalResponseBody is the type of the "coachee" service
// "CreateProgram" endpoint HTTP response body for the "internal" error.
type CreateProgramInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateProgramTransientResponseBody is the type of the "coachee" service
// "CreateProgram" endpoint HTTP response body for the "transient" error.
type CreateProgramTransientResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateProgramNotFoundResponseBody is the type of the "coachee" service
// "CreateProgram" endpoint HTTP response body for the "notFound" error.
type CreateProgramNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateProgramValidationResponseBody is the type of the "coachee" service
// "CreateProgram" endpoint HTTP response body for the "validation" error.
type CreateProgramValidationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateProgramUnauthorizedResponseBody is the type of the "coachee" service
// "CreateProgram" endpoint HTTP response body for the "unauthorized" error.
type CreateProgramUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteProgramInternalResponseBody is the type of the "coachee" service
// "DeleteProgram" endpoint HTTP response body for the "internal" error.
type DeleteProgramInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteProgramTransientResponseBody is the type of the "coachee" service
// "DeleteProgram" endpoint HTTP response body for the "transient" error.
type DeleteProgramTransientResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteProgramNotFoundResponseBody is the type of the "coachee" service
// "DeleteProgram" endpoint HTTP response body for the "notFound" error.
type DeleteProgramNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteProgramValidationResponseBody is the type of the "coachee" service
// "DeleteProgram" endpoint HTTP response body for the "validation" error.
type DeleteProgramValidationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteProgramUnauthorizedResponseBody is the type of the "coachee" service
// "DeleteProgram" endpoint HTTP response body for the "unauthorized" error.
type DeleteProgramUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateAvailabilityInternalResponseBody is the type of the "coachee" service
// "CreateAvailability" endpoint HTTP response body for the "internal" error.
type CreateAvailabilityInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateAvailabilityTransientResponseBody is the type of the "coachee" service
// "CreateAvailability" endpoint HTTP response body for the "transient" error.
type CreateAvailabilityTransientResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateAvailabilityNotFoundResponseBody is the type of the "coachee" service
// "CreateAvailability" endpoint HTTP response body for the "notFound" error.
type CreateAvailabilityNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateAvailabilityValidationResponseBody is the type of the "coachee"
// service "CreateAvailability" endpoint HTTP response body for the
// "validation" error.
type CreateAvailabilityValidationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateAvailabilityUnauthorizedResponseBody is the type of the "coachee"
// service "CreateAvailability" endpoint HTTP response body for the
// "unauthorized" error.
type CreateAvailabilityUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteAvailabilityInternalResponseBody is the type of the "coachee" service
// "DeleteAvailability" endpoint HTTP response body for the "internal" error.
type DeleteAvailabilityInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteAvailabilityTransientResponseBody is the type of the "coachee" service
// "DeleteAvailability" endpoint HTTP response body for the "transient" error.
type DeleteAvailabilityTransientResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteAvailabilityNotFoundResponseBody is the type of the "coachee" service
// "DeleteAvailability" endpoint HTTP response body for the "notFound" error.
type DeleteAvailabilityNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteAvailabilityValidationResponseBody is the type of the "coachee"
// service "DeleteAvailability" endpoint HTTP response body for the
// "validation" error.
type DeleteAvailabilityValidationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteAvailabilityUnauthorizedResponseBody is the type of the "coachee"
// service "DeleteAvailability" endpoint HTTP response body for the
// "unauthorized" error.
type DeleteAvailabilityUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateCustomerInternalResponseBody is the type of the "coachee" service
// "CreateCustomer" endpoint HTTP response body for the "internal" error.
type CreateCustomerInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateCustomerTransientResponseBody is the type of the "coachee" service
// "CreateCustomer" endpoint HTTP response body for the "transient" error.
type CreateCustomerTransientResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateCustomerNotFoundResponseBody is the type of the "coachee" service
// "CreateCustomer" endpoint HTTP response body for the "notFound" error.
type CreateCustomerNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateCustomerValidationResponseBody is the type of the "coachee" service
// "CreateCustomer" endpoint HTTP response body for the "validation" error.
type CreateCustomerValidationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateCustomerUnauthorizedResponseBody is the type of the "coachee" service
// "CreateCustomer" endpoint HTTP response body for the "unauthorized" error.
type CreateCustomerUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CustomerLoginInternalResponseBody is the type of the "coachee" service
// "CustomerLogin" endpoint HTTP response body for the "internal" error.
type CustomerLoginInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CustomerLoginTransientResponseBody is the type of the "coachee" service
// "CustomerLogin" endpoint HTTP response body for the "transient" error.
type CustomerLoginTransientResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CustomerLoginNotFoundResponseBody is the type of the "coachee" service
// "CustomerLogin" endpoint HTTP response body for the "notFound" error.
type CustomerLoginNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CustomerLoginValidationResponseBody is the type of the "coachee" service
// "CustomerLogin" endpoint HTTP response body for the "validation" error.
type CustomerLoginValidationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CustomerLoginUnauthorizedResponseBody is the type of the "coachee" service
// "CustomerLogin" endpoint HTTP response body for the "unauthorized" error.
type CustomerLoginUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// StartPasswordRecoveryFlowInternalResponseBody is the type of the "coachee"
// service "StartPasswordRecoveryFlow" endpoint HTTP response body for the
// "internal" error.
type StartPasswordRecoveryFlowInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// StartPasswordRecoveryFlowTransientResponseBody is the type of the "coachee"
// service "StartPasswordRecoveryFlow" endpoint HTTP response body for the
// "transient" error.
type StartPasswordRecoveryFlowTransientResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// StartPasswordRecoveryFlowNotFoundResponseBody is the type of the "coachee"
// service "StartPasswordRecoveryFlow" endpoint HTTP response body for the
// "notFound" error.
type StartPasswordRecoveryFlowNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// StartPasswordRecoveryFlowValidationResponseBody is the type of the "coachee"
// service "StartPasswordRecoveryFlow" endpoint HTTP response body for the
// "validation" error.
type StartPasswordRecoveryFlowValidationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// StartPasswordRecoveryFlowUnauthorizedResponseBody is the type of the
// "coachee" service "StartPasswordRecoveryFlow" endpoint HTTP response body
// for the "unauthorized" error.
type StartPasswordRecoveryFlowUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CheckPasswordRecoveryTokenInternalResponseBody is the type of the "coachee"
// service "CheckPasswordRecoveryToken" endpoint HTTP response body for the
// "internal" error.
type CheckPasswordRecoveryTokenInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CheckPasswordRecoveryTokenTransientResponseBody is the type of the "coachee"
// service "CheckPasswordRecoveryToken" endpoint HTTP response body for the
// "transient" error.
type CheckPasswordRecoveryTokenTransientResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CheckPasswordRecoveryTokenNotFoundResponseBody is the type of the "coachee"
// service "CheckPasswordRecoveryToken" endpoint HTTP response body for the
// "notFound" error.
type CheckPasswordRecoveryTokenNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CheckPasswordRecoveryTokenValidationResponseBody is the type of the
// "coachee" service "CheckPasswordRecoveryToken" endpoint HTTP response body
// for the "validation" error.
type CheckPasswordRecoveryTokenValidationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CheckPasswordRecoveryTokenUnauthorizedResponseBody is the type of the
// "coachee" service "CheckPasswordRecoveryToken" endpoint HTTP response body
// for the "unauthorized" error.
type CheckPasswordRecoveryTokenUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// FinalizePasswordRecoveryFlowInternalResponseBody is the type of the
// "coachee" service "FinalizePasswordRecoveryFlow" endpoint HTTP response body
// for the "internal" error.
type FinalizePasswordRecoveryFlowInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// FinalizePasswordRecoveryFlowTransientResponseBody is the type of the
// "coachee" service "FinalizePasswordRecoveryFlow" endpoint HTTP response body
// for the "transient" error.
type FinalizePasswordRecoveryFlowTransientResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// FinalizePasswordRecoveryFlowNotFoundResponseBody is the type of the
// "coachee" service "FinalizePasswordRecoveryFlow" endpoint HTTP response body
// for the "notFound" error.
type FinalizePasswordRecoveryFlowNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// FinalizePasswordRecoveryFlowValidationResponseBody is the type of the
// "coachee" service "FinalizePasswordRecoveryFlow" endpoint HTTP response body
// for the "validation" error.
type FinalizePasswordRecoveryFlowValidationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// FinalizePasswordRecoveryFlowUnauthorizedResponseBody is the type of the
// "coachee" service "FinalizePasswordRecoveryFlow" endpoint HTTP response body
// for the "unauthorized" error.
type FinalizePasswordRecoveryFlowUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateOrderInternalResponseBody is the type of the "coachee" service
// "CreateOrder" endpoint HTTP response body for the "internal" error.
type CreateOrderInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateOrderTransientResponseBody is the type of the "coachee" service
// "CreateOrder" endpoint HTTP response body for the "transient" error.
type CreateOrderTransientResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateOrderNotFoundResponseBody is the type of the "coachee" service
// "CreateOrder" endpoint HTTP response body for the "notFound" error.
type CreateOrderNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateOrderValidationResponseBody is the type of the "coachee" service
// "CreateOrder" endpoint HTTP response body for the "validation" error.
type CreateOrderValidationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateOrderUnauthorizedResponseBody is the type of the "coachee" service
// "CreateOrder" endpoint HTTP response body for the "unauthorized" error.
type CreateOrderUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RegisterStripeExpressInternalResponseBody is the type of the "coachee"
// service "RegisterStripeExpress" endpoint HTTP response body for the
// "internal" error.
type RegisterStripeExpressInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RegisterStripeExpressTransientResponseBody is the type of the "coachee"
// service "RegisterStripeExpress" endpoint HTTP response body for the
// "transient" error.
type RegisterStripeExpressTransientResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RegisterStripeExpressNotFoundResponseBody is the type of the "coachee"
// service "RegisterStripeExpress" endpoint HTTP response body for the
// "notFound" error.
type RegisterStripeExpressNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RegisterStripeExpressValidationResponseBody is the type of the "coachee"
// service "RegisterStripeExpress" endpoint HTTP response body for the
// "validation" error.
type RegisterStripeExpressValidationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RegisterStripeExpressUnauthorizedResponseBody is the type of the "coachee"
// service "RegisterStripeExpress" endpoint HTTP response body for the
// "unauthorized" error.
type RegisterStripeExpressUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AdminLoginInternalResponseBody is the type of the "coachee" service
// "AdminLogin" endpoint HTTP response body for the "internal" error.
type AdminLoginInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AdminLoginTransientResponseBody is the type of the "coachee" service
// "AdminLogin" endpoint HTTP response body for the "transient" error.
type AdminLoginTransientResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AdminLoginNotFoundResponseBody is the type of the "coachee" service
// "AdminLogin" endpoint HTTP response body for the "notFound" error.
type AdminLoginNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AdminLoginValidationResponseBody is the type of the "coachee" service
// "AdminLogin" endpoint HTTP response body for the "validation" error.
type AdminLoginValidationResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AdminLoginUnauthorizedResponseBody is the type of the "coachee" service
// "AdminLogin" endpoint HTTP response body for the "unauthorized" error.
type AdminLoginUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CoachResponse is used to define fields on response body types.
type CoachResponse struct {
	ID                uint                     `form:"id" json:"id" xml:"id"`
	FirstName         string                   `form:"firstName" json:"firstName" xml:"firstName"`
	LastName          string                   `form:"lastName" json:"lastName" xml:"lastName"`
	Tags              string                   `form:"tags" json:"tags" xml:"tags"`
	Description       string                   `form:"description" json:"description" xml:"description"`
	City              string                   `form:"city" json:"city" xml:"city"`
	Country           string                   `form:"country" json:"country" xml:"country"`
	PictureURL        string                   `form:"pictureURL" json:"pictureURL" xml:"pictureURL"`
	FirstCallDuration int32                    `form:"firstCallDuration" json:"firstCallDuration" xml:"firstCallDuration"`
	Certifications    []*CertificationResponse `form:"certifications,omitempty" json:"certifications,omitempty" xml:"certifications,omitempty"`
	Programs          []*ProgramResponse       `form:"programs,omitempty" json:"programs,omitempty" xml:"programs,omitempty"`
	Availability      []*AvailabilityResponse  `form:"availability,omitempty" json:"availability,omitempty" xml:"availability,omitempty"`
	VideoURL          string                   `form:"videoURL" json:"videoURL" xml:"videoURL"`
	CardDescription   string                   `form:"cardDescription" json:"cardDescription" xml:"cardDescription"`
}

// CertificationResponse is used to define fields on response body types.
type CertificationResponse struct {
	ID          *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Title       string  `form:"title" json:"title" xml:"title"`
	Description string  `form:"description" json:"description" xml:"description"`
	Institution string  `form:"institution" json:"institution" xml:"institution"`
	Month       uint    `form:"month" json:"month" xml:"month"`
	Year        uint    `form:"year" json:"year" xml:"year"`
}

// ProgramResponse is used to define fields on response body types.
type ProgramResponse struct {
	ID          *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name        string  `form:"name" json:"name" xml:"name"`
	Sessions    uint    `form:"sessions" json:"sessions" xml:"sessions"`
	Duration    uint    `form:"duration" json:"duration" xml:"duration"`
	Description string  `form:"description" json:"description" xml:"description"`
	TotalPrice  uint    `form:"totalPrice" json:"totalPrice" xml:"totalPrice"`
	TaxPercent  uint    `form:"taxPercent" json:"taxPercent" xml:"taxPercent"`
}

// AvailabilityResponse is used to define fields on response body types.
type AvailabilityResponse struct {
	ID        string  `form:"id" json:"id" xml:"id"`
	WeekDay   uint    `form:"weekDay" json:"weekDay" xml:"weekDay"`
	Start     float64 `form:"start" json:"start" xml:"start"`
	End       float64 `form:"end" json:"end" xml:"end"`
	DateLabel string  `form:"dateLabel" json:"dateLabel" xml:"dateLabel"`
}

// CertificationResponseBody is used to define fields on response body types.
type CertificationResponseBody struct {
	ID          *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Title       string  `form:"title" json:"title" xml:"title"`
	Description string  `form:"description" json:"description" xml:"description"`
	Institution string  `form:"institution" json:"institution" xml:"institution"`
	Month       uint    `form:"month" json:"month" xml:"month"`
	Year        uint    `form:"year" json:"year" xml:"year"`
}

// ProgramResponseBody is used to define fields on response body types.
type ProgramResponseBody struct {
	ID          *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name        string  `form:"name" json:"name" xml:"name"`
	Sessions    uint    `form:"sessions" json:"sessions" xml:"sessions"`
	Duration    uint    `form:"duration" json:"duration" xml:"duration"`
	Description string  `form:"description" json:"description" xml:"description"`
	TotalPrice  uint    `form:"totalPrice" json:"totalPrice" xml:"totalPrice"`
	TaxPercent  uint    `form:"taxPercent" json:"taxPercent" xml:"taxPercent"`
}

// AvailabilityResponseBody is used to define fields on response body types.
type AvailabilityResponseBody struct {
	ID        string  `form:"id" json:"id" xml:"id"`
	WeekDay   uint    `form:"weekDay" json:"weekDay" xml:"weekDay"`
	Start     float64 `form:"start" json:"start" xml:"start"`
	End       float64 `form:"end" json:"end" xml:"end"`
	DateLabel string  `form:"dateLabel" json:"dateLabel" xml:"dateLabel"`
}

// BaseClientResponseBody is used to define fields on response body types.
type BaseClientResponseBody struct {
	ID        uint   `form:"id" json:"id" xml:"id"`
	FirstName string `form:"firstName" json:"firstName" xml:"firstName"`
	LastName  string `form:"lastName" json:"lastName" xml:"lastName"`
}

// CertificationRequestBody is used to define fields on request body types.
type CertificationRequestBody struct {
	ID          *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Title       *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	Institution *string `form:"institution,omitempty" json:"institution,omitempty" xml:"institution,omitempty"`
	Month       *uint   `form:"month,omitempty" json:"month,omitempty" xml:"month,omitempty"`
	Year        *uint   `form:"year,omitempty" json:"year,omitempty" xml:"year,omitempty"`
}

// ProgramRequestBody is used to define fields on request body types.
type ProgramRequestBody struct {
	ID          *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name        *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Sessions    *uint   `form:"sessions,omitempty" json:"sessions,omitempty" xml:"sessions,omitempty"`
	Duration    *uint   `form:"duration,omitempty" json:"duration,omitempty" xml:"duration,omitempty"`
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	TotalPrice  *uint   `form:"totalPrice,omitempty" json:"totalPrice,omitempty" xml:"totalPrice,omitempty"`
	TaxPercent  *uint   `form:"taxPercent,omitempty" json:"taxPercent,omitempty" xml:"taxPercent,omitempty"`
}

// NewGetCoachesResponseBody builds the HTTP response body from the result of
// the "GetCoaches" endpoint of the "coachee" service.
func NewGetCoachesResponseBody(res []*coachee.Coach) GetCoachesResponseBody {
	body := make([]*CoachResponse, len(res))
	for i, val := range res {
		body[i] = &CoachResponse{
			ID:                val.ID,
			FirstName:         val.FirstName,
			LastName:          val.LastName,
			Tags:              val.Tags,
			Description:       val.Description,
			City:              val.City,
			Country:           val.Country,
			PictureURL:        val.PictureURL,
			FirstCallDuration: val.FirstCallDuration,
			VideoURL:          val.VideoURL,
			CardDescription:   val.CardDescription,
		}
		if val.Certifications != nil {
			body[i].Certifications = make([]*CertificationResponse, len(val.Certifications))
			for j, val := range val.Certifications {
				body[i].Certifications[j] = marshalCoacheeCertificationToCertificationResponse(val)
			}
		}
		if val.Programs != nil {
			body[i].Programs = make([]*ProgramResponse, len(val.Programs))
			for j, val := range val.Programs {
				body[i].Programs[j] = marshalCoacheeProgramToProgramResponse(val)
			}
		}
		if val.Availability != nil {
			body[i].Availability = make([]*AvailabilityResponse, len(val.Availability))
			for j, val := range val.Availability {
				body[i].Availability[j] = marshalCoacheeAvailabilityToAvailabilityResponse(val)
			}
		}
	}
	return body
}

// NewGetCoachResponseBody builds the HTTP response body from the result of the
// "GetCoach" endpoint of the "coachee" service.
func NewGetCoachResponseBody(res *coachee.Coach) *GetCoachResponseBody {
	body := &GetCoachResponseBody{
		ID:                res.ID,
		FirstName:         res.FirstName,
		LastName:          res.LastName,
		Tags:              res.Tags,
		Description:       res.Description,
		City:              res.City,
		Country:           res.Country,
		PictureURL:        res.PictureURL,
		FirstCallDuration: res.FirstCallDuration,
		VideoURL:          res.VideoURL,
		CardDescription:   res.CardDescription,
	}
	if res.Certifications != nil {
		body.Certifications = make([]*CertificationResponseBody, len(res.Certifications))
		for i, val := range res.Certifications {
			body.Certifications[i] = marshalCoacheeCertificationToCertificationResponseBody(val)
		}
	}
	if res.Programs != nil {
		body.Programs = make([]*ProgramResponseBody, len(res.Programs))
		for i, val := range res.Programs {
			body.Programs[i] = marshalCoacheeProgramToProgramResponseBody(val)
		}
	}
	if res.Availability != nil {
		body.Availability = make([]*AvailabilityResponseBody, len(res.Availability))
		for i, val := range res.Availability {
			body.Availability[i] = marshalCoacheeAvailabilityToAvailabilityResponseBody(val)
		}
	}
	return body
}

// NewAdminGetCoachResponseBody builds the HTTP response body from the result
// of the "AdminGetCoach" endpoint of the "coachee" service.
func NewAdminGetCoachResponseBody(res *coachee.FullCoach) *AdminGetCoachResponseBody {
	body := &AdminGetCoachResponseBody{
		ID:                res.ID,
		FirstName:         res.FirstName,
		LastName:          res.LastName,
		Email:             res.Email,
		Phone:             res.Phone,
		StripeID:          res.StripeID,
		Tags:              res.Tags,
		Description:       res.Description,
		City:              res.City,
		Country:           res.Country,
		PictureURL:        res.PictureURL,
		Status:            res.Status,
		Vat:               res.Vat,
		IntroCall:         res.IntroCall,
		FirstCallDuration: res.FirstCallDuration,
		VideoURL:          res.VideoURL,
		CardDescription:   res.CardDescription,
	}
	if res.Availability != nil {
		body.Availability = make([]*AvailabilityResponseBody, len(res.Availability))
		for i, val := range res.Availability {
			body.Availability[i] = marshalCoacheeAvailabilityToAvailabilityResponseBody(val)
		}
	}
	if res.Certifications != nil {
		body.Certifications = make([]*CertificationResponseBody, len(res.Certifications))
		for i, val := range res.Certifications {
			body.Certifications[i] = marshalCoacheeCertificationToCertificationResponseBody(val)
		}
	}
	if res.Programs != nil {
		body.Programs = make([]*ProgramResponseBody, len(res.Programs))
		for i, val := range res.Programs {
			body.Programs[i] = marshalCoacheeProgramToProgramResponseBody(val)
		}
	}
	return body
}

// NewLoginCoachResponseBody builds the HTTP response body from the result of
// the "LoginCoach" endpoint of the "coachee" service.
func NewLoginCoachResponseBody(res *coachee.LoginCoachResult) *LoginCoachResponseBody {
	body := &LoginCoachResponseBody{
		URL: res.URL,
	}
	return body
}

// NewCreateCustomerResponseBody builds the HTTP response body from the result
// of the "CreateCustomer" endpoint of the "coachee" service.
func NewCreateCustomerResponseBody(res *coachee.CreateCustomerResult) *CreateCustomerResponseBody {
	body := &CreateCustomerResponseBody{
		Token:  res.Token,
		Expiry: res.Expiry,
	}
	if res.User != nil {
		body.User = marshalCoacheeBaseClientToBaseClientResponseBody(res.User)
	}
	return body
}

// NewCustomerLoginResponseBody builds the HTTP response body from the result
// of the "CustomerLogin" endpoint of the "coachee" service.
func NewCustomerLoginResponseBody(res *coachee.CustomerLoginResult) *CustomerLoginResponseBody {
	body := &CustomerLoginResponseBody{
		Token:  res.Token,
		Expiry: res.Expiry,
	}
	if res.User != nil {
		body.User = marshalCoacheeBaseClientToBaseClientResponseBody(res.User)
	}
	return body
}

// NewCreateOrderResponseBody builds the HTTP response body from the result of
// the "CreateOrder" endpoint of the "coachee" service.
func NewCreateOrderResponseBody(res *coachee.CreateOrderResult) *CreateOrderResponseBody {
	body := &CreateOrderResponseBody{
		ClientSecret:  res.ClientSecret,
		PublishingKey: res.PublishingKey,
	}
	return body
}

// NewAdminLoginResponseBody builds the HTTP response body from the result of
// the "AdminLogin" endpoint of the "coachee" service.
func NewAdminLoginResponseBody(res *coachee.AdminLoginResult) *AdminLoginResponseBody {
	body := &AdminLoginResponseBody{
		Token:  res.Token,
		Expiry: res.Expiry,
	}
	return body
}

// NewStripeWebhooksInternalResponseBody builds the HTTP response body from the
// result of the "StripeWebhooks" endpoint of the "coachee" service.
func NewStripeWebhooksInternalResponseBody(res *goa.ServiceError) *StripeWebhooksInternalResponseBody {
	body := &StripeWebhooksInternalResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewStripeWebhooksTransientResponseBody builds the HTTP response body from
// the result of the "StripeWebhooks" endpoint of the "coachee" service.
func NewStripeWebhooksTransientResponseBody(res *goa.ServiceError) *StripeWebhooksTransientResponseBody {
	body := &StripeWebhooksTransientResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewStripeWebhooksNotFoundResponseBody builds the HTTP response body from the
// result of the "StripeWebhooks" endpoint of the "coachee" service.
func NewStripeWebhooksNotFoundResponseBody(res *goa.ServiceError) *StripeWebhooksNotFoundResponseBody {
	body := &StripeWebhooksNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewStripeWebhooksValidationResponseBody builds the HTTP response body from
// the result of the "StripeWebhooks" endpoint of the "coachee" service.
func NewStripeWebhooksValidationResponseBody(res *goa.ServiceError) *StripeWebhooksValidationResponseBody {
	body := &StripeWebhooksValidationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewStripeWebhooksUnauthorizedResponseBody builds the HTTP response body from
// the result of the "StripeWebhooks" endpoint of the "coachee" service.
func NewStripeWebhooksUnauthorizedResponseBody(res *goa.ServiceError) *StripeWebhooksUnauthorizedResponseBody {
	body := &StripeWebhooksUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetCoachesInternalResponseBody builds the HTTP response body from the
// result of the "GetCoaches" endpoint of the "coachee" service.
func NewGetCoachesInternalResponseBody(res *goa.ServiceError) *GetCoachesInternalResponseBody {
	body := &GetCoachesInternalResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetCoachesTransientResponseBody builds the HTTP response body from the
// result of the "GetCoaches" endpoint of the "coachee" service.
func NewGetCoachesTransientResponseBody(res *goa.ServiceError) *GetCoachesTransientResponseBody {
	body := &GetCoachesTransientResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetCoachesNotFoundResponseBody builds the HTTP response body from the
// result of the "GetCoaches" endpoint of the "coachee" service.
func NewGetCoachesNotFoundResponseBody(res *goa.ServiceError) *GetCoachesNotFoundResponseBody {
	body := &GetCoachesNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetCoachesValidationResponseBody builds the HTTP response body from the
// result of the "GetCoaches" endpoint of the "coachee" service.
func NewGetCoachesValidationResponseBody(res *goa.ServiceError) *GetCoachesValidationResponseBody {
	body := &GetCoachesValidationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetCoachesUnauthorizedResponseBody builds the HTTP response body from the
// result of the "GetCoaches" endpoint of the "coachee" service.
func NewGetCoachesUnauthorizedResponseBody(res *goa.ServiceError) *GetCoachesUnauthorizedResponseBody {
	body := &GetCoachesUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetCoachInternalResponseBody builds the HTTP response body from the
// result of the "GetCoach" endpoint of the "coachee" service.
func NewGetCoachInternalResponseBody(res *goa.ServiceError) *GetCoachInternalResponseBody {
	body := &GetCoachInternalResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetCoachTransientResponseBody builds the HTTP response body from the
// result of the "GetCoach" endpoint of the "coachee" service.
func NewGetCoachTransientResponseBody(res *goa.ServiceError) *GetCoachTransientResponseBody {
	body := &GetCoachTransientResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetCoachNotFoundResponseBody builds the HTTP response body from the
// result of the "GetCoach" endpoint of the "coachee" service.
func NewGetCoachNotFoundResponseBody(res *goa.ServiceError) *GetCoachNotFoundResponseBody {
	body := &GetCoachNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetCoachValidationResponseBody builds the HTTP response body from the
// result of the "GetCoach" endpoint of the "coachee" service.
func NewGetCoachValidationResponseBody(res *goa.ServiceError) *GetCoachValidationResponseBody {
	body := &GetCoachValidationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetCoachUnauthorizedResponseBody builds the HTTP response body from the
// result of the "GetCoach" endpoint of the "coachee" service.
func NewGetCoachUnauthorizedResponseBody(res *goa.ServiceError) *GetCoachUnauthorizedResponseBody {
	body := &GetCoachUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAdminGetCoachInternalResponseBody builds the HTTP response body from the
// result of the "AdminGetCoach" endpoint of the "coachee" service.
func NewAdminGetCoachInternalResponseBody(res *goa.ServiceError) *AdminGetCoachInternalResponseBody {
	body := &AdminGetCoachInternalResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAdminGetCoachTransientResponseBody builds the HTTP response body from the
// result of the "AdminGetCoach" endpoint of the "coachee" service.
func NewAdminGetCoachTransientResponseBody(res *goa.ServiceError) *AdminGetCoachTransientResponseBody {
	body := &AdminGetCoachTransientResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAdminGetCoachNotFoundResponseBody builds the HTTP response body from the
// result of the "AdminGetCoach" endpoint of the "coachee" service.
func NewAdminGetCoachNotFoundResponseBody(res *goa.ServiceError) *AdminGetCoachNotFoundResponseBody {
	body := &AdminGetCoachNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAdminGetCoachValidationResponseBody builds the HTTP response body from
// the result of the "AdminGetCoach" endpoint of the "coachee" service.
func NewAdminGetCoachValidationResponseBody(res *goa.ServiceError) *AdminGetCoachValidationResponseBody {
	body := &AdminGetCoachValidationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAdminGetCoachUnauthorizedResponseBody builds the HTTP response body from
// the result of the "AdminGetCoach" endpoint of the "coachee" service.
func NewAdminGetCoachUnauthorizedResponseBody(res *goa.ServiceError) *AdminGetCoachUnauthorizedResponseBody {
	body := &AdminGetCoachUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewLenCoachesInternalResponseBody builds the HTTP response body from the
// result of the "LenCoaches" endpoint of the "coachee" service.
func NewLenCoachesInternalResponseBody(res *goa.ServiceError) *LenCoachesInternalResponseBody {
	body := &LenCoachesInternalResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewLenCoachesTransientResponseBody builds the HTTP response body from the
// result of the "LenCoaches" endpoint of the "coachee" service.
func NewLenCoachesTransientResponseBody(res *goa.ServiceError) *LenCoachesTransientResponseBody {
	body := &LenCoachesTransientResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewLenCoachesNotFoundResponseBody builds the HTTP response body from the
// result of the "LenCoaches" endpoint of the "coachee" service.
func NewLenCoachesNotFoundResponseBody(res *goa.ServiceError) *LenCoachesNotFoundResponseBody {
	body := &LenCoachesNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewLenCoachesValidationResponseBody builds the HTTP response body from the
// result of the "LenCoaches" endpoint of the "coachee" service.
func NewLenCoachesValidationResponseBody(res *goa.ServiceError) *LenCoachesValidationResponseBody {
	body := &LenCoachesValidationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewLenCoachesUnauthorizedResponseBody builds the HTTP response body from the
// result of the "LenCoaches" endpoint of the "coachee" service.
func NewLenCoachesUnauthorizedResponseBody(res *goa.ServiceError) *LenCoachesUnauthorizedResponseBody {
	body := &LenCoachesUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateCoachInternalResponseBody builds the HTTP response body from the
// result of the "CreateCoach" endpoint of the "coachee" service.
func NewCreateCoachInternalResponseBody(res *goa.ServiceError) *CreateCoachInternalResponseBody {
	body := &CreateCoachInternalResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateCoachTransientResponseBody builds the HTTP response body from the
// result of the "CreateCoach" endpoint of the "coachee" service.
func NewCreateCoachTransientResponseBody(res *goa.ServiceError) *CreateCoachTransientResponseBody {
	body := &CreateCoachTransientResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateCoachNotFoundResponseBody builds the HTTP response body from the
// result of the "CreateCoach" endpoint of the "coachee" service.
func NewCreateCoachNotFoundResponseBody(res *goa.ServiceError) *CreateCoachNotFoundResponseBody {
	body := &CreateCoachNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateCoachValidationResponseBody builds the HTTP response body from the
// result of the "CreateCoach" endpoint of the "coachee" service.
func NewCreateCoachValidationResponseBody(res *goa.ServiceError) *CreateCoachValidationResponseBody {
	body := &CreateCoachValidationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateCoachUnauthorizedResponseBody builds the HTTP response body from
// the result of the "CreateCoach" endpoint of the "coachee" service.
func NewCreateCoachUnauthorizedResponseBody(res *goa.ServiceError) *CreateCoachUnauthorizedResponseBody {
	body := &CreateCoachUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewLoginCoachInternalResponseBody builds the HTTP response body from the
// result of the "LoginCoach" endpoint of the "coachee" service.
func NewLoginCoachInternalResponseBody(res *goa.ServiceError) *LoginCoachInternalResponseBody {
	body := &LoginCoachInternalResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewLoginCoachTransientResponseBody builds the HTTP response body from the
// result of the "LoginCoach" endpoint of the "coachee" service.
func NewLoginCoachTransientResponseBody(res *goa.ServiceError) *LoginCoachTransientResponseBody {
	body := &LoginCoachTransientResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewLoginCoachNotFoundResponseBody builds the HTTP response body from the
// result of the "LoginCoach" endpoint of the "coachee" service.
func NewLoginCoachNotFoundResponseBody(res *goa.ServiceError) *LoginCoachNotFoundResponseBody {
	body := &LoginCoachNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewLoginCoachValidationResponseBody builds the HTTP response body from the
// result of the "LoginCoach" endpoint of the "coachee" service.
func NewLoginCoachValidationResponseBody(res *goa.ServiceError) *LoginCoachValidationResponseBody {
	body := &LoginCoachValidationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewLoginCoachUnauthorizedResponseBody builds the HTTP response body from the
// result of the "LoginCoach" endpoint of the "coachee" service.
func NewLoginCoachUnauthorizedResponseBody(res *goa.ServiceError) *LoginCoachUnauthorizedResponseBody {
	body := &LoginCoachUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewStartCoachPasswordRecoveryFlowInternalResponseBody builds the HTTP
// response body from the result of the "StartCoachPasswordRecoveryFlow"
// endpoint of the "coachee" service.
func NewStartCoachPasswordRecoveryFlowInternalResponseBody(res *goa.ServiceError) *StartCoachPasswordRecoveryFlowInternalResponseBody {
	body := &StartCoachPasswordRecoveryFlowInternalResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewStartCoachPasswordRecoveryFlowTransientResponseBody builds the HTTP
// response body from the result of the "StartCoachPasswordRecoveryFlow"
// endpoint of the "coachee" service.
func NewStartCoachPasswordRecoveryFlowTransientResponseBody(res *goa.ServiceError) *StartCoachPasswordRecoveryFlowTransientResponseBody {
	body := &StartCoachPasswordRecoveryFlowTransientResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewStartCoachPasswordRecoveryFlowNotFoundResponseBody builds the HTTP
// response body from the result of the "StartCoachPasswordRecoveryFlow"
// endpoint of the "coachee" service.
func NewStartCoachPasswordRecoveryFlowNotFoundResponseBody(res *goa.ServiceError) *StartCoachPasswordRecoveryFlowNotFoundResponseBody {
	body := &StartCoachPasswordRecoveryFlowNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewStartCoachPasswordRecoveryFlowValidationResponseBody builds the HTTP
// response body from the result of the "StartCoachPasswordRecoveryFlow"
// endpoint of the "coachee" service.
func NewStartCoachPasswordRecoveryFlowValidationResponseBody(res *goa.ServiceError) *StartCoachPasswordRecoveryFlowValidationResponseBody {
	body := &StartCoachPasswordRecoveryFlowValidationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewStartCoachPasswordRecoveryFlowUnauthorizedResponseBody builds the HTTP
// response body from the result of the "StartCoachPasswordRecoveryFlow"
// endpoint of the "coachee" service.
func NewStartCoachPasswordRecoveryFlowUnauthorizedResponseBody(res *goa.ServiceError) *StartCoachPasswordRecoveryFlowUnauthorizedResponseBody {
	body := &StartCoachPasswordRecoveryFlowUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCheckCoachPasswordRecoveryTokenInternalResponseBody builds the HTTP
// response body from the result of the "CheckCoachPasswordRecoveryToken"
// endpoint of the "coachee" service.
func NewCheckCoachPasswordRecoveryTokenInternalResponseBody(res *goa.ServiceError) *CheckCoachPasswordRecoveryTokenInternalResponseBody {
	body := &CheckCoachPasswordRecoveryTokenInternalResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCheckCoachPasswordRecoveryTokenTransientResponseBody builds the HTTP
// response body from the result of the "CheckCoachPasswordRecoveryToken"
// endpoint of the "coachee" service.
func NewCheckCoachPasswordRecoveryTokenTransientResponseBody(res *goa.ServiceError) *CheckCoachPasswordRecoveryTokenTransientResponseBody {
	body := &CheckCoachPasswordRecoveryTokenTransientResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCheckCoachPasswordRecoveryTokenNotFoundResponseBody builds the HTTP
// response body from the result of the "CheckCoachPasswordRecoveryToken"
// endpoint of the "coachee" service.
func NewCheckCoachPasswordRecoveryTokenNotFoundResponseBody(res *goa.ServiceError) *CheckCoachPasswordRecoveryTokenNotFoundResponseBody {
	body := &CheckCoachPasswordRecoveryTokenNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCheckCoachPasswordRecoveryTokenValidationResponseBody builds the HTTP
// response body from the result of the "CheckCoachPasswordRecoveryToken"
// endpoint of the "coachee" service.
func NewCheckCoachPasswordRecoveryTokenValidationResponseBody(res *goa.ServiceError) *CheckCoachPasswordRecoveryTokenValidationResponseBody {
	body := &CheckCoachPasswordRecoveryTokenValidationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCheckCoachPasswordRecoveryTokenUnauthorizedResponseBody builds the HTTP
// response body from the result of the "CheckCoachPasswordRecoveryToken"
// endpoint of the "coachee" service.
func NewCheckCoachPasswordRecoveryTokenUnauthorizedResponseBody(res *goa.ServiceError) *CheckCoachPasswordRecoveryTokenUnauthorizedResponseBody {
	body := &CheckCoachPasswordRecoveryTokenUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewFinalizeCoachPasswordRecoveryFlowInternalResponseBody builds the HTTP
// response body from the result of the "FinalizeCoachPasswordRecoveryFlow"
// endpoint of the "coachee" service.
func NewFinalizeCoachPasswordRecoveryFlowInternalResponseBody(res *goa.ServiceError) *FinalizeCoachPasswordRecoveryFlowInternalResponseBody {
	body := &FinalizeCoachPasswordRecoveryFlowInternalResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewFinalizeCoachPasswordRecoveryFlowTransientResponseBody builds the HTTP
// response body from the result of the "FinalizeCoachPasswordRecoveryFlow"
// endpoint of the "coachee" service.
func NewFinalizeCoachPasswordRecoveryFlowTransientResponseBody(res *goa.ServiceError) *FinalizeCoachPasswordRecoveryFlowTransientResponseBody {
	body := &FinalizeCoachPasswordRecoveryFlowTransientResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewFinalizeCoachPasswordRecoveryFlowNotFoundResponseBody builds the HTTP
// response body from the result of the "FinalizeCoachPasswordRecoveryFlow"
// endpoint of the "coachee" service.
func NewFinalizeCoachPasswordRecoveryFlowNotFoundResponseBody(res *goa.ServiceError) *FinalizeCoachPasswordRecoveryFlowNotFoundResponseBody {
	body := &FinalizeCoachPasswordRecoveryFlowNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewFinalizeCoachPasswordRecoveryFlowValidationResponseBody builds the HTTP
// response body from the result of the "FinalizeCoachPasswordRecoveryFlow"
// endpoint of the "coachee" service.
func NewFinalizeCoachPasswordRecoveryFlowValidationResponseBody(res *goa.ServiceError) *FinalizeCoachPasswordRecoveryFlowValidationResponseBody {
	body := &FinalizeCoachPasswordRecoveryFlowValidationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewFinalizeCoachPasswordRecoveryFlowUnauthorizedResponseBody builds the HTTP
// response body from the result of the "FinalizeCoachPasswordRecoveryFlow"
// endpoint of the "coachee" service.
func NewFinalizeCoachPasswordRecoveryFlowUnauthorizedResponseBody(res *goa.ServiceError) *FinalizeCoachPasswordRecoveryFlowUnauthorizedResponseBody {
	body := &FinalizeCoachPasswordRecoveryFlowUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateCoachInternalResponseBody builds the HTTP response body from the
// result of the "UpdateCoach" endpoint of the "coachee" service.
func NewUpdateCoachInternalResponseBody(res *goa.ServiceError) *UpdateCoachInternalResponseBody {
	body := &UpdateCoachInternalResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateCoachTransientResponseBody builds the HTTP response body from the
// result of the "UpdateCoach" endpoint of the "coachee" service.
func NewUpdateCoachTransientResponseBody(res *goa.ServiceError) *UpdateCoachTransientResponseBody {
	body := &UpdateCoachTransientResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateCoachNotFoundResponseBody builds the HTTP response body from the
// result of the "UpdateCoach" endpoint of the "coachee" service.
func NewUpdateCoachNotFoundResponseBody(res *goa.ServiceError) *UpdateCoachNotFoundResponseBody {
	body := &UpdateCoachNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateCoachValidationResponseBody builds the HTTP response body from the
// result of the "UpdateCoach" endpoint of the "coachee" service.
func NewUpdateCoachValidationResponseBody(res *goa.ServiceError) *UpdateCoachValidationResponseBody {
	body := &UpdateCoachValidationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateCoachUnauthorizedResponseBody builds the HTTP response body from
// the result of the "UpdateCoach" endpoint of the "coachee" service.
func NewUpdateCoachUnauthorizedResponseBody(res *goa.ServiceError) *UpdateCoachUnauthorizedResponseBody {
	body := &UpdateCoachUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateCertificationInternalResponseBody builds the HTTP response body
// from the result of the "CreateCertification" endpoint of the "coachee"
// service.
func NewCreateCertificationInternalResponseBody(res *goa.ServiceError) *CreateCertificationInternalResponseBody {
	body := &CreateCertificationInternalResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateCertificationTransientResponseBody builds the HTTP response body
// from the result of the "CreateCertification" endpoint of the "coachee"
// service.
func NewCreateCertificationTransientResponseBody(res *goa.ServiceError) *CreateCertificationTransientResponseBody {
	body := &CreateCertificationTransientResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateCertificationNotFoundResponseBody builds the HTTP response body
// from the result of the "CreateCertification" endpoint of the "coachee"
// service.
func NewCreateCertificationNotFoundResponseBody(res *goa.ServiceError) *CreateCertificationNotFoundResponseBody {
	body := &CreateCertificationNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateCertificationValidationResponseBody builds the HTTP response body
// from the result of the "CreateCertification" endpoint of the "coachee"
// service.
func NewCreateCertificationValidationResponseBody(res *goa.ServiceError) *CreateCertificationValidationResponseBody {
	body := &CreateCertificationValidationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateCertificationUnauthorizedResponseBody builds the HTTP response body
// from the result of the "CreateCertification" endpoint of the "coachee"
// service.
func NewCreateCertificationUnauthorizedResponseBody(res *goa.ServiceError) *CreateCertificationUnauthorizedResponseBody {
	body := &CreateCertificationUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteCertificationInternalResponseBody builds the HTTP response body
// from the result of the "DeleteCertification" endpoint of the "coachee"
// service.
func NewDeleteCertificationInternalResponseBody(res *goa.ServiceError) *DeleteCertificationInternalResponseBody {
	body := &DeleteCertificationInternalResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteCertificationTransientResponseBody builds the HTTP response body
// from the result of the "DeleteCertification" endpoint of the "coachee"
// service.
func NewDeleteCertificationTransientResponseBody(res *goa.ServiceError) *DeleteCertificationTransientResponseBody {
	body := &DeleteCertificationTransientResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteCertificationNotFoundResponseBody builds the HTTP response body
// from the result of the "DeleteCertification" endpoint of the "coachee"
// service.
func NewDeleteCertificationNotFoundResponseBody(res *goa.ServiceError) *DeleteCertificationNotFoundResponseBody {
	body := &DeleteCertificationNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteCertificationValidationResponseBody builds the HTTP response body
// from the result of the "DeleteCertification" endpoint of the "coachee"
// service.
func NewDeleteCertificationValidationResponseBody(res *goa.ServiceError) *DeleteCertificationValidationResponseBody {
	body := &DeleteCertificationValidationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteCertificationUnauthorizedResponseBody builds the HTTP response body
// from the result of the "DeleteCertification" endpoint of the "coachee"
// service.
func NewDeleteCertificationUnauthorizedResponseBody(res *goa.ServiceError) *DeleteCertificationUnauthorizedResponseBody {
	body := &DeleteCertificationUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateProgramInternalResponseBody builds the HTTP response body from the
// result of the "CreateProgram" endpoint of the "coachee" service.
func NewCreateProgramInternalResponseBody(res *goa.ServiceError) *CreateProgramInternalResponseBody {
	body := &CreateProgramInternalResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateProgramTransientResponseBody builds the HTTP response body from the
// result of the "CreateProgram" endpoint of the "coachee" service.
func NewCreateProgramTransientResponseBody(res *goa.ServiceError) *CreateProgramTransientResponseBody {
	body := &CreateProgramTransientResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateProgramNotFoundResponseBody builds the HTTP response body from the
// result of the "CreateProgram" endpoint of the "coachee" service.
func NewCreateProgramNotFoundResponseBody(res *goa.ServiceError) *CreateProgramNotFoundResponseBody {
	body := &CreateProgramNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateProgramValidationResponseBody builds the HTTP response body from
// the result of the "CreateProgram" endpoint of the "coachee" service.
func NewCreateProgramValidationResponseBody(res *goa.ServiceError) *CreateProgramValidationResponseBody {
	body := &CreateProgramValidationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateProgramUnauthorizedResponseBody builds the HTTP response body from
// the result of the "CreateProgram" endpoint of the "coachee" service.
func NewCreateProgramUnauthorizedResponseBody(res *goa.ServiceError) *CreateProgramUnauthorizedResponseBody {
	body := &CreateProgramUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteProgramInternalResponseBody builds the HTTP response body from the
// result of the "DeleteProgram" endpoint of the "coachee" service.
func NewDeleteProgramInternalResponseBody(res *goa.ServiceError) *DeleteProgramInternalResponseBody {
	body := &DeleteProgramInternalResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteProgramTransientResponseBody builds the HTTP response body from the
// result of the "DeleteProgram" endpoint of the "coachee" service.
func NewDeleteProgramTransientResponseBody(res *goa.ServiceError) *DeleteProgramTransientResponseBody {
	body := &DeleteProgramTransientResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteProgramNotFoundResponseBody builds the HTTP response body from the
// result of the "DeleteProgram" endpoint of the "coachee" service.
func NewDeleteProgramNotFoundResponseBody(res *goa.ServiceError) *DeleteProgramNotFoundResponseBody {
	body := &DeleteProgramNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteProgramValidationResponseBody builds the HTTP response body from
// the result of the "DeleteProgram" endpoint of the "coachee" service.
func NewDeleteProgramValidationResponseBody(res *goa.ServiceError) *DeleteProgramValidationResponseBody {
	body := &DeleteProgramValidationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteProgramUnauthorizedResponseBody builds the HTTP response body from
// the result of the "DeleteProgram" endpoint of the "coachee" service.
func NewDeleteProgramUnauthorizedResponseBody(res *goa.ServiceError) *DeleteProgramUnauthorizedResponseBody {
	body := &DeleteProgramUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateAvailabilityInternalResponseBody builds the HTTP response body from
// the result of the "CreateAvailability" endpoint of the "coachee" service.
func NewCreateAvailabilityInternalResponseBody(res *goa.ServiceError) *CreateAvailabilityInternalResponseBody {
	body := &CreateAvailabilityInternalResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateAvailabilityTransientResponseBody builds the HTTP response body
// from the result of the "CreateAvailability" endpoint of the "coachee"
// service.
func NewCreateAvailabilityTransientResponseBody(res *goa.ServiceError) *CreateAvailabilityTransientResponseBody {
	body := &CreateAvailabilityTransientResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateAvailabilityNotFoundResponseBody builds the HTTP response body from
// the result of the "CreateAvailability" endpoint of the "coachee" service.
func NewCreateAvailabilityNotFoundResponseBody(res *goa.ServiceError) *CreateAvailabilityNotFoundResponseBody {
	body := &CreateAvailabilityNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateAvailabilityValidationResponseBody builds the HTTP response body
// from the result of the "CreateAvailability" endpoint of the "coachee"
// service.
func NewCreateAvailabilityValidationResponseBody(res *goa.ServiceError) *CreateAvailabilityValidationResponseBody {
	body := &CreateAvailabilityValidationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateAvailabilityUnauthorizedResponseBody builds the HTTP response body
// from the result of the "CreateAvailability" endpoint of the "coachee"
// service.
func NewCreateAvailabilityUnauthorizedResponseBody(res *goa.ServiceError) *CreateAvailabilityUnauthorizedResponseBody {
	body := &CreateAvailabilityUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteAvailabilityInternalResponseBody builds the HTTP response body from
// the result of the "DeleteAvailability" endpoint of the "coachee" service.
func NewDeleteAvailabilityInternalResponseBody(res *goa.ServiceError) *DeleteAvailabilityInternalResponseBody {
	body := &DeleteAvailabilityInternalResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteAvailabilityTransientResponseBody builds the HTTP response body
// from the result of the "DeleteAvailability" endpoint of the "coachee"
// service.
func NewDeleteAvailabilityTransientResponseBody(res *goa.ServiceError) *DeleteAvailabilityTransientResponseBody {
	body := &DeleteAvailabilityTransientResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteAvailabilityNotFoundResponseBody builds the HTTP response body from
// the result of the "DeleteAvailability" endpoint of the "coachee" service.
func NewDeleteAvailabilityNotFoundResponseBody(res *goa.ServiceError) *DeleteAvailabilityNotFoundResponseBody {
	body := &DeleteAvailabilityNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteAvailabilityValidationResponseBody builds the HTTP response body
// from the result of the "DeleteAvailability" endpoint of the "coachee"
// service.
func NewDeleteAvailabilityValidationResponseBody(res *goa.ServiceError) *DeleteAvailabilityValidationResponseBody {
	body := &DeleteAvailabilityValidationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteAvailabilityUnauthorizedResponseBody builds the HTTP response body
// from the result of the "DeleteAvailability" endpoint of the "coachee"
// service.
func NewDeleteAvailabilityUnauthorizedResponseBody(res *goa.ServiceError) *DeleteAvailabilityUnauthorizedResponseBody {
	body := &DeleteAvailabilityUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateCustomerInternalResponseBody builds the HTTP response body from the
// result of the "CreateCustomer" endpoint of the "coachee" service.
func NewCreateCustomerInternalResponseBody(res *goa.ServiceError) *CreateCustomerInternalResponseBody {
	body := &CreateCustomerInternalResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateCustomerTransientResponseBody builds the HTTP response body from
// the result of the "CreateCustomer" endpoint of the "coachee" service.
func NewCreateCustomerTransientResponseBody(res *goa.ServiceError) *CreateCustomerTransientResponseBody {
	body := &CreateCustomerTransientResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateCustomerNotFoundResponseBody builds the HTTP response body from the
// result of the "CreateCustomer" endpoint of the "coachee" service.
func NewCreateCustomerNotFoundResponseBody(res *goa.ServiceError) *CreateCustomerNotFoundResponseBody {
	body := &CreateCustomerNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateCustomerValidationResponseBody builds the HTTP response body from
// the result of the "CreateCustomer" endpoint of the "coachee" service.
func NewCreateCustomerValidationResponseBody(res *goa.ServiceError) *CreateCustomerValidationResponseBody {
	body := &CreateCustomerValidationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateCustomerUnauthorizedResponseBody builds the HTTP response body from
// the result of the "CreateCustomer" endpoint of the "coachee" service.
func NewCreateCustomerUnauthorizedResponseBody(res *goa.ServiceError) *CreateCustomerUnauthorizedResponseBody {
	body := &CreateCustomerUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCustomerLoginInternalResponseBody builds the HTTP response body from the
// result of the "CustomerLogin" endpoint of the "coachee" service.
func NewCustomerLoginInternalResponseBody(res *goa.ServiceError) *CustomerLoginInternalResponseBody {
	body := &CustomerLoginInternalResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCustomerLoginTransientResponseBody builds the HTTP response body from the
// result of the "CustomerLogin" endpoint of the "coachee" service.
func NewCustomerLoginTransientResponseBody(res *goa.ServiceError) *CustomerLoginTransientResponseBody {
	body := &CustomerLoginTransientResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCustomerLoginNotFoundResponseBody builds the HTTP response body from the
// result of the "CustomerLogin" endpoint of the "coachee" service.
func NewCustomerLoginNotFoundResponseBody(res *goa.ServiceError) *CustomerLoginNotFoundResponseBody {
	body := &CustomerLoginNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCustomerLoginValidationResponseBody builds the HTTP response body from
// the result of the "CustomerLogin" endpoint of the "coachee" service.
func NewCustomerLoginValidationResponseBody(res *goa.ServiceError) *CustomerLoginValidationResponseBody {
	body := &CustomerLoginValidationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCustomerLoginUnauthorizedResponseBody builds the HTTP response body from
// the result of the "CustomerLogin" endpoint of the "coachee" service.
func NewCustomerLoginUnauthorizedResponseBody(res *goa.ServiceError) *CustomerLoginUnauthorizedResponseBody {
	body := &CustomerLoginUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewStartPasswordRecoveryFlowInternalResponseBody builds the HTTP response
// body from the result of the "StartPasswordRecoveryFlow" endpoint of the
// "coachee" service.
func NewStartPasswordRecoveryFlowInternalResponseBody(res *goa.ServiceError) *StartPasswordRecoveryFlowInternalResponseBody {
	body := &StartPasswordRecoveryFlowInternalResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewStartPasswordRecoveryFlowTransientResponseBody builds the HTTP response
// body from the result of the "StartPasswordRecoveryFlow" endpoint of the
// "coachee" service.
func NewStartPasswordRecoveryFlowTransientResponseBody(res *goa.ServiceError) *StartPasswordRecoveryFlowTransientResponseBody {
	body := &StartPasswordRecoveryFlowTransientResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewStartPasswordRecoveryFlowNotFoundResponseBody builds the HTTP response
// body from the result of the "StartPasswordRecoveryFlow" endpoint of the
// "coachee" service.
func NewStartPasswordRecoveryFlowNotFoundResponseBody(res *goa.ServiceError) *StartPasswordRecoveryFlowNotFoundResponseBody {
	body := &StartPasswordRecoveryFlowNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewStartPasswordRecoveryFlowValidationResponseBody builds the HTTP response
// body from the result of the "StartPasswordRecoveryFlow" endpoint of the
// "coachee" service.
func NewStartPasswordRecoveryFlowValidationResponseBody(res *goa.ServiceError) *StartPasswordRecoveryFlowValidationResponseBody {
	body := &StartPasswordRecoveryFlowValidationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewStartPasswordRecoveryFlowUnauthorizedResponseBody builds the HTTP
// response body from the result of the "StartPasswordRecoveryFlow" endpoint of
// the "coachee" service.
func NewStartPasswordRecoveryFlowUnauthorizedResponseBody(res *goa.ServiceError) *StartPasswordRecoveryFlowUnauthorizedResponseBody {
	body := &StartPasswordRecoveryFlowUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCheckPasswordRecoveryTokenInternalResponseBody builds the HTTP response
// body from the result of the "CheckPasswordRecoveryToken" endpoint of the
// "coachee" service.
func NewCheckPasswordRecoveryTokenInternalResponseBody(res *goa.ServiceError) *CheckPasswordRecoveryTokenInternalResponseBody {
	body := &CheckPasswordRecoveryTokenInternalResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCheckPasswordRecoveryTokenTransientResponseBody builds the HTTP response
// body from the result of the "CheckPasswordRecoveryToken" endpoint of the
// "coachee" service.
func NewCheckPasswordRecoveryTokenTransientResponseBody(res *goa.ServiceError) *CheckPasswordRecoveryTokenTransientResponseBody {
	body := &CheckPasswordRecoveryTokenTransientResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCheckPasswordRecoveryTokenNotFoundResponseBody builds the HTTP response
// body from the result of the "CheckPasswordRecoveryToken" endpoint of the
// "coachee" service.
func NewCheckPasswordRecoveryTokenNotFoundResponseBody(res *goa.ServiceError) *CheckPasswordRecoveryTokenNotFoundResponseBody {
	body := &CheckPasswordRecoveryTokenNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCheckPasswordRecoveryTokenValidationResponseBody builds the HTTP response
// body from the result of the "CheckPasswordRecoveryToken" endpoint of the
// "coachee" service.
func NewCheckPasswordRecoveryTokenValidationResponseBody(res *goa.ServiceError) *CheckPasswordRecoveryTokenValidationResponseBody {
	body := &CheckPasswordRecoveryTokenValidationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCheckPasswordRecoveryTokenUnauthorizedResponseBody builds the HTTP
// response body from the result of the "CheckPasswordRecoveryToken" endpoint
// of the "coachee" service.
func NewCheckPasswordRecoveryTokenUnauthorizedResponseBody(res *goa.ServiceError) *CheckPasswordRecoveryTokenUnauthorizedResponseBody {
	body := &CheckPasswordRecoveryTokenUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewFinalizePasswordRecoveryFlowInternalResponseBody builds the HTTP response
// body from the result of the "FinalizePasswordRecoveryFlow" endpoint of the
// "coachee" service.
func NewFinalizePasswordRecoveryFlowInternalResponseBody(res *goa.ServiceError) *FinalizePasswordRecoveryFlowInternalResponseBody {
	body := &FinalizePasswordRecoveryFlowInternalResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewFinalizePasswordRecoveryFlowTransientResponseBody builds the HTTP
// response body from the result of the "FinalizePasswordRecoveryFlow" endpoint
// of the "coachee" service.
func NewFinalizePasswordRecoveryFlowTransientResponseBody(res *goa.ServiceError) *FinalizePasswordRecoveryFlowTransientResponseBody {
	body := &FinalizePasswordRecoveryFlowTransientResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewFinalizePasswordRecoveryFlowNotFoundResponseBody builds the HTTP response
// body from the result of the "FinalizePasswordRecoveryFlow" endpoint of the
// "coachee" service.
func NewFinalizePasswordRecoveryFlowNotFoundResponseBody(res *goa.ServiceError) *FinalizePasswordRecoveryFlowNotFoundResponseBody {
	body := &FinalizePasswordRecoveryFlowNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewFinalizePasswordRecoveryFlowValidationResponseBody builds the HTTP
// response body from the result of the "FinalizePasswordRecoveryFlow" endpoint
// of the "coachee" service.
func NewFinalizePasswordRecoveryFlowValidationResponseBody(res *goa.ServiceError) *FinalizePasswordRecoveryFlowValidationResponseBody {
	body := &FinalizePasswordRecoveryFlowValidationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewFinalizePasswordRecoveryFlowUnauthorizedResponseBody builds the HTTP
// response body from the result of the "FinalizePasswordRecoveryFlow" endpoint
// of the "coachee" service.
func NewFinalizePasswordRecoveryFlowUnauthorizedResponseBody(res *goa.ServiceError) *FinalizePasswordRecoveryFlowUnauthorizedResponseBody {
	body := &FinalizePasswordRecoveryFlowUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateOrderInternalResponseBody builds the HTTP response body from the
// result of the "CreateOrder" endpoint of the "coachee" service.
func NewCreateOrderInternalResponseBody(res *goa.ServiceError) *CreateOrderInternalResponseBody {
	body := &CreateOrderInternalResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateOrderTransientResponseBody builds the HTTP response body from the
// result of the "CreateOrder" endpoint of the "coachee" service.
func NewCreateOrderTransientResponseBody(res *goa.ServiceError) *CreateOrderTransientResponseBody {
	body := &CreateOrderTransientResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateOrderNotFoundResponseBody builds the HTTP response body from the
// result of the "CreateOrder" endpoint of the "coachee" service.
func NewCreateOrderNotFoundResponseBody(res *goa.ServiceError) *CreateOrderNotFoundResponseBody {
	body := &CreateOrderNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateOrderValidationResponseBody builds the HTTP response body from the
// result of the "CreateOrder" endpoint of the "coachee" service.
func NewCreateOrderValidationResponseBody(res *goa.ServiceError) *CreateOrderValidationResponseBody {
	body := &CreateOrderValidationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateOrderUnauthorizedResponseBody builds the HTTP response body from
// the result of the "CreateOrder" endpoint of the "coachee" service.
func NewCreateOrderUnauthorizedResponseBody(res *goa.ServiceError) *CreateOrderUnauthorizedResponseBody {
	body := &CreateOrderUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRegisterStripeExpressInternalResponseBody builds the HTTP response body
// from the result of the "RegisterStripeExpress" endpoint of the "coachee"
// service.
func NewRegisterStripeExpressInternalResponseBody(res *goa.ServiceError) *RegisterStripeExpressInternalResponseBody {
	body := &RegisterStripeExpressInternalResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRegisterStripeExpressTransientResponseBody builds the HTTP response body
// from the result of the "RegisterStripeExpress" endpoint of the "coachee"
// service.
func NewRegisterStripeExpressTransientResponseBody(res *goa.ServiceError) *RegisterStripeExpressTransientResponseBody {
	body := &RegisterStripeExpressTransientResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRegisterStripeExpressNotFoundResponseBody builds the HTTP response body
// from the result of the "RegisterStripeExpress" endpoint of the "coachee"
// service.
func NewRegisterStripeExpressNotFoundResponseBody(res *goa.ServiceError) *RegisterStripeExpressNotFoundResponseBody {
	body := &RegisterStripeExpressNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRegisterStripeExpressValidationResponseBody builds the HTTP response body
// from the result of the "RegisterStripeExpress" endpoint of the "coachee"
// service.
func NewRegisterStripeExpressValidationResponseBody(res *goa.ServiceError) *RegisterStripeExpressValidationResponseBody {
	body := &RegisterStripeExpressValidationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRegisterStripeExpressUnauthorizedResponseBody builds the HTTP response
// body from the result of the "RegisterStripeExpress" endpoint of the
// "coachee" service.
func NewRegisterStripeExpressUnauthorizedResponseBody(res *goa.ServiceError) *RegisterStripeExpressUnauthorizedResponseBody {
	body := &RegisterStripeExpressUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAdminLoginInternalResponseBody builds the HTTP response body from the
// result of the "AdminLogin" endpoint of the "coachee" service.
func NewAdminLoginInternalResponseBody(res *goa.ServiceError) *AdminLoginInternalResponseBody {
	body := &AdminLoginInternalResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAdminLoginTransientResponseBody builds the HTTP response body from the
// result of the "AdminLogin" endpoint of the "coachee" service.
func NewAdminLoginTransientResponseBody(res *goa.ServiceError) *AdminLoginTransientResponseBody {
	body := &AdminLoginTransientResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAdminLoginNotFoundResponseBody builds the HTTP response body from the
// result of the "AdminLogin" endpoint of the "coachee" service.
func NewAdminLoginNotFoundResponseBody(res *goa.ServiceError) *AdminLoginNotFoundResponseBody {
	body := &AdminLoginNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAdminLoginValidationResponseBody builds the HTTP response body from the
// result of the "AdminLogin" endpoint of the "coachee" service.
func NewAdminLoginValidationResponseBody(res *goa.ServiceError) *AdminLoginValidationResponseBody {
	body := &AdminLoginValidationResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAdminLoginUnauthorizedResponseBody builds the HTTP response body from the
// result of the "AdminLogin" endpoint of the "coachee" service.
func NewAdminLoginUnauthorizedResponseBody(res *goa.ServiceError) *AdminLoginUnauthorizedResponseBody {
	body := &AdminLoginUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetCoachesPayload builds a coachee service GetCoaches endpoint payload.
func NewGetCoachesPayload(tag *string, limit *uint, page *uint, showAll *bool) *coachee.GetCoachesPayload {
	return &coachee.GetCoachesPayload{
		Tag:     tag,
		Limit:   limit,
		Page:    page,
		ShowAll: showAll,
	}
}

// NewGetCoachPayload builds a coachee service GetCoach endpoint payload.
func NewGetCoachPayload(id uint) *coachee.GetCoachPayload {
	return &coachee.GetCoachPayload{
		ID: id,
	}
}

// NewAdminGetCoachPayload builds a coachee service AdminGetCoach endpoint
// payload.
func NewAdminGetCoachPayload(id uint, token string) *coachee.AdminGetCoachPayload {
	return &coachee.AdminGetCoachPayload{
		ID:    id,
		Token: token,
	}
}

// NewLenCoachesPayload builds a coachee service LenCoaches endpoint payload.
func NewLenCoachesPayload(tag string) *coachee.LenCoachesPayload {
	return &coachee.LenCoachesPayload{
		Tag: tag,
	}
}

// NewCreateCoachPayload builds a coachee service CreateCoach endpoint payload.
func NewCreateCoachPayload(body *CreateCoachRequestBody) *coachee.CreateCoachPayload {
	v := &coachee.CreateCoachPayload{
		FirstName:          *body.FirstName,
		LastName:           *body.LastName,
		Email:              *body.Email,
		Password:           *body.Password,
		Phone:              *body.Phone,
		Tags:               *body.Tags,
		Description:        *body.Description,
		City:               body.City,
		Country:            body.Country,
		IntroCall:          *body.IntroCall,
		TextCertifications: *body.TextCertifications,
		TextPrograms:       *body.TextPrograms,
		TextAvailability:   body.TextAvailability,
		Vat:                body.Vat,
		AcceptTerms:        *body.AcceptTerms,
	}
	return v
}

// NewLoginCoachPayload builds a coachee service LoginCoach endpoint payload.
func NewLoginCoachPayload(body *LoginCoachRequestBody) *coachee.LoginCoachPayload {
	v := &coachee.LoginCoachPayload{
		Email:    *body.Email,
		Password: *body.Password,
	}
	return v
}

// NewStartCoachPasswordRecoveryFlowPayload builds a coachee service
// StartCoachPasswordRecoveryFlow endpoint payload.
func NewStartCoachPasswordRecoveryFlowPayload(body *StartCoachPasswordRecoveryFlowRequestBody) *coachee.StartCoachPasswordRecoveryFlowPayload {
	v := &coachee.StartCoachPasswordRecoveryFlowPayload{
		Email: *body.Email,
	}
	return v
}

// NewCheckCoachPasswordRecoveryTokenPayload builds a coachee service
// CheckCoachPasswordRecoveryToken endpoint payload.
func NewCheckCoachPasswordRecoveryTokenPayload(token string) *coachee.CheckCoachPasswordRecoveryTokenPayload {
	return &coachee.CheckCoachPasswordRecoveryTokenPayload{
		Token: token,
	}
}

// NewFinalizeCoachPasswordRecoveryFlowPayload builds a coachee service
// FinalizeCoachPasswordRecoveryFlow endpoint payload.
func NewFinalizeCoachPasswordRecoveryFlowPayload(body *FinalizeCoachPasswordRecoveryFlowRequestBody, token string) *coachee.FinalizeCoachPasswordRecoveryFlowPayload {
	v := &coachee.FinalizeCoachPasswordRecoveryFlowPayload{
		Password: *body.Password,
	}
	v.Token = token
	return v
}

// NewUpdateCoachPayload builds a coachee service UpdateCoach endpoint payload.
func NewUpdateCoachPayload(body *UpdateCoachRequestBody, id uint, token string) *coachee.UpdateCoachPayload {
	v := &coachee.UpdateCoachPayload{
		FirstName:         body.FirstName,
		LastName:          body.LastName,
		Email:             body.Email,
		Phone:             body.Phone,
		Tags:              body.Tags,
		Description:       body.Description,
		City:              body.City,
		Country:           body.Country,
		IntroCall:         body.IntroCall,
		StripeID:          body.StripeID,
		PictureURL:        body.PictureURL,
		Vat:               body.Vat,
		Status:            body.Status,
		FirstCallDuration: body.FirstCallDuration,
		VideoURL:          body.VideoURL,
		CardDescription:   body.CardDescription,
	}
	v.ID = id
	v.Token = token
	return v
}

// NewCreateCertificationPayload builds a coachee service CreateCertification
// endpoint payload.
func NewCreateCertificationPayload(body *CreateCertificationRequestBody, id uint, token string) *coachee.CreateCertificationPayload {
	v := &coachee.CreateCertificationPayload{}
	v.Certification = unmarshalCertificationRequestBodyToCoacheeCertification(body.Certification)
	v.ID = id
	v.Token = token
	return v
}

// NewDeleteCertificationPayload builds a coachee service DeleteCertification
// endpoint payload.
func NewDeleteCertificationPayload(id uint, certID string, token string) *coachee.DeleteCertificationPayload {
	return &coachee.DeleteCertificationPayload{
		ID:     id,
		CertID: certID,
		Token:  token,
	}
}

// NewCreateProgramPayload builds a coachee service CreateProgram endpoint
// payload.
func NewCreateProgramPayload(body *CreateProgramRequestBody, id uint, token string) *coachee.CreateProgramPayload {
	v := &coachee.CreateProgramPayload{}
	v.Program = unmarshalProgramRequestBodyToCoacheeProgram(body.Program)
	v.ID = id
	v.Token = token
	return v
}

// NewDeleteProgramPayload builds a coachee service DeleteProgram endpoint
// payload.
func NewDeleteProgramPayload(id uint, programID string, token string) *coachee.DeleteProgramPayload {
	return &coachee.DeleteProgramPayload{
		ID:        id,
		ProgramID: programID,
		Token:     token,
	}
}

// NewCreateAvailabilityPayload builds a coachee service CreateAvailability
// endpoint payload.
func NewCreateAvailabilityPayload(body *CreateAvailabilityRequestBody, id uint, token string) *coachee.CreateAvailabilityPayload {
	v := &coachee.CreateAvailabilityPayload{
		WeekDay: *body.WeekDay,
		Start:   *body.Start,
		End:     *body.End,
	}
	v.ID = id
	v.Token = token
	return v
}

// NewDeleteAvailabilityPayload builds a coachee service DeleteAvailability
// endpoint payload.
func NewDeleteAvailabilityPayload(id uint, avID string, token string) *coachee.DeleteAvailabilityPayload {
	return &coachee.DeleteAvailabilityPayload{
		ID:    id,
		AvID:  avID,
		Token: token,
	}
}

// NewCreateCustomerPayload builds a coachee service CreateCustomer endpoint
// payload.
func NewCreateCustomerPayload(body *CreateCustomerRequestBody) *coachee.CreateCustomerPayload {
	v := &coachee.CreateCustomerPayload{
		Email:       *body.Email,
		FirstName:   *body.FirstName,
		LastName:    *body.LastName,
		Password:    *body.Password,
		AcceptTerms: *body.AcceptTerms,
	}
	return v
}

// NewCustomerLoginPayload builds a coachee service CustomerLogin endpoint
// payload.
func NewCustomerLoginPayload(body *CustomerLoginRequestBody) *coachee.CustomerLoginPayload {
	v := &coachee.CustomerLoginPayload{
		Email:    *body.Email,
		Password: *body.Password,
	}
	return v
}

// NewStartPasswordRecoveryFlowPayload builds a coachee service
// StartPasswordRecoveryFlow endpoint payload.
func NewStartPasswordRecoveryFlowPayload(body *StartPasswordRecoveryFlowRequestBody) *coachee.StartPasswordRecoveryFlowPayload {
	v := &coachee.StartPasswordRecoveryFlowPayload{
		Email: *body.Email,
	}
	return v
}

// NewCheckPasswordRecoveryTokenPayload builds a coachee service
// CheckPasswordRecoveryToken endpoint payload.
func NewCheckPasswordRecoveryTokenPayload(token string) *coachee.CheckPasswordRecoveryTokenPayload {
	return &coachee.CheckPasswordRecoveryTokenPayload{
		Token: token,
	}
}

// NewFinalizePasswordRecoveryFlowPayload builds a coachee service
// FinalizePasswordRecoveryFlow endpoint payload.
func NewFinalizePasswordRecoveryFlowPayload(body *FinalizePasswordRecoveryFlowRequestBody, token string) *coachee.FinalizePasswordRecoveryFlowPayload {
	v := &coachee.FinalizePasswordRecoveryFlowPayload{
		Password: *body.Password,
	}
	v.Token = token
	return v
}

// NewCreateOrderPayload builds a coachee service CreateOrder endpoint payload.
func NewCreateOrderPayload(body *CreateOrderRequestBody, token string) *coachee.CreateOrderPayload {
	v := &coachee.CreateOrderPayload{
		CoachID:   *body.CoachID,
		ProgramID: *body.ProgramID,
		IntroCall: *body.IntroCall,
	}
	v.Token = token
	return v
}

// NewRegisterStripeExpressPayload builds a coachee service
// RegisterStripeExpress endpoint payload.
func NewRegisterStripeExpressPayload(body *RegisterStripeExpressRequestBody, id uint) *coachee.RegisterStripeExpressPayload {
	v := &coachee.RegisterStripeExpressPayload{
		AuthorizationCode: *body.AuthorizationCode,
	}
	v.ID = id
	return v
}

// NewAdminLoginPayload builds a coachee service AdminLogin endpoint payload.
func NewAdminLoginPayload(body *AdminLoginRequestBody) *coachee.AdminLoginPayload {
	v := &coachee.AdminLoginPayload{
		Email:    *body.Email,
		Password: *body.Password,
	}
	return v
}

// ValidateCreateCoachRequestBody runs the validations defined on
// CreateCoachRequestBody
func ValidateCreateCoachRequestBody(body *CreateCoachRequestBody) (err error) {
	if body.FirstName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("firstName", "body"))
	}
	if body.LastName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("lastName", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Password == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("password", "body"))
	}
	if body.Phone == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("phone", "body"))
	}
	if body.Tags == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tags", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.IntroCall == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("introCall", "body"))
	}
	if body.TextCertifications == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("textCertifications", "body"))
	}
	if body.TextPrograms == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("textPrograms", "body"))
	}
	if body.AcceptTerms == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("acceptTerms", "body"))
	}
	return
}

// ValidateLoginCoachRequestBody runs the validations defined on
// LoginCoachRequestBody
func ValidateLoginCoachRequestBody(body *LoginCoachRequestBody) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Password == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("password", "body"))
	}
	return
}

// ValidateStartCoachPasswordRecoveryFlowRequestBody runs the validations
// defined on StartCoachPasswordRecoveryFlowRequestBody
func ValidateStartCoachPasswordRecoveryFlowRequestBody(body *StartCoachPasswordRecoveryFlowRequestBody) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	return
}

// ValidateFinalizeCoachPasswordRecoveryFlowRequestBody runs the validations
// defined on FinalizeCoachPasswordRecoveryFlowRequestBody
func ValidateFinalizeCoachPasswordRecoveryFlowRequestBody(body *FinalizeCoachPasswordRecoveryFlowRequestBody) (err error) {
	if body.Password == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("password", "body"))
	}
	return
}

// ValidateCreateCertificationRequestBody runs the validations defined on
// CreateCertificationRequestBody
func ValidateCreateCertificationRequestBody(body *CreateCertificationRequestBody) (err error) {
	if body.Certification == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("certification", "body"))
	}
	if body.Certification != nil {
		if err2 := ValidateCertificationRequestBody(body.Certification); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateCreateProgramRequestBody runs the validations defined on
// CreateProgramRequestBody
func ValidateCreateProgramRequestBody(body *CreateProgramRequestBody) (err error) {
	if body.Program == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("program", "body"))
	}
	if body.Program != nil {
		if err2 := ValidateProgramRequestBody(body.Program); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateCreateAvailabilityRequestBody runs the validations defined on
// CreateAvailabilityRequestBody
func ValidateCreateAvailabilityRequestBody(body *CreateAvailabilityRequestBody) (err error) {
	if body.WeekDay == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("weekDay", "body"))
	}
	if body.Start == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("start", "body"))
	}
	if body.End == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("end", "body"))
	}
	if body.WeekDay != nil {
		if *body.WeekDay < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.weekDay", *body.WeekDay, 0, true))
		}
	}
	if body.WeekDay != nil {
		if *body.WeekDay > 6 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.weekDay", *body.WeekDay, 6, false))
		}
	}
	if body.Start != nil {
		if *body.Start < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.start", *body.Start, 0, true))
		}
	}
	if body.Start != nil {
		if *body.Start > 1440 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.start", *body.Start, 1440, false))
		}
	}
	if body.End != nil {
		if *body.End < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.end", *body.End, 0, true))
		}
	}
	if body.End != nil {
		if *body.End > 1440 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.end", *body.End, 1440, false))
		}
	}
	return
}

// ValidateCreateCustomerRequestBody runs the validations defined on
// CreateCustomerRequestBody
func ValidateCreateCustomerRequestBody(body *CreateCustomerRequestBody) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.FirstName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("firstName", "body"))
	}
	if body.LastName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("lastName", "body"))
	}
	if body.Password == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("password", "body"))
	}
	if body.AcceptTerms == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("acceptTerms", "body"))
	}
	return
}

// ValidateCustomerLoginRequestBody runs the validations defined on
// CustomerLoginRequestBody
func ValidateCustomerLoginRequestBody(body *CustomerLoginRequestBody) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Password == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("password", "body"))
	}
	return
}

// ValidateStartPasswordRecoveryFlowRequestBody runs the validations defined on
// StartPasswordRecoveryFlowRequestBody
func ValidateStartPasswordRecoveryFlowRequestBody(body *StartPasswordRecoveryFlowRequestBody) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	return
}

// ValidateFinalizePasswordRecoveryFlowRequestBody runs the validations defined
// on FinalizePasswordRecoveryFlowRequestBody
func ValidateFinalizePasswordRecoveryFlowRequestBody(body *FinalizePasswordRecoveryFlowRequestBody) (err error) {
	if body.Password == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("password", "body"))
	}
	return
}

// ValidateCreateOrderRequestBody runs the validations defined on
// CreateOrderRequestBody
func ValidateCreateOrderRequestBody(body *CreateOrderRequestBody) (err error) {
	if body.CoachID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("coachId", "body"))
	}
	if body.ProgramID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("programId", "body"))
	}
	if body.IntroCall == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("introCall", "body"))
	}
	return
}

// ValidateRegisterStripeExpressRequestBody runs the validations defined on
// RegisterStripeExpressRequestBody
func ValidateRegisterStripeExpressRequestBody(body *RegisterStripeExpressRequestBody) (err error) {
	if body.AuthorizationCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("authorizationCode", "body"))
	}
	return
}

// ValidateAdminLoginRequestBody runs the validations defined on
// AdminLoginRequestBody
func ValidateAdminLoginRequestBody(body *AdminLoginRequestBody) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Password == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("password", "body"))
	}
	return
}

// ValidateCoachResponse runs the validations defined on coachResponse
func ValidateCoachResponse(body *CoachResponse) (err error) {
	for _, e := range body.Certifications {
		if e != nil {
			if err2 := ValidateCertificationResponse(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, e := range body.Availability {
		if e != nil {
			if err2 := ValidateAvailabilityResponse(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateCertificationResponse runs the validations defined on
// certificationResponse
func ValidateCertificationResponse(body *CertificationResponse) (err error) {
	if body.Month < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("body.month", body.Month, 1, true))
	}
	if body.Month > 12 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("body.month", body.Month, 12, false))
	}
	if body.Year < 1900 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("body.year", body.Year, 1900, true))
	}
	if body.Year > 2100 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("body.year", body.Year, 2100, false))
	}
	return
}

// ValidateAvailabilityResponse runs the validations defined on
// availabilityResponse
func ValidateAvailabilityResponse(body *AvailabilityResponse) (err error) {
	if body.WeekDay < 0 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("body.weekDay", body.WeekDay, 0, true))
	}
	if body.WeekDay > 6 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("body.weekDay", body.WeekDay, 6, false))
	}
	return
}

// ValidateCertificationResponseBody runs the validations defined on
// certificationResponseBody
func ValidateCertificationResponseBody(body *CertificationResponseBody) (err error) {
	if body.Month < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("body.month", body.Month, 1, true))
	}
	if body.Month > 12 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("body.month", body.Month, 12, false))
	}
	if body.Year < 1900 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("body.year", body.Year, 1900, true))
	}
	if body.Year > 2100 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("body.year", body.Year, 2100, false))
	}
	return
}

// ValidateAvailabilityResponseBody runs the validations defined on
// availabilityResponseBody
func ValidateAvailabilityResponseBody(body *AvailabilityResponseBody) (err error) {
	if body.WeekDay < 0 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("body.weekDay", body.WeekDay, 0, true))
	}
	if body.WeekDay > 6 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("body.weekDay", body.WeekDay, 6, false))
	}
	return
}

// ValidateCertificationRequestBody runs the validations defined on
// certificationRequestBody
func ValidateCertificationRequestBody(body *CertificationRequestBody) (err error) {
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Institution == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("institution", "body"))
	}
	if body.Month == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("month", "body"))
	}
	if body.Year == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("year", "body"))
	}
	if body.Month != nil {
		if *body.Month < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.month", *body.Month, 1, true))
		}
	}
	if body.Month != nil {
		if *body.Month > 12 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.month", *body.Month, 12, false))
		}
	}
	if body.Year != nil {
		if *body.Year < 1900 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.year", *body.Year, 1900, true))
		}
	}
	if body.Year != nil {
		if *body.Year > 2100 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.year", *body.Year, 2100, false))
		}
	}
	return
}

// ValidateProgramRequestBody runs the validations defined on programRequestBody
func ValidateProgramRequestBody(body *ProgramRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Sessions == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("sessions", "body"))
	}
	if body.Duration == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("duration", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.TotalPrice == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("totalPrice", "body"))
	}
	if body.TaxPercent == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("taxPercent", "body"))
	}
	return
}
