// Code generated by goa v3.0.7, DO NOT EDIT.
//
// coachee HTTP server types
//
// Command:
// $ goa gen coachee-backend/design

package server

import (
	coachee "coachee-backend/gen/coachee"

	goa "goa.design/goa/v3/pkg"
)

// CreateCoachRequestBody is the type of the "coachee" service "CreateCoach"
// endpoint HTTP request body.
type CreateCoachRequestBody struct {
	FirstName      *string                      `form:"firstName,omitempty" json:"firstName,omitempty" xml:"firstName,omitempty"`
	LastName       *string                      `form:"lastName,omitempty" json:"lastName,omitempty" xml:"lastName,omitempty"`
	Email          *string                      `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	Phone          *string                      `form:"phone,omitempty" json:"phone,omitempty" xml:"phone,omitempty"`
	Tags           *string                      `form:"tags,omitempty" json:"tags,omitempty" xml:"tags,omitempty"`
	Description    *string                      `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	City           *string                      `form:"city,omitempty" json:"city,omitempty" xml:"city,omitempty"`
	Country        *string                      `form:"country,omitempty" json:"country,omitempty" xml:"country,omitempty"`
	Certifications []*CertificationsRequestBody `form:"certifications,omitempty" json:"certifications,omitempty" xml:"certifications,omitempty"`
	Programs       []*ProgramRequestBody        `form:"programs,omitempty" json:"programs,omitempty" xml:"programs,omitempty"`
	IntroCall      *uint                        `form:"introCall,omitempty" json:"introCall,omitempty" xml:"introCall,omitempty"`
}

// UpdateCoachRequestBody is the type of the "coachee" service "UpdateCoach"
// endpoint HTTP request body.
type UpdateCoachRequestBody struct {
	FirstName   *string `form:"firstName,omitempty" json:"firstName,omitempty" xml:"firstName,omitempty"`
	LastName    *string `form:"lastName,omitempty" json:"lastName,omitempty" xml:"lastName,omitempty"`
	Email       *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	Phone       *string `form:"phone,omitempty" json:"phone,omitempty" xml:"phone,omitempty"`
	Tags        *string `form:"tags,omitempty" json:"tags,omitempty" xml:"tags,omitempty"`
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	City        *string `form:"city,omitempty" json:"city,omitempty" xml:"city,omitempty"`
	Country     *string `form:"country,omitempty" json:"country,omitempty" xml:"country,omitempty"`
	IntroCall   *uint   `form:"introCall,omitempty" json:"introCall,omitempty" xml:"introCall,omitempty"`
	StripeID    *string `form:"stripeID,omitempty" json:"stripeID,omitempty" xml:"stripeID,omitempty"`
	PictureURL  *string `form:"pictureURL,omitempty" json:"pictureURL,omitempty" xml:"pictureURL,omitempty"`
}

// CreateCertificationRequestBody is the type of the "coachee" service
// "CreateCertification" endpoint HTTP request body.
type CreateCertificationRequestBody struct {
	Certification *CertificationsRequestBody `form:"certification,omitempty" json:"certification,omitempty" xml:"certification,omitempty"`
}

// CreateProgramRequestBody is the type of the "coachee" service
// "CreateProgram" endpoint HTTP request body.
type CreateProgramRequestBody struct {
	Program *ProgramRequestBody `form:"program,omitempty" json:"program,omitempty" xml:"program,omitempty"`
}

// CreateAvailabilityRequestBody is the type of the "coachee" service
// "CreateAvailability" endpoint HTTP request body.
type CreateAvailabilityRequestBody struct {
	Availability *AvailabilityRequestBody `form:"availability,omitempty" json:"availability,omitempty" xml:"availability,omitempty"`
}

// GetCoachesResponseBody is the type of the "coachee" service "GetCoaches"
// endpoint HTTP response body.
type GetCoachesResponseBody struct {
	ID             *uint                         `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	FirstName      *string                       `form:"firstName,omitempty" json:"firstName,omitempty" xml:"firstName,omitempty"`
	LastName       *string                       `form:"lastName,omitempty" json:"lastName,omitempty" xml:"lastName,omitempty"`
	Tags           *string                       `form:"tags,omitempty" json:"tags,omitempty" xml:"tags,omitempty"`
	Description    *string                       `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	City           *string                       `form:"city,omitempty" json:"city,omitempty" xml:"city,omitempty"`
	Country        *string                       `form:"country,omitempty" json:"country,omitempty" xml:"country,omitempty"`
	PictureURL     *string                       `form:"pictureURL,omitempty" json:"pictureURL,omitempty" xml:"pictureURL,omitempty"`
	Certifications []*CertificationsResponseBody `form:"certifications,omitempty" json:"certifications,omitempty" xml:"certifications,omitempty"`
	Programs       []*ProgramResponseBody        `form:"programs,omitempty" json:"programs,omitempty" xml:"programs,omitempty"`
	Availability   []*AvailabilityResponseBody   `form:"availability,omitempty" json:"availability,omitempty" xml:"availability,omitempty"`
}

// CertificationsResponseBody is used to define fields on response body types.
type CertificationsResponseBody struct {
	ID          *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Title       string  `form:"title" json:"title" xml:"title"`
	Description string  `form:"description" json:"description" xml:"description"`
	Institution string  `form:"institution" json:"institution" xml:"institution"`
	Month       uint    `form:"month" json:"month" xml:"month"`
	Year        uint    `form:"year" json:"year" xml:"year"`
}

// ProgramResponseBody is used to define fields on response body types.
type ProgramResponseBody struct {
	ID          *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name        string  `form:"name" json:"name" xml:"name"`
	Sessions    uint    `form:"sessions" json:"sessions" xml:"sessions"`
	Duration    uint    `form:"duration" json:"duration" xml:"duration"`
	Description string  `form:"description" json:"description" xml:"description"`
	TotalPrice  uint    `form:"totalPrice" json:"totalPrice" xml:"totalPrice"`
	TaxPercent  uint    `form:"taxPercent" json:"taxPercent" xml:"taxPercent"`
}

// AvailabilityResponseBody is used to define fields on response body types.
type AvailabilityResponseBody struct {
	ID      *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	WeekDay *uint   `form:"weekDay,omitempty" json:"weekDay,omitempty" xml:"weekDay,omitempty"`
	Start   *uint   `form:"start,omitempty" json:"start,omitempty" xml:"start,omitempty"`
	End     *uint   `form:"end,omitempty" json:"end,omitempty" xml:"end,omitempty"`
}

// CertificationsRequestBody is used to define fields on request body types.
type CertificationsRequestBody struct {
	ID          *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Title       *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	Institution *string `form:"institution,omitempty" json:"institution,omitempty" xml:"institution,omitempty"`
	Month       *uint   `form:"month,omitempty" json:"month,omitempty" xml:"month,omitempty"`
	Year        *uint   `form:"year,omitempty" json:"year,omitempty" xml:"year,omitempty"`
}

// ProgramRequestBody is used to define fields on request body types.
type ProgramRequestBody struct {
	ID          *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name        *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Sessions    *uint   `form:"sessions,omitempty" json:"sessions,omitempty" xml:"sessions,omitempty"`
	Duration    *uint   `form:"duration,omitempty" json:"duration,omitempty" xml:"duration,omitempty"`
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	TotalPrice  *uint   `form:"totalPrice,omitempty" json:"totalPrice,omitempty" xml:"totalPrice,omitempty"`
	TaxPercent  *uint   `form:"taxPercent,omitempty" json:"taxPercent,omitempty" xml:"taxPercent,omitempty"`
}

// AvailabilityRequestBody is used to define fields on request body types.
type AvailabilityRequestBody struct {
	ID      *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	WeekDay *uint   `form:"weekDay,omitempty" json:"weekDay,omitempty" xml:"weekDay,omitempty"`
	Start   *uint   `form:"start,omitempty" json:"start,omitempty" xml:"start,omitempty"`
	End     *uint   `form:"end,omitempty" json:"end,omitempty" xml:"end,omitempty"`
}

// NewGetCoachesResponseBody builds the HTTP response body from the result of
// the "GetCoaches" endpoint of the "coachee" service.
func NewGetCoachesResponseBody(res *coachee.Coach) *GetCoachesResponseBody {
	body := &GetCoachesResponseBody{
		ID:          res.ID,
		FirstName:   res.FirstName,
		LastName:    res.LastName,
		Tags:        res.Tags,
		Description: res.Description,
		City:        res.City,
		Country:     res.Country,
		PictureURL:  res.PictureURL,
	}
	if res.Certifications != nil {
		body.Certifications = make([]*CertificationsResponseBody, len(res.Certifications))
		for i, val := range res.Certifications {
			body.Certifications[i] = marshalCoacheeCertificationsToCertificationsResponseBody(val)
		}
	}
	if res.Programs != nil {
		body.Programs = make([]*ProgramResponseBody, len(res.Programs))
		for i, val := range res.Programs {
			body.Programs[i] = marshalCoacheeProgramToProgramResponseBody(val)
		}
	}
	if res.Availability != nil {
		body.Availability = make([]*AvailabilityResponseBody, len(res.Availability))
		for i, val := range res.Availability {
			body.Availability[i] = marshalCoacheeAvailabilityToAvailabilityResponseBody(val)
		}
	}
	return body
}

// NewGetCoachesPayload builds a coachee service GetCoaches endpoint payload.
func NewGetCoachesPayload(tag string, limit *uint, page *uint) *coachee.GetCoachesPayload {
	return &coachee.GetCoachesPayload{
		Tag:   tag,
		Limit: limit,
		Page:  page,
	}
}

// NewCreateCoachPayload builds a coachee service CreateCoach endpoint payload.
func NewCreateCoachPayload(body *CreateCoachRequestBody) *coachee.CreateCoachPayload {
	v := &coachee.CreateCoachPayload{
		FirstName:   *body.FirstName,
		LastName:    *body.LastName,
		Email:       *body.Email,
		Phone:       *body.Phone,
		Tags:        *body.Tags,
		Description: *body.Description,
		City:        body.City,
		Country:     body.Country,
		IntroCall:   *body.IntroCall,
	}
	v.Certifications = make([]*coachee.Certifications, len(body.Certifications))
	for i, val := range body.Certifications {
		v.Certifications[i] = unmarshalCertificationsRequestBodyToCoacheeCertifications(val)
	}
	v.Programs = make([]*coachee.Program, len(body.Programs))
	for i, val := range body.Programs {
		v.Programs[i] = unmarshalProgramRequestBodyToCoacheeProgram(val)
	}
	return v
}

// NewUpdateCoachPayload builds a coachee service UpdateCoach endpoint payload.
func NewUpdateCoachPayload(body *UpdateCoachRequestBody, id uint) *coachee.UpdateCoachPayload {
	v := &coachee.UpdateCoachPayload{
		FirstName:   body.FirstName,
		LastName:    body.LastName,
		Email:       body.Email,
		Phone:       body.Phone,
		Tags:        body.Tags,
		Description: body.Description,
		City:        body.City,
		Country:     body.Country,
		IntroCall:   body.IntroCall,
		StripeID:    body.StripeID,
		PictureURL:  body.PictureURL,
	}
	v.ID = id
	return v
}

// NewCreateCertificationPayload builds a coachee service CreateCertification
// endpoint payload.
func NewCreateCertificationPayload(body *CreateCertificationRequestBody, id uint) *coachee.CreateCertificationPayload {
	v := &coachee.CreateCertificationPayload{}
	v.Certification = unmarshalCertificationsRequestBodyToCoacheeCertifications(body.Certification)
	v.ID = id
	return v
}

// NewDeleteCertificationPayload builds a coachee service DeleteCertification
// endpoint payload.
func NewDeleteCertificationPayload(id uint, certID string) *coachee.DeleteCertificationPayload {
	return &coachee.DeleteCertificationPayload{
		ID:     id,
		CertID: certID,
	}
}

// NewCreateProgramPayload builds a coachee service CreateProgram endpoint
// payload.
func NewCreateProgramPayload(body *CreateProgramRequestBody, id uint) *coachee.CreateProgramPayload {
	v := &coachee.CreateProgramPayload{}
	v.Program = unmarshalProgramRequestBodyToCoacheeProgram(body.Program)
	v.ID = id
	return v
}

// NewDeleteProgramPayload builds a coachee service DeleteProgram endpoint
// payload.
func NewDeleteProgramPayload(id uint, programID string) *coachee.DeleteProgramPayload {
	return &coachee.DeleteProgramPayload{
		ID:        id,
		ProgramID: programID,
	}
}

// NewCreateAvailabilityPayload builds a coachee service CreateAvailability
// endpoint payload.
func NewCreateAvailabilityPayload(body *CreateAvailabilityRequestBody, id uint) *coachee.CreateAvailabilityPayload {
	v := &coachee.CreateAvailabilityPayload{}
	v.Availability = unmarshalAvailabilityRequestBodyToCoacheeAvailability(body.Availability)
	v.ID = id
	return v
}

// NewDeleteAvailabilityPayload builds a coachee service DeleteAvailability
// endpoint payload.
func NewDeleteAvailabilityPayload(id uint, avID string) *coachee.DeleteAvailabilityPayload {
	return &coachee.DeleteAvailabilityPayload{
		ID:   id,
		AvID: avID,
	}
}

// ValidateCreateCoachRequestBody runs the validations defined on
// CreateCoachRequestBody
func ValidateCreateCoachRequestBody(body *CreateCoachRequestBody) (err error) {
	if body.FirstName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("firstName", "body"))
	}
	if body.LastName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("lastName", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Phone == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("phone", "body"))
	}
	if body.Tags == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tags", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Certifications == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("certifications", "body"))
	}
	if body.Programs == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("programs", "body"))
	}
	if body.IntroCall == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("introCall", "body"))
	}
	for _, e := range body.Certifications {
		if e != nil {
			if err2 := ValidateCertificationsRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, e := range body.Programs {
		if e != nil {
			if err2 := ValidateProgramRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateCreateCertificationRequestBody runs the validations defined on
// CreateCertificationRequestBody
func ValidateCreateCertificationRequestBody(body *CreateCertificationRequestBody) (err error) {
	if body.Certification == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("certification", "body"))
	}
	if body.Certification != nil {
		if err2 := ValidateCertificationsRequestBody(body.Certification); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateCreateProgramRequestBody runs the validations defined on
// CreateProgramRequestBody
func ValidateCreateProgramRequestBody(body *CreateProgramRequestBody) (err error) {
	if body.Program == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("program", "body"))
	}
	if body.Program != nil {
		if err2 := ValidateProgramRequestBody(body.Program); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateCreateAvailabilityRequestBody runs the validations defined on
// CreateAvailabilityRequestBody
func ValidateCreateAvailabilityRequestBody(body *CreateAvailabilityRequestBody) (err error) {
	if body.Availability == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("availability", "body"))
	}
	if body.Availability != nil {
		if err2 := ValidateAvailabilityRequestBody(body.Availability); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateCertificationsResponseBody runs the validations defined on
// certificationsResponseBody
func ValidateCertificationsResponseBody(body *CertificationsResponseBody) (err error) {
	if body.Month < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("body.month", body.Month, 1, true))
	}
	if body.Month > 12 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("body.month", body.Month, 12, false))
	}
	if body.Year < 1900 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("body.year", body.Year, 1900, true))
	}
	if body.Year > 2100 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("body.year", body.Year, 2100, false))
	}
	return
}

// ValidateAvailabilityResponseBody runs the validations defined on
// availabilityResponseBody
func ValidateAvailabilityResponseBody(body *AvailabilityResponseBody) (err error) {
	if body.WeekDay != nil {
		if *body.WeekDay < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.weekDay", *body.WeekDay, 0, true))
		}
	}
	if body.WeekDay != nil {
		if *body.WeekDay > 6 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.weekDay", *body.WeekDay, 6, false))
		}
	}
	if body.Start != nil {
		if *body.Start < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.start", *body.Start, 0, true))
		}
	}
	if body.Start != nil {
		if *body.Start > 1440 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.start", *body.Start, 1440, false))
		}
	}
	if body.End != nil {
		if *body.End < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.end", *body.End, 0, true))
		}
	}
	if body.End != nil {
		if *body.End > 1440 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.end", *body.End, 1440, false))
		}
	}
	return
}

// ValidateCertificationsRequestBody runs the validations defined on
// certificationsRequestBody
func ValidateCertificationsRequestBody(body *CertificationsRequestBody) (err error) {
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Institution == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("institution", "body"))
	}
	if body.Month == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("month", "body"))
	}
	if body.Year == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("year", "body"))
	}
	if body.Month != nil {
		if *body.Month < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.month", *body.Month, 1, true))
		}
	}
	if body.Month != nil {
		if *body.Month > 12 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.month", *body.Month, 12, false))
		}
	}
	if body.Year != nil {
		if *body.Year < 1900 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.year", *body.Year, 1900, true))
		}
	}
	if body.Year != nil {
		if *body.Year > 2100 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.year", *body.Year, 2100, false))
		}
	}
	return
}

// ValidateProgramRequestBody runs the validations defined on programRequestBody
func ValidateProgramRequestBody(body *ProgramRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Sessions == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("sessions", "body"))
	}
	if body.Duration == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("duration", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.TotalPrice == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("totalPrice", "body"))
	}
	if body.TaxPercent == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("taxPercent", "body"))
	}
	return
}

// ValidateAvailabilityRequestBody runs the validations defined on
// availabilityRequestBody
func ValidateAvailabilityRequestBody(body *AvailabilityRequestBody) (err error) {
	if body.WeekDay != nil {
		if *body.WeekDay < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.weekDay", *body.WeekDay, 0, true))
		}
	}
	if body.WeekDay != nil {
		if *body.WeekDay > 6 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.weekDay", *body.WeekDay, 6, false))
		}
	}
	if body.Start != nil {
		if *body.Start < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.start", *body.Start, 0, true))
		}
	}
	if body.Start != nil {
		if *body.Start > 1440 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.start", *body.Start, 1440, false))
		}
	}
	if body.End != nil {
		if *body.End < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.end", *body.End, 0, true))
		}
	}
	if body.End != nil {
		if *body.End > 1440 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.end", *body.End, 1440, false))
		}
	}
	return
}
