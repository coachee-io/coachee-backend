// Code generated by goa v3.0.7, DO NOT EDIT.
//
// coachee HTTP server encoders and decoders
//
// Command:
// $ goa gen coachee-backend/design

package server

import (
	coachee "coachee-backend/gen/coachee"
	"context"
	"io"
	"net/http"
	"strconv"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeGetCoachesResponse returns an encoder for responses returned by the
// coachee GetCoaches endpoint.
func EncodeGetCoachesResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*coachee.Coach)
		enc := encoder(ctx, w)
		body := NewGetCoachesResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetCoachesRequest returns a decoder for requests sent to the coachee
// GetCoaches endpoint.
func DecodeGetCoachesRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			tag   string
			limit *uint
			page  *uint
			err   error

			params = mux.Vars(r)
		)
		tag = params["tag"]
		{
			limitRaw := r.URL.Query().Get("limit")
			if limitRaw != "" {
				v, err2 := strconv.ParseUint(limitRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("limit", limitRaw, "unsigned integer"))
				}
				pv := uint(v)
				limit = &pv
			}
		}
		{
			pageRaw := r.URL.Query().Get("page")
			if pageRaw != "" {
				v, err2 := strconv.ParseUint(pageRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("page", pageRaw, "unsigned integer"))
				}
				pv := uint(v)
				page = &pv
			}
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetCoachesPayload(tag, limit, page)

		return payload, nil
	}
}

// EncodeCreateCoachResponse returns an encoder for responses returned by the
// coachee CreateCoach endpoint.
func EncodeCreateCoachResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(uint)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeCreateCoachRequest returns a decoder for requests sent to the coachee
// CreateCoach endpoint.
func DecodeCreateCoachRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body CreateCoachRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateCoachRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewCreateCoachPayload(&body)

		return payload, nil
	}
}

// EncodeUpdateCoachResponse returns an encoder for responses returned by the
// coachee UpdateCoach endpoint.
func EncodeUpdateCoachResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusAccepted)
		return nil
	}
}

// DecodeUpdateCoachRequest returns a decoder for requests sent to the coachee
// UpdateCoach endpoint.
func DecodeUpdateCoachRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body UpdateCoachRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}

		var (
			id uint

			params = mux.Vars(r)
		)
		{
			idRaw := params["id"]
			v, err2 := strconv.ParseUint(idRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("id", idRaw, "unsigned integer"))
			}
			id = uint(v)
		}
		if err != nil {
			return nil, err
		}
		payload := NewUpdateCoachPayload(&body, id)

		return payload, nil
	}
}

// EncodeCreateCertificationResponse returns an encoder for responses returned
// by the coachee CreateCertification endpoint.
func EncodeCreateCertificationResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusAccepted)
		return nil
	}
}

// DecodeCreateCertificationRequest returns a decoder for requests sent to the
// coachee CreateCertification endpoint.
func DecodeCreateCertificationRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body CreateCertificationRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateCertificationRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			id uint

			params = mux.Vars(r)
		)
		{
			idRaw := params["id"]
			v, err2 := strconv.ParseUint(idRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("id", idRaw, "unsigned integer"))
			}
			id = uint(v)
		}
		if err != nil {
			return nil, err
		}
		payload := NewCreateCertificationPayload(&body, id)

		return payload, nil
	}
}

// EncodeDeleteCertificationResponse returns an encoder for responses returned
// by the coachee DeleteCertification endpoint.
func EncodeDeleteCertificationResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeDeleteCertificationRequest returns a decoder for requests sent to the
// coachee DeleteCertification endpoint.
func DecodeDeleteCertificationRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			id     uint
			certID string
			err    error

			params = mux.Vars(r)
		)
		{
			idRaw := params["id"]
			v, err2 := strconv.ParseUint(idRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("id", idRaw, "unsigned integer"))
			}
			id = uint(v)
		}
		certID = params["certID"]
		if err != nil {
			return nil, err
		}
		payload := NewDeleteCertificationPayload(id, certID)

		return payload, nil
	}
}

// EncodeCreateProgramResponse returns an encoder for responses returned by the
// coachee CreateProgram endpoint.
func EncodeCreateProgramResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusAccepted)
		return nil
	}
}

// DecodeCreateProgramRequest returns a decoder for requests sent to the
// coachee CreateProgram endpoint.
func DecodeCreateProgramRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body CreateProgramRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateProgramRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			id uint

			params = mux.Vars(r)
		)
		{
			idRaw := params["id"]
			v, err2 := strconv.ParseUint(idRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("id", idRaw, "unsigned integer"))
			}
			id = uint(v)
		}
		if err != nil {
			return nil, err
		}
		payload := NewCreateProgramPayload(&body, id)

		return payload, nil
	}
}

// EncodeDeleteProgramResponse returns an encoder for responses returned by the
// coachee DeleteProgram endpoint.
func EncodeDeleteProgramResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeDeleteProgramRequest returns a decoder for requests sent to the
// coachee DeleteProgram endpoint.
func DecodeDeleteProgramRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			id        uint
			programID string
			err       error

			params = mux.Vars(r)
		)
		{
			idRaw := params["id"]
			v, err2 := strconv.ParseUint(idRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("id", idRaw, "unsigned integer"))
			}
			id = uint(v)
		}
		programID = params["programID"]
		if err != nil {
			return nil, err
		}
		payload := NewDeleteProgramPayload(id, programID)

		return payload, nil
	}
}

// EncodeCreateAvailabilityResponse returns an encoder for responses returned
// by the coachee CreateAvailability endpoint.
func EncodeCreateAvailabilityResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusAccepted)
		return nil
	}
}

// DecodeCreateAvailabilityRequest returns a decoder for requests sent to the
// coachee CreateAvailability endpoint.
func DecodeCreateAvailabilityRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body CreateAvailabilityRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateAvailabilityRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			id uint

			params = mux.Vars(r)
		)
		{
			idRaw := params["id"]
			v, err2 := strconv.ParseUint(idRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("id", idRaw, "unsigned integer"))
			}
			id = uint(v)
		}
		if err != nil {
			return nil, err
		}
		payload := NewCreateAvailabilityPayload(&body, id)

		return payload, nil
	}
}

// EncodeDeleteAvailabilityResponse returns an encoder for responses returned
// by the coachee DeleteAvailability endpoint.
func EncodeDeleteAvailabilityResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeDeleteAvailabilityRequest returns a decoder for requests sent to the
// coachee DeleteAvailability endpoint.
func DecodeDeleteAvailabilityRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			id   uint
			avID string
			err  error

			params = mux.Vars(r)
		)
		{
			idRaw := params["id"]
			v, err2 := strconv.ParseUint(idRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("id", idRaw, "unsigned integer"))
			}
			id = uint(v)
		}
		avID = params["avID"]
		if err != nil {
			return nil, err
		}
		payload := NewDeleteAvailabilityPayload(id, avID)

		return payload, nil
	}
}

// marshalCoacheeCertificationsToCertificationsResponseBody builds a value of
// type *CertificationsResponseBody from a value of type
// *coachee.Certifications.
func marshalCoacheeCertificationsToCertificationsResponseBody(v *coachee.Certifications) *CertificationsResponseBody {
	if v == nil {
		return nil
	}
	res := &CertificationsResponseBody{
		ID:          v.ID,
		Title:       v.Title,
		Description: v.Description,
		Institution: v.Institution,
		Month:       v.Month,
		Year:        v.Year,
	}

	return res
}

// marshalCoacheeProgramToProgramResponseBody builds a value of type
// *ProgramResponseBody from a value of type *coachee.Program.
func marshalCoacheeProgramToProgramResponseBody(v *coachee.Program) *ProgramResponseBody {
	if v == nil {
		return nil
	}
	res := &ProgramResponseBody{
		ID:          v.ID,
		Name:        v.Name,
		Sessions:    v.Sessions,
		Duration:    v.Duration,
		Description: v.Description,
		TotalPrice:  v.TotalPrice,
		TaxPercent:  v.TaxPercent,
	}

	return res
}

// marshalCoacheeAvailabilityToAvailabilityResponseBody builds a value of type
// *AvailabilityResponseBody from a value of type *coachee.Availability.
func marshalCoacheeAvailabilityToAvailabilityResponseBody(v *coachee.Availability) *AvailabilityResponseBody {
	if v == nil {
		return nil
	}
	res := &AvailabilityResponseBody{
		ID:      v.ID,
		WeekDay: v.WeekDay,
		Start:   v.Start,
		End:     v.End,
	}

	return res
}

// unmarshalCertificationsRequestBodyToCoacheeCertifications builds a value of
// type *coachee.Certifications from a value of type *CertificationsRequestBody.
func unmarshalCertificationsRequestBodyToCoacheeCertifications(v *CertificationsRequestBody) *coachee.Certifications {
	res := &coachee.Certifications{
		ID:          v.ID,
		Title:       *v.Title,
		Description: *v.Description,
		Institution: *v.Institution,
		Month:       *v.Month,
		Year:        *v.Year,
	}

	return res
}

// unmarshalProgramRequestBodyToCoacheeProgram builds a value of type
// *coachee.Program from a value of type *ProgramRequestBody.
func unmarshalProgramRequestBodyToCoacheeProgram(v *ProgramRequestBody) *coachee.Program {
	res := &coachee.Program{
		ID:          v.ID,
		Name:        *v.Name,
		Sessions:    *v.Sessions,
		Duration:    *v.Duration,
		Description: *v.Description,
		TotalPrice:  *v.TotalPrice,
		TaxPercent:  *v.TaxPercent,
	}

	return res
}

// unmarshalAvailabilityRequestBodyToCoacheeAvailability builds a value of type
// *coachee.Availability from a value of type *AvailabilityRequestBody.
func unmarshalAvailabilityRequestBodyToCoacheeAvailability(v *AvailabilityRequestBody) *coachee.Availability {
	res := &coachee.Availability{
		ID:      v.ID,
		WeekDay: v.WeekDay,
		Start:   v.Start,
		End:     v.End,
	}

	return res
}
