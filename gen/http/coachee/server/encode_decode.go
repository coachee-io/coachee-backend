// Code generated by goa v3.0.9, DO NOT EDIT.
//
// coachee HTTP server encoders and decoders
//
// Command:
// $ goa gen coachee-backend/design

package server

import (
	coachee "coachee-backend/gen/coachee"
	"context"
	"io"
	"net/http"
	"strconv"
	"strings"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeGetCoachesResponse returns an encoder for responses returned by the
// coachee GetCoaches endpoint.
func EncodeGetCoachesResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.([]*coachee.Coach)
		enc := encoder(ctx, w)
		body := NewGetCoachesResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetCoachesRequest returns a decoder for requests sent to the coachee
// GetCoaches endpoint.
func DecodeGetCoachesRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			tag     *string
			limit   *uint
			page    *uint
			showAll *bool
			err     error
		)
		tagRaw := r.URL.Query().Get("tag")
		if tagRaw != "" {
			tag = &tagRaw
		}
		{
			limitRaw := r.URL.Query().Get("limit")
			if limitRaw != "" {
				v, err2 := strconv.ParseUint(limitRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("limit", limitRaw, "unsigned integer"))
				}
				pv := uint(v)
				limit = &pv
			}
		}
		{
			pageRaw := r.URL.Query().Get("page")
			if pageRaw != "" {
				v, err2 := strconv.ParseUint(pageRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("page", pageRaw, "unsigned integer"))
				}
				pv := uint(v)
				page = &pv
			}
		}
		{
			showAllRaw := r.URL.Query().Get("show_all")
			if showAllRaw != "" {
				v, err2 := strconv.ParseBool(showAllRaw)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("showAll", showAllRaw, "boolean"))
				}
				showAll = &v
			}
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetCoachesPayload(tag, limit, page, showAll)

		return payload, nil
	}
}

// EncodeGetCoachesError returns an encoder for errors returned by the
// GetCoaches coachee endpoint.
func EncodeGetCoachesError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "internal":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetCoachesInternalResponseBody(res)
			}
			w.Header().Set("goa-error", "internal")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "transient":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetCoachesTransientResponseBody(res)
			}
			w.Header().Set("goa-error", "transient")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "notFound":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetCoachesNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "notFound")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "validation":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetCoachesValidationResponseBody(res)
			}
			w.Header().Set("goa-error", "validation")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "unauthorized":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetCoachesUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", "unauthorized")
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeGetCoachResponse returns an encoder for responses returned by the
// coachee GetCoach endpoint.
func EncodeGetCoachResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*coachee.Coach)
		enc := encoder(ctx, w)
		body := NewGetCoachResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetCoachRequest returns a decoder for requests sent to the coachee
// GetCoach endpoint.
func DecodeGetCoachRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			id  uint
			err error

			params = mux.Vars(r)
		)
		{
			idRaw := params["id"]
			v, err2 := strconv.ParseUint(idRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("id", idRaw, "unsigned integer"))
			}
			id = uint(v)
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetCoachPayload(id)

		return payload, nil
	}
}

// EncodeGetCoachError returns an encoder for errors returned by the GetCoach
// coachee endpoint.
func EncodeGetCoachError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "internal":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetCoachInternalResponseBody(res)
			}
			w.Header().Set("goa-error", "internal")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "transient":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetCoachTransientResponseBody(res)
			}
			w.Header().Set("goa-error", "transient")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "notFound":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetCoachNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "notFound")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "validation":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetCoachValidationResponseBody(res)
			}
			w.Header().Set("goa-error", "validation")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "unauthorized":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetCoachUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", "unauthorized")
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeAdminGetCoachResponse returns an encoder for responses returned by the
// coachee AdminGetCoach endpoint.
func EncodeAdminGetCoachResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*coachee.FullCoach)
		enc := encoder(ctx, w)
		body := NewAdminGetCoachResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeAdminGetCoachRequest returns a decoder for requests sent to the
// coachee AdminGetCoach endpoint.
func DecodeAdminGetCoachRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			id    uint
			token string
			err   error

			params = mux.Vars(r)
		)
		{
			idRaw := params["id"]
			v, err2 := strconv.ParseUint(idRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("id", idRaw, "unsigned integer"))
			}
			id = uint(v)
		}
		token = r.Header.Get("Authorization")
		if token == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Authorization", "header"))
		}
		if err != nil {
			return nil, err
		}
		payload := NewAdminGetCoachPayload(id, token)
		if strings.Contains(payload.Token, " ") {
			// Remove authorization scheme prefix (e.g. "Bearer")
			cred := strings.SplitN(payload.Token, " ", 2)[1]
			payload.Token = cred
		}

		return payload, nil
	}
}

// EncodeAdminGetCoachError returns an encoder for errors returned by the
// AdminGetCoach coachee endpoint.
func EncodeAdminGetCoachError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "internal":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewAdminGetCoachInternalResponseBody(res)
			}
			w.Header().Set("goa-error", "internal")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "transient":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewAdminGetCoachTransientResponseBody(res)
			}
			w.Header().Set("goa-error", "transient")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "notFound":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewAdminGetCoachNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "notFound")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "validation":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewAdminGetCoachValidationResponseBody(res)
			}
			w.Header().Set("goa-error", "validation")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "unauthorized":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewAdminGetCoachUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", "unauthorized")
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeLenCoachesResponse returns an encoder for responses returned by the
// coachee LenCoaches endpoint.
func EncodeLenCoachesResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(uint)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeLenCoachesRequest returns a decoder for requests sent to the coachee
// LenCoaches endpoint.
func DecodeLenCoachesRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			tag string

			params = mux.Vars(r)
		)
		tag = params["tag"]
		payload := NewLenCoachesPayload(tag)

		return payload, nil
	}
}

// EncodeLenCoachesError returns an encoder for errors returned by the
// LenCoaches coachee endpoint.
func EncodeLenCoachesError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "internal":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewLenCoachesInternalResponseBody(res)
			}
			w.Header().Set("goa-error", "internal")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "transient":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewLenCoachesTransientResponseBody(res)
			}
			w.Header().Set("goa-error", "transient")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "notFound":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewLenCoachesNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "notFound")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "validation":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewLenCoachesValidationResponseBody(res)
			}
			w.Header().Set("goa-error", "validation")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "unauthorized":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewLenCoachesUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", "unauthorized")
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeCreateCoachResponse returns an encoder for responses returned by the
// coachee CreateCoach endpoint.
func EncodeCreateCoachResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(uint)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeCreateCoachRequest returns a decoder for requests sent to the coachee
// CreateCoach endpoint.
func DecodeCreateCoachRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body CreateCoachRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateCoachRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewCreateCoachPayload(&body)

		return payload, nil
	}
}

// EncodeCreateCoachError returns an encoder for errors returned by the
// CreateCoach coachee endpoint.
func EncodeCreateCoachError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "internal":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreateCoachInternalResponseBody(res)
			}
			w.Header().Set("goa-error", "internal")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "transient":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreateCoachTransientResponseBody(res)
			}
			w.Header().Set("goa-error", "transient")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "notFound":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreateCoachNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "notFound")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "validation":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreateCoachValidationResponseBody(res)
			}
			w.Header().Set("goa-error", "validation")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "unauthorized":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreateCoachUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", "unauthorized")
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeLoginCoachResponse returns an encoder for responses returned by the
// coachee LoginCoach endpoint.
func EncodeLoginCoachResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*coachee.LoginCoachResult)
		enc := encoder(ctx, w)
		body := NewLoginCoachResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeLoginCoachRequest returns a decoder for requests sent to the coachee
// LoginCoach endpoint.
func DecodeLoginCoachRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body LoginCoachRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateLoginCoachRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewLoginCoachPayload(&body)

		return payload, nil
	}
}

// EncodeLoginCoachError returns an encoder for errors returned by the
// LoginCoach coachee endpoint.
func EncodeLoginCoachError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "internal":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewLoginCoachInternalResponseBody(res)
			}
			w.Header().Set("goa-error", "internal")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "transient":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewLoginCoachTransientResponseBody(res)
			}
			w.Header().Set("goa-error", "transient")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "notFound":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewLoginCoachNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "notFound")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "validation":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewLoginCoachValidationResponseBody(res)
			}
			w.Header().Set("goa-error", "validation")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "unauthorized":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewLoginCoachUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", "unauthorized")
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeStartCoachPasswordRecoveryFlowResponse returns an encoder for
// responses returned by the coachee StartCoachPasswordRecoveryFlow endpoint.
func EncodeStartCoachPasswordRecoveryFlowResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeStartCoachPasswordRecoveryFlowRequest returns a decoder for requests
// sent to the coachee StartCoachPasswordRecoveryFlow endpoint.
func DecodeStartCoachPasswordRecoveryFlowRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body StartCoachPasswordRecoveryFlowRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateStartCoachPasswordRecoveryFlowRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewStartCoachPasswordRecoveryFlowPayload(&body)

		return payload, nil
	}
}

// EncodeStartCoachPasswordRecoveryFlowError returns an encoder for errors
// returned by the StartCoachPasswordRecoveryFlow coachee endpoint.
func EncodeStartCoachPasswordRecoveryFlowError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "internal":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewStartCoachPasswordRecoveryFlowInternalResponseBody(res)
			}
			w.Header().Set("goa-error", "internal")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "transient":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewStartCoachPasswordRecoveryFlowTransientResponseBody(res)
			}
			w.Header().Set("goa-error", "transient")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "notFound":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewStartCoachPasswordRecoveryFlowNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "notFound")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "validation":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewStartCoachPasswordRecoveryFlowValidationResponseBody(res)
			}
			w.Header().Set("goa-error", "validation")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "unauthorized":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewStartCoachPasswordRecoveryFlowUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", "unauthorized")
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeCheckCoachPasswordRecoveryTokenResponse returns an encoder for
// responses returned by the coachee CheckCoachPasswordRecoveryToken endpoint.
func EncodeCheckCoachPasswordRecoveryTokenResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeCheckCoachPasswordRecoveryTokenRequest returns a decoder for requests
// sent to the coachee CheckCoachPasswordRecoveryToken endpoint.
func DecodeCheckCoachPasswordRecoveryTokenRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			token string

			params = mux.Vars(r)
		)
		token = params["token"]
		payload := NewCheckCoachPasswordRecoveryTokenPayload(token)

		return payload, nil
	}
}

// EncodeCheckCoachPasswordRecoveryTokenError returns an encoder for errors
// returned by the CheckCoachPasswordRecoveryToken coachee endpoint.
func EncodeCheckCoachPasswordRecoveryTokenError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "internal":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCheckCoachPasswordRecoveryTokenInternalResponseBody(res)
			}
			w.Header().Set("goa-error", "internal")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "transient":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCheckCoachPasswordRecoveryTokenTransientResponseBody(res)
			}
			w.Header().Set("goa-error", "transient")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "notFound":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCheckCoachPasswordRecoveryTokenNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "notFound")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "validation":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCheckCoachPasswordRecoveryTokenValidationResponseBody(res)
			}
			w.Header().Set("goa-error", "validation")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "unauthorized":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCheckCoachPasswordRecoveryTokenUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", "unauthorized")
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeFinalizeCoachPasswordRecoveryFlowResponse returns an encoder for
// responses returned by the coachee FinalizeCoachPasswordRecoveryFlow endpoint.
func EncodeFinalizeCoachPasswordRecoveryFlowResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeFinalizeCoachPasswordRecoveryFlowRequest returns a decoder for
// requests sent to the coachee FinalizeCoachPasswordRecoveryFlow endpoint.
func DecodeFinalizeCoachPasswordRecoveryFlowRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body FinalizeCoachPasswordRecoveryFlowRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateFinalizeCoachPasswordRecoveryFlowRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			token string

			params = mux.Vars(r)
		)
		token = params["token"]
		payload := NewFinalizeCoachPasswordRecoveryFlowPayload(&body, token)

		return payload, nil
	}
}

// EncodeFinalizeCoachPasswordRecoveryFlowError returns an encoder for errors
// returned by the FinalizeCoachPasswordRecoveryFlow coachee endpoint.
func EncodeFinalizeCoachPasswordRecoveryFlowError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "internal":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewFinalizeCoachPasswordRecoveryFlowInternalResponseBody(res)
			}
			w.Header().Set("goa-error", "internal")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "transient":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewFinalizeCoachPasswordRecoveryFlowTransientResponseBody(res)
			}
			w.Header().Set("goa-error", "transient")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "notFound":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewFinalizeCoachPasswordRecoveryFlowNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "notFound")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "validation":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewFinalizeCoachPasswordRecoveryFlowValidationResponseBody(res)
			}
			w.Header().Set("goa-error", "validation")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "unauthorized":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewFinalizeCoachPasswordRecoveryFlowUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", "unauthorized")
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeUpdateCoachResponse returns an encoder for responses returned by the
// coachee UpdateCoach endpoint.
func EncodeUpdateCoachResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusAccepted)
		return nil
	}
}

// DecodeUpdateCoachRequest returns a decoder for requests sent to the coachee
// UpdateCoach endpoint.
func DecodeUpdateCoachRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body UpdateCoachRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}

		var (
			id    uint
			token string

			params = mux.Vars(r)
		)
		{
			idRaw := params["id"]
			v, err2 := strconv.ParseUint(idRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("id", idRaw, "unsigned integer"))
			}
			id = uint(v)
		}
		token = r.Header.Get("Authorization")
		if token == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Authorization", "header"))
		}
		if err != nil {
			return nil, err
		}
		payload := NewUpdateCoachPayload(&body, id, token)
		if strings.Contains(payload.Token, " ") {
			// Remove authorization scheme prefix (e.g. "Bearer")
			cred := strings.SplitN(payload.Token, " ", 2)[1]
			payload.Token = cred
		}

		return payload, nil
	}
}

// EncodeUpdateCoachError returns an encoder for errors returned by the
// UpdateCoach coachee endpoint.
func EncodeUpdateCoachError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "internal":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewUpdateCoachInternalResponseBody(res)
			}
			w.Header().Set("goa-error", "internal")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "transient":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewUpdateCoachTransientResponseBody(res)
			}
			w.Header().Set("goa-error", "transient")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "notFound":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewUpdateCoachNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "notFound")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "validation":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewUpdateCoachValidationResponseBody(res)
			}
			w.Header().Set("goa-error", "validation")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "unauthorized":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewUpdateCoachUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", "unauthorized")
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeCreateCertificationResponse returns an encoder for responses returned
// by the coachee CreateCertification endpoint.
func EncodeCreateCertificationResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusAccepted)
		return nil
	}
}

// DecodeCreateCertificationRequest returns a decoder for requests sent to the
// coachee CreateCertification endpoint.
func DecodeCreateCertificationRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body CreateCertificationRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateCertificationRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			id    uint
			token string

			params = mux.Vars(r)
		)
		{
			idRaw := params["id"]
			v, err2 := strconv.ParseUint(idRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("id", idRaw, "unsigned integer"))
			}
			id = uint(v)
		}
		token = r.Header.Get("Authorization")
		if token == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Authorization", "header"))
		}
		if err != nil {
			return nil, err
		}
		payload := NewCreateCertificationPayload(&body, id, token)
		if strings.Contains(payload.Token, " ") {
			// Remove authorization scheme prefix (e.g. "Bearer")
			cred := strings.SplitN(payload.Token, " ", 2)[1]
			payload.Token = cred
		}

		return payload, nil
	}
}

// EncodeCreateCertificationError returns an encoder for errors returned by the
// CreateCertification coachee endpoint.
func EncodeCreateCertificationError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "internal":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreateCertificationInternalResponseBody(res)
			}
			w.Header().Set("goa-error", "internal")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "transient":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreateCertificationTransientResponseBody(res)
			}
			w.Header().Set("goa-error", "transient")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "notFound":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreateCertificationNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "notFound")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "validation":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreateCertificationValidationResponseBody(res)
			}
			w.Header().Set("goa-error", "validation")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "unauthorized":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreateCertificationUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", "unauthorized")
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeDeleteCertificationResponse returns an encoder for responses returned
// by the coachee DeleteCertification endpoint.
func EncodeDeleteCertificationResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeDeleteCertificationRequest returns a decoder for requests sent to the
// coachee DeleteCertification endpoint.
func DecodeDeleteCertificationRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			id     uint
			certID string
			token  string
			err    error

			params = mux.Vars(r)
		)
		{
			idRaw := params["id"]
			v, err2 := strconv.ParseUint(idRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("id", idRaw, "unsigned integer"))
			}
			id = uint(v)
		}
		certID = params["certID"]
		token = r.Header.Get("Authorization")
		if token == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Authorization", "header"))
		}
		if err != nil {
			return nil, err
		}
		payload := NewDeleteCertificationPayload(id, certID, token)
		if strings.Contains(payload.Token, " ") {
			// Remove authorization scheme prefix (e.g. "Bearer")
			cred := strings.SplitN(payload.Token, " ", 2)[1]
			payload.Token = cred
		}

		return payload, nil
	}
}

// EncodeDeleteCertificationError returns an encoder for errors returned by the
// DeleteCertification coachee endpoint.
func EncodeDeleteCertificationError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "internal":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewDeleteCertificationInternalResponseBody(res)
			}
			w.Header().Set("goa-error", "internal")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "transient":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewDeleteCertificationTransientResponseBody(res)
			}
			w.Header().Set("goa-error", "transient")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "notFound":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewDeleteCertificationNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "notFound")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "validation":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewDeleteCertificationValidationResponseBody(res)
			}
			w.Header().Set("goa-error", "validation")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "unauthorized":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewDeleteCertificationUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", "unauthorized")
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeCreateProgramResponse returns an encoder for responses returned by the
// coachee CreateProgram endpoint.
func EncodeCreateProgramResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusAccepted)
		return nil
	}
}

// DecodeCreateProgramRequest returns a decoder for requests sent to the
// coachee CreateProgram endpoint.
func DecodeCreateProgramRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body CreateProgramRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateProgramRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			id    uint
			token string

			params = mux.Vars(r)
		)
		{
			idRaw := params["id"]
			v, err2 := strconv.ParseUint(idRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("id", idRaw, "unsigned integer"))
			}
			id = uint(v)
		}
		token = r.Header.Get("Authorization")
		if token == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Authorization", "header"))
		}
		if err != nil {
			return nil, err
		}
		payload := NewCreateProgramPayload(&body, id, token)
		if strings.Contains(payload.Token, " ") {
			// Remove authorization scheme prefix (e.g. "Bearer")
			cred := strings.SplitN(payload.Token, " ", 2)[1]
			payload.Token = cred
		}

		return payload, nil
	}
}

// EncodeCreateProgramError returns an encoder for errors returned by the
// CreateProgram coachee endpoint.
func EncodeCreateProgramError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "internal":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreateProgramInternalResponseBody(res)
			}
			w.Header().Set("goa-error", "internal")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "transient":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreateProgramTransientResponseBody(res)
			}
			w.Header().Set("goa-error", "transient")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "notFound":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreateProgramNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "notFound")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "validation":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreateProgramValidationResponseBody(res)
			}
			w.Header().Set("goa-error", "validation")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "unauthorized":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreateProgramUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", "unauthorized")
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeDeleteProgramResponse returns an encoder for responses returned by the
// coachee DeleteProgram endpoint.
func EncodeDeleteProgramResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeDeleteProgramRequest returns a decoder for requests sent to the
// coachee DeleteProgram endpoint.
func DecodeDeleteProgramRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			id        uint
			programID string
			token     string
			err       error

			params = mux.Vars(r)
		)
		{
			idRaw := params["id"]
			v, err2 := strconv.ParseUint(idRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("id", idRaw, "unsigned integer"))
			}
			id = uint(v)
		}
		programID = params["programID"]
		token = r.Header.Get("Authorization")
		if token == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Authorization", "header"))
		}
		if err != nil {
			return nil, err
		}
		payload := NewDeleteProgramPayload(id, programID, token)
		if strings.Contains(payload.Token, " ") {
			// Remove authorization scheme prefix (e.g. "Bearer")
			cred := strings.SplitN(payload.Token, " ", 2)[1]
			payload.Token = cred
		}

		return payload, nil
	}
}

// EncodeDeleteProgramError returns an encoder for errors returned by the
// DeleteProgram coachee endpoint.
func EncodeDeleteProgramError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "internal":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewDeleteProgramInternalResponseBody(res)
			}
			w.Header().Set("goa-error", "internal")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "transient":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewDeleteProgramTransientResponseBody(res)
			}
			w.Header().Set("goa-error", "transient")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "notFound":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewDeleteProgramNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "notFound")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "validation":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewDeleteProgramValidationResponseBody(res)
			}
			w.Header().Set("goa-error", "validation")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "unauthorized":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewDeleteProgramUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", "unauthorized")
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeCreateAvailabilityResponse returns an encoder for responses returned
// by the coachee CreateAvailability endpoint.
func EncodeCreateAvailabilityResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusAccepted)
		return nil
	}
}

// DecodeCreateAvailabilityRequest returns a decoder for requests sent to the
// coachee CreateAvailability endpoint.
func DecodeCreateAvailabilityRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body CreateAvailabilityRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateAvailabilityRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			id    uint
			token string

			params = mux.Vars(r)
		)
		{
			idRaw := params["id"]
			v, err2 := strconv.ParseUint(idRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("id", idRaw, "unsigned integer"))
			}
			id = uint(v)
		}
		token = r.Header.Get("Authorization")
		if token == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Authorization", "header"))
		}
		if err != nil {
			return nil, err
		}
		payload := NewCreateAvailabilityPayload(&body, id, token)
		if strings.Contains(payload.Token, " ") {
			// Remove authorization scheme prefix (e.g. "Bearer")
			cred := strings.SplitN(payload.Token, " ", 2)[1]
			payload.Token = cred
		}

		return payload, nil
	}
}

// EncodeCreateAvailabilityError returns an encoder for errors returned by the
// CreateAvailability coachee endpoint.
func EncodeCreateAvailabilityError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "internal":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreateAvailabilityInternalResponseBody(res)
			}
			w.Header().Set("goa-error", "internal")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "transient":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreateAvailabilityTransientResponseBody(res)
			}
			w.Header().Set("goa-error", "transient")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "notFound":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreateAvailabilityNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "notFound")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "validation":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreateAvailabilityValidationResponseBody(res)
			}
			w.Header().Set("goa-error", "validation")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "unauthorized":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreateAvailabilityUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", "unauthorized")
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeDeleteAvailabilityResponse returns an encoder for responses returned
// by the coachee DeleteAvailability endpoint.
func EncodeDeleteAvailabilityResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeDeleteAvailabilityRequest returns a decoder for requests sent to the
// coachee DeleteAvailability endpoint.
func DecodeDeleteAvailabilityRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			id    uint
			avID  string
			token string
			err   error

			params = mux.Vars(r)
		)
		{
			idRaw := params["id"]
			v, err2 := strconv.ParseUint(idRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("id", idRaw, "unsigned integer"))
			}
			id = uint(v)
		}
		avID = params["avID"]
		token = r.Header.Get("Authorization")
		if token == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Authorization", "header"))
		}
		if err != nil {
			return nil, err
		}
		payload := NewDeleteAvailabilityPayload(id, avID, token)
		if strings.Contains(payload.Token, " ") {
			// Remove authorization scheme prefix (e.g. "Bearer")
			cred := strings.SplitN(payload.Token, " ", 2)[1]
			payload.Token = cred
		}

		return payload, nil
	}
}

// EncodeDeleteAvailabilityError returns an encoder for errors returned by the
// DeleteAvailability coachee endpoint.
func EncodeDeleteAvailabilityError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "internal":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewDeleteAvailabilityInternalResponseBody(res)
			}
			w.Header().Set("goa-error", "internal")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "transient":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewDeleteAvailabilityTransientResponseBody(res)
			}
			w.Header().Set("goa-error", "transient")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "notFound":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewDeleteAvailabilityNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "notFound")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "validation":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewDeleteAvailabilityValidationResponseBody(res)
			}
			w.Header().Set("goa-error", "validation")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "unauthorized":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewDeleteAvailabilityUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", "unauthorized")
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeCreateCustomerResponse returns an encoder for responses returned by
// the coachee CreateCustomer endpoint.
func EncodeCreateCustomerResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*coachee.CreateCustomerResult)
		enc := encoder(ctx, w)
		body := NewCreateCustomerResponseBody(res)
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeCreateCustomerRequest returns a decoder for requests sent to the
// coachee CreateCustomer endpoint.
func DecodeCreateCustomerRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body CreateCustomerRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateCustomerRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewCreateCustomerPayload(&body)

		return payload, nil
	}
}

// EncodeCreateCustomerError returns an encoder for errors returned by the
// CreateCustomer coachee endpoint.
func EncodeCreateCustomerError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "internal":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreateCustomerInternalResponseBody(res)
			}
			w.Header().Set("goa-error", "internal")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "transient":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreateCustomerTransientResponseBody(res)
			}
			w.Header().Set("goa-error", "transient")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "notFound":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreateCustomerNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "notFound")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "validation":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreateCustomerValidationResponseBody(res)
			}
			w.Header().Set("goa-error", "validation")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "unauthorized":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreateCustomerUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", "unauthorized")
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeCustomerLoginResponse returns an encoder for responses returned by the
// coachee CustomerLogin endpoint.
func EncodeCustomerLoginResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*coachee.CustomerLoginResult)
		enc := encoder(ctx, w)
		body := NewCustomerLoginResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeCustomerLoginRequest returns a decoder for requests sent to the
// coachee CustomerLogin endpoint.
func DecodeCustomerLoginRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body CustomerLoginRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCustomerLoginRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewCustomerLoginPayload(&body)

		return payload, nil
	}
}

// EncodeCustomerLoginError returns an encoder for errors returned by the
// CustomerLogin coachee endpoint.
func EncodeCustomerLoginError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "internal":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCustomerLoginInternalResponseBody(res)
			}
			w.Header().Set("goa-error", "internal")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "transient":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCustomerLoginTransientResponseBody(res)
			}
			w.Header().Set("goa-error", "transient")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "notFound":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCustomerLoginNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "notFound")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "validation":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCustomerLoginValidationResponseBody(res)
			}
			w.Header().Set("goa-error", "validation")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "unauthorized":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCustomerLoginUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", "unauthorized")
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeStartPasswordRecoveryFlowResponse returns an encoder for responses
// returned by the coachee StartPasswordRecoveryFlow endpoint.
func EncodeStartPasswordRecoveryFlowResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeStartPasswordRecoveryFlowRequest returns a decoder for requests sent
// to the coachee StartPasswordRecoveryFlow endpoint.
func DecodeStartPasswordRecoveryFlowRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body StartPasswordRecoveryFlowRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateStartPasswordRecoveryFlowRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewStartPasswordRecoveryFlowPayload(&body)

		return payload, nil
	}
}

// EncodeStartPasswordRecoveryFlowError returns an encoder for errors returned
// by the StartPasswordRecoveryFlow coachee endpoint.
func EncodeStartPasswordRecoveryFlowError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "internal":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewStartPasswordRecoveryFlowInternalResponseBody(res)
			}
			w.Header().Set("goa-error", "internal")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "transient":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewStartPasswordRecoveryFlowTransientResponseBody(res)
			}
			w.Header().Set("goa-error", "transient")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "notFound":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewStartPasswordRecoveryFlowNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "notFound")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "validation":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewStartPasswordRecoveryFlowValidationResponseBody(res)
			}
			w.Header().Set("goa-error", "validation")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "unauthorized":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewStartPasswordRecoveryFlowUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", "unauthorized")
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeCheckPasswordRecoveryTokenResponse returns an encoder for responses
// returned by the coachee CheckPasswordRecoveryToken endpoint.
func EncodeCheckPasswordRecoveryTokenResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeCheckPasswordRecoveryTokenRequest returns a decoder for requests sent
// to the coachee CheckPasswordRecoveryToken endpoint.
func DecodeCheckPasswordRecoveryTokenRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			token string

			params = mux.Vars(r)
		)
		token = params["token"]
		payload := NewCheckPasswordRecoveryTokenPayload(token)

		return payload, nil
	}
}

// EncodeCheckPasswordRecoveryTokenError returns an encoder for errors returned
// by the CheckPasswordRecoveryToken coachee endpoint.
func EncodeCheckPasswordRecoveryTokenError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "internal":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCheckPasswordRecoveryTokenInternalResponseBody(res)
			}
			w.Header().Set("goa-error", "internal")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "transient":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCheckPasswordRecoveryTokenTransientResponseBody(res)
			}
			w.Header().Set("goa-error", "transient")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "notFound":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCheckPasswordRecoveryTokenNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "notFound")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "validation":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCheckPasswordRecoveryTokenValidationResponseBody(res)
			}
			w.Header().Set("goa-error", "validation")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "unauthorized":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCheckPasswordRecoveryTokenUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", "unauthorized")
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeFinalizePasswordRecoveryFlowResponse returns an encoder for responses
// returned by the coachee FinalizePasswordRecoveryFlow endpoint.
func EncodeFinalizePasswordRecoveryFlowResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeFinalizePasswordRecoveryFlowRequest returns a decoder for requests
// sent to the coachee FinalizePasswordRecoveryFlow endpoint.
func DecodeFinalizePasswordRecoveryFlowRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body FinalizePasswordRecoveryFlowRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateFinalizePasswordRecoveryFlowRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			token string

			params = mux.Vars(r)
		)
		token = params["token"]
		payload := NewFinalizePasswordRecoveryFlowPayload(&body, token)

		return payload, nil
	}
}

// EncodeFinalizePasswordRecoveryFlowError returns an encoder for errors
// returned by the FinalizePasswordRecoveryFlow coachee endpoint.
func EncodeFinalizePasswordRecoveryFlowError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "internal":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewFinalizePasswordRecoveryFlowInternalResponseBody(res)
			}
			w.Header().Set("goa-error", "internal")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "transient":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewFinalizePasswordRecoveryFlowTransientResponseBody(res)
			}
			w.Header().Set("goa-error", "transient")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "notFound":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewFinalizePasswordRecoveryFlowNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "notFound")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "validation":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewFinalizePasswordRecoveryFlowValidationResponseBody(res)
			}
			w.Header().Set("goa-error", "validation")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "unauthorized":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewFinalizePasswordRecoveryFlowUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", "unauthorized")
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeCreateOrderResponse returns an encoder for responses returned by the
// coachee CreateOrder endpoint.
func EncodeCreateOrderResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*coachee.CreateOrderResult)
		enc := encoder(ctx, w)
		body := NewCreateOrderResponseBody(res)
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeCreateOrderRequest returns a decoder for requests sent to the coachee
// CreateOrder endpoint.
func DecodeCreateOrderRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body CreateOrderRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateOrderRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			token string
		)
		token = r.Header.Get("Authorization")
		if token == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Authorization", "header"))
		}
		if err != nil {
			return nil, err
		}
		payload := NewCreateOrderPayload(&body, token)
		if strings.Contains(payload.Token, " ") {
			// Remove authorization scheme prefix (e.g. "Bearer")
			cred := strings.SplitN(payload.Token, " ", 2)[1]
			payload.Token = cred
		}

		return payload, nil
	}
}

// EncodeCreateOrderError returns an encoder for errors returned by the
// CreateOrder coachee endpoint.
func EncodeCreateOrderError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "internal":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreateOrderInternalResponseBody(res)
			}
			w.Header().Set("goa-error", "internal")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "transient":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreateOrderTransientResponseBody(res)
			}
			w.Header().Set("goa-error", "transient")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "notFound":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreateOrderNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "notFound")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "validation":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreateOrderValidationResponseBody(res)
			}
			w.Header().Set("goa-error", "validation")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "unauthorized":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreateOrderUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", "unauthorized")
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeRegisterStripeExpressResponse returns an encoder for responses
// returned by the coachee RegisterStripeExpress endpoint.
func EncodeRegisterStripeExpressResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusCreated)
		return nil
	}
}

// DecodeRegisterStripeExpressRequest returns a decoder for requests sent to
// the coachee RegisterStripeExpress endpoint.
func DecodeRegisterStripeExpressRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body RegisterStripeExpressRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateRegisterStripeExpressRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			id uint

			params = mux.Vars(r)
		)
		{
			idRaw := params["id"]
			v, err2 := strconv.ParseUint(idRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("id", idRaw, "unsigned integer"))
			}
			id = uint(v)
		}
		if err != nil {
			return nil, err
		}
		payload := NewRegisterStripeExpressPayload(&body, id)

		return payload, nil
	}
}

// EncodeRegisterStripeExpressError returns an encoder for errors returned by
// the RegisterStripeExpress coachee endpoint.
func EncodeRegisterStripeExpressError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "internal":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewRegisterStripeExpressInternalResponseBody(res)
			}
			w.Header().Set("goa-error", "internal")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "transient":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewRegisterStripeExpressTransientResponseBody(res)
			}
			w.Header().Set("goa-error", "transient")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "notFound":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewRegisterStripeExpressNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "notFound")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "validation":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewRegisterStripeExpressValidationResponseBody(res)
			}
			w.Header().Set("goa-error", "validation")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "unauthorized":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewRegisterStripeExpressUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", "unauthorized")
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeAdminLoginResponse returns an encoder for responses returned by the
// coachee AdminLogin endpoint.
func EncodeAdminLoginResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*coachee.AdminLoginResult)
		enc := encoder(ctx, w)
		body := NewAdminLoginResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeAdminLoginRequest returns a decoder for requests sent to the coachee
// AdminLogin endpoint.
func DecodeAdminLoginRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body AdminLoginRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateAdminLoginRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewAdminLoginPayload(&body)

		return payload, nil
	}
}

// EncodeAdminLoginError returns an encoder for errors returned by the
// AdminLogin coachee endpoint.
func EncodeAdminLoginError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "internal":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewAdminLoginInternalResponseBody(res)
			}
			w.Header().Set("goa-error", "internal")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "transient":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewAdminLoginTransientResponseBody(res)
			}
			w.Header().Set("goa-error", "transient")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "notFound":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewAdminLoginNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "notFound")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "validation":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewAdminLoginValidationResponseBody(res)
			}
			w.Header().Set("goa-error", "validation")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "unauthorized":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewAdminLoginUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", "unauthorized")
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// marshalCoacheeCertificationToCertificationResponse builds a value of type
// *CertificationResponse from a value of type *coachee.Certification.
func marshalCoacheeCertificationToCertificationResponse(v *coachee.Certification) *CertificationResponse {
	if v == nil {
		return nil
	}
	res := &CertificationResponse{
		ID:          v.ID,
		Title:       v.Title,
		Description: v.Description,
		Institution: v.Institution,
		Month:       v.Month,
		Year:        v.Year,
	}

	return res
}

// marshalCoacheeProgramToProgramResponse builds a value of type
// *ProgramResponse from a value of type *coachee.Program.
func marshalCoacheeProgramToProgramResponse(v *coachee.Program) *ProgramResponse {
	if v == nil {
		return nil
	}
	res := &ProgramResponse{
		ID:          v.ID,
		Name:        v.Name,
		Sessions:    v.Sessions,
		Duration:    v.Duration,
		Description: v.Description,
		TotalPrice:  v.TotalPrice,
		TaxPercent:  v.TaxPercent,
	}

	return res
}

// marshalCoacheeAvailabilityToAvailabilityResponse builds a value of type
// *AvailabilityResponse from a value of type *coachee.Availability.
func marshalCoacheeAvailabilityToAvailabilityResponse(v *coachee.Availability) *AvailabilityResponse {
	if v == nil {
		return nil
	}
	res := &AvailabilityResponse{
		ID:       v.ID,
		WeekDay:  v.WeekDay,
		Start:    v.Start,
		End:      v.End,
		DateText: v.DateText,
	}

	return res
}

// marshalCoacheeCertificationToCertificationResponseBody builds a value of
// type *CertificationResponseBody from a value of type *coachee.Certification.
func marshalCoacheeCertificationToCertificationResponseBody(v *coachee.Certification) *CertificationResponseBody {
	if v == nil {
		return nil
	}
	res := &CertificationResponseBody{
		ID:          v.ID,
		Title:       v.Title,
		Description: v.Description,
		Institution: v.Institution,
		Month:       v.Month,
		Year:        v.Year,
	}

	return res
}

// marshalCoacheeProgramToProgramResponseBody builds a value of type
// *ProgramResponseBody from a value of type *coachee.Program.
func marshalCoacheeProgramToProgramResponseBody(v *coachee.Program) *ProgramResponseBody {
	if v == nil {
		return nil
	}
	res := &ProgramResponseBody{
		ID:          v.ID,
		Name:        v.Name,
		Sessions:    v.Sessions,
		Duration:    v.Duration,
		Description: v.Description,
		TotalPrice:  v.TotalPrice,
		TaxPercent:  v.TaxPercent,
	}

	return res
}

// marshalCoacheeAvailabilityToAvailabilityResponseBody builds a value of type
// *AvailabilityResponseBody from a value of type *coachee.Availability.
func marshalCoacheeAvailabilityToAvailabilityResponseBody(v *coachee.Availability) *AvailabilityResponseBody {
	if v == nil {
		return nil
	}
	res := &AvailabilityResponseBody{
		ID:       v.ID,
		WeekDay:  v.WeekDay,
		Start:    v.Start,
		End:      v.End,
		DateText: v.DateText,
	}

	return res
}

// unmarshalCertificationRequestBodyToCoacheeCertification builds a value of
// type *coachee.Certification from a value of type *CertificationRequestBody.
func unmarshalCertificationRequestBodyToCoacheeCertification(v *CertificationRequestBody) *coachee.Certification {
	res := &coachee.Certification{
		ID:          v.ID,
		Title:       *v.Title,
		Description: *v.Description,
		Institution: *v.Institution,
		Month:       *v.Month,
		Year:        *v.Year,
	}

	return res
}

// unmarshalProgramRequestBodyToCoacheeProgram builds a value of type
// *coachee.Program from a value of type *ProgramRequestBody.
func unmarshalProgramRequestBodyToCoacheeProgram(v *ProgramRequestBody) *coachee.Program {
	res := &coachee.Program{
		ID:          v.ID,
		Name:        *v.Name,
		Sessions:    *v.Sessions,
		Duration:    *v.Duration,
		Description: *v.Description,
		TotalPrice:  *v.TotalPrice,
		TaxPercent:  *v.TaxPercent,
	}

	return res
}

// marshalCoacheeBaseClientToBaseClientResponseBody builds a value of type
// *BaseClientResponseBody from a value of type *coachee.BaseClient.
func marshalCoacheeBaseClientToBaseClientResponseBody(v *coachee.BaseClient) *BaseClientResponseBody {
	res := &BaseClientResponseBody{
		ID:        v.ID,
		FirstName: v.FirstName,
		LastName:  v.LastName,
	}

	return res
}
