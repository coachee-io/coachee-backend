// Code generated by goa v3.0.9, DO NOT EDIT.
//
// coachee HTTP server
//
// Command:
// $ goa gen coachee-backend/design

package server

import (
	coachee "coachee-backend/gen/coachee"
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	"goa.design/plugins/v3/cors"
)

// Server lists the coachee service endpoint HTTP handlers.
type Server struct {
	Mounts              []*MountPoint
	GetCoaches          http.Handler
	GetCoach            http.Handler
	LenCoaches          http.Handler
	CreateCoach         http.Handler
	UpdateCoach         http.Handler
	CreateCertification http.Handler
	DeleteCertification http.Handler
	CreateProgram       http.Handler
	DeleteProgram       http.Handler
	CreateAvailability  http.Handler
	DeleteAvailability  http.Handler
	CreateCustomer      http.Handler
	CustomerLogin       http.Handler
	CreateOrder         http.Handler
	CORS                http.Handler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the design.
type ErrorNamer interface {
	ErrorName() string
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the coachee service endpoints using
// the provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *coachee.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"GetCoaches", "GET", "/coaches"},
			{"GetCoach", "GET", "/coaches/{id}"},
			{"LenCoaches", "GET", "/coaches/{tag}/length"},
			{"CreateCoach", "POST", "/coaches"},
			{"UpdateCoach", "POST", "/coaches/{id}"},
			{"CreateCertification", "POST", "/coaches/{id}/certifications"},
			{"DeleteCertification", "DELETE", "/coaches/{id}/certifications/{certID}"},
			{"CreateProgram", "POST", "/coaches/{id}/programs"},
			{"DeleteProgram", "DELETE", "/coaches/{id}/programs/{programID}"},
			{"CreateAvailability", "POST", "/coaches/{id}/availability"},
			{"DeleteAvailability", "DELETE", "/coaches/{id}/availability/{avID}"},
			{"CreateCustomer", "POST", "/clients"},
			{"CustomerLogin", "POST", "/clients/login"},
			{"CreateOrder", "POST", "/orders"},
			{"CORS", "OPTIONS", "/coaches"},
			{"CORS", "OPTIONS", "/coaches/{id}"},
			{"CORS", "OPTIONS", "/coaches/{tag}/length"},
			{"CORS", "OPTIONS", "/coaches/{id}/certifications"},
			{"CORS", "OPTIONS", "/coaches/{id}/certifications/{certID}"},
			{"CORS", "OPTIONS", "/coaches/{id}/programs"},
			{"CORS", "OPTIONS", "/coaches/{id}/programs/{programID}"},
			{"CORS", "OPTIONS", "/coaches/{id}/availability"},
			{"CORS", "OPTIONS", "/coaches/{id}/availability/{avID}"},
			{"CORS", "OPTIONS", "/clients"},
			{"CORS", "OPTIONS", "/clients/login"},
			{"CORS", "OPTIONS", "/orders"},
		},
		GetCoaches:          NewGetCoachesHandler(e.GetCoaches, mux, decoder, encoder, errhandler, formatter),
		GetCoach:            NewGetCoachHandler(e.GetCoach, mux, decoder, encoder, errhandler, formatter),
		LenCoaches:          NewLenCoachesHandler(e.LenCoaches, mux, decoder, encoder, errhandler, formatter),
		CreateCoach:         NewCreateCoachHandler(e.CreateCoach, mux, decoder, encoder, errhandler, formatter),
		UpdateCoach:         NewUpdateCoachHandler(e.UpdateCoach, mux, decoder, encoder, errhandler, formatter),
		CreateCertification: NewCreateCertificationHandler(e.CreateCertification, mux, decoder, encoder, errhandler, formatter),
		DeleteCertification: NewDeleteCertificationHandler(e.DeleteCertification, mux, decoder, encoder, errhandler, formatter),
		CreateProgram:       NewCreateProgramHandler(e.CreateProgram, mux, decoder, encoder, errhandler, formatter),
		DeleteProgram:       NewDeleteProgramHandler(e.DeleteProgram, mux, decoder, encoder, errhandler, formatter),
		CreateAvailability:  NewCreateAvailabilityHandler(e.CreateAvailability, mux, decoder, encoder, errhandler, formatter),
		DeleteAvailability:  NewDeleteAvailabilityHandler(e.DeleteAvailability, mux, decoder, encoder, errhandler, formatter),
		CreateCustomer:      NewCreateCustomerHandler(e.CreateCustomer, mux, decoder, encoder, errhandler, formatter),
		CustomerLogin:       NewCustomerLoginHandler(e.CustomerLogin, mux, decoder, encoder, errhandler, formatter),
		CreateOrder:         NewCreateOrderHandler(e.CreateOrder, mux, decoder, encoder, errhandler, formatter),
		CORS:                NewCORSHandler(),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "coachee" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.GetCoaches = m(s.GetCoaches)
	s.GetCoach = m(s.GetCoach)
	s.LenCoaches = m(s.LenCoaches)
	s.CreateCoach = m(s.CreateCoach)
	s.UpdateCoach = m(s.UpdateCoach)
	s.CreateCertification = m(s.CreateCertification)
	s.DeleteCertification = m(s.DeleteCertification)
	s.CreateProgram = m(s.CreateProgram)
	s.DeleteProgram = m(s.DeleteProgram)
	s.CreateAvailability = m(s.CreateAvailability)
	s.DeleteAvailability = m(s.DeleteAvailability)
	s.CreateCustomer = m(s.CreateCustomer)
	s.CustomerLogin = m(s.CustomerLogin)
	s.CreateOrder = m(s.CreateOrder)
	s.CORS = m(s.CORS)
}

// Mount configures the mux to serve the coachee endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountGetCoachesHandler(mux, h.GetCoaches)
	MountGetCoachHandler(mux, h.GetCoach)
	MountLenCoachesHandler(mux, h.LenCoaches)
	MountCreateCoachHandler(mux, h.CreateCoach)
	MountUpdateCoachHandler(mux, h.UpdateCoach)
	MountCreateCertificationHandler(mux, h.CreateCertification)
	MountDeleteCertificationHandler(mux, h.DeleteCertification)
	MountCreateProgramHandler(mux, h.CreateProgram)
	MountDeleteProgramHandler(mux, h.DeleteProgram)
	MountCreateAvailabilityHandler(mux, h.CreateAvailability)
	MountDeleteAvailabilityHandler(mux, h.DeleteAvailability)
	MountCreateCustomerHandler(mux, h.CreateCustomer)
	MountCustomerLoginHandler(mux, h.CustomerLogin)
	MountCreateOrderHandler(mux, h.CreateOrder)
	MountCORSHandler(mux, h.CORS)
}

// MountGetCoachesHandler configures the mux to serve the "coachee" service
// "GetCoaches" endpoint.
func MountGetCoachesHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleCoacheeOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/coaches", f)
}

// NewGetCoachesHandler creates a HTTP handler which loads the HTTP request and
// calls the "coachee" service "GetCoaches" endpoint.
func NewGetCoachesHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetCoachesRequest(mux, decoder)
		encodeResponse = EncodeGetCoachesResponse(encoder)
		encodeError    = EncodeGetCoachesError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "GetCoaches")
		ctx = context.WithValue(ctx, goa.ServiceKey, "coachee")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetCoachHandler configures the mux to serve the "coachee" service
// "GetCoach" endpoint.
func MountGetCoachHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleCoacheeOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/coaches/{id}", f)
}

// NewGetCoachHandler creates a HTTP handler which loads the HTTP request and
// calls the "coachee" service "GetCoach" endpoint.
func NewGetCoachHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetCoachRequest(mux, decoder)
		encodeResponse = EncodeGetCoachResponse(encoder)
		encodeError    = EncodeGetCoachError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "GetCoach")
		ctx = context.WithValue(ctx, goa.ServiceKey, "coachee")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountLenCoachesHandler configures the mux to serve the "coachee" service
// "LenCoaches" endpoint.
func MountLenCoachesHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleCoacheeOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/coaches/{tag}/length", f)
}

// NewLenCoachesHandler creates a HTTP handler which loads the HTTP request and
// calls the "coachee" service "LenCoaches" endpoint.
func NewLenCoachesHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeLenCoachesRequest(mux, decoder)
		encodeResponse = EncodeLenCoachesResponse(encoder)
		encodeError    = EncodeLenCoachesError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "LenCoaches")
		ctx = context.WithValue(ctx, goa.ServiceKey, "coachee")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCreateCoachHandler configures the mux to serve the "coachee" service
// "CreateCoach" endpoint.
func MountCreateCoachHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleCoacheeOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/coaches", f)
}

// NewCreateCoachHandler creates a HTTP handler which loads the HTTP request
// and calls the "coachee" service "CreateCoach" endpoint.
func NewCreateCoachHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateCoachRequest(mux, decoder)
		encodeResponse = EncodeCreateCoachResponse(encoder)
		encodeError    = EncodeCreateCoachError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "CreateCoach")
		ctx = context.WithValue(ctx, goa.ServiceKey, "coachee")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpdateCoachHandler configures the mux to serve the "coachee" service
// "UpdateCoach" endpoint.
func MountUpdateCoachHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleCoacheeOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/coaches/{id}", f)
}

// NewUpdateCoachHandler creates a HTTP handler which loads the HTTP request
// and calls the "coachee" service "UpdateCoach" endpoint.
func NewUpdateCoachHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateCoachRequest(mux, decoder)
		encodeResponse = EncodeUpdateCoachResponse(encoder)
		encodeError    = EncodeUpdateCoachError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "UpdateCoach")
		ctx = context.WithValue(ctx, goa.ServiceKey, "coachee")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCreateCertificationHandler configures the mux to serve the "coachee"
// service "CreateCertification" endpoint.
func MountCreateCertificationHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleCoacheeOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/coaches/{id}/certifications", f)
}

// NewCreateCertificationHandler creates a HTTP handler which loads the HTTP
// request and calls the "coachee" service "CreateCertification" endpoint.
func NewCreateCertificationHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateCertificationRequest(mux, decoder)
		encodeResponse = EncodeCreateCertificationResponse(encoder)
		encodeError    = EncodeCreateCertificationError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "CreateCertification")
		ctx = context.WithValue(ctx, goa.ServiceKey, "coachee")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteCertificationHandler configures the mux to serve the "coachee"
// service "DeleteCertification" endpoint.
func MountDeleteCertificationHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleCoacheeOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/coaches/{id}/certifications/{certID}", f)
}

// NewDeleteCertificationHandler creates a HTTP handler which loads the HTTP
// request and calls the "coachee" service "DeleteCertification" endpoint.
func NewDeleteCertificationHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteCertificationRequest(mux, decoder)
		encodeResponse = EncodeDeleteCertificationResponse(encoder)
		encodeError    = EncodeDeleteCertificationError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "DeleteCertification")
		ctx = context.WithValue(ctx, goa.ServiceKey, "coachee")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCreateProgramHandler configures the mux to serve the "coachee" service
// "CreateProgram" endpoint.
func MountCreateProgramHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleCoacheeOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/coaches/{id}/programs", f)
}

// NewCreateProgramHandler creates a HTTP handler which loads the HTTP request
// and calls the "coachee" service "CreateProgram" endpoint.
func NewCreateProgramHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateProgramRequest(mux, decoder)
		encodeResponse = EncodeCreateProgramResponse(encoder)
		encodeError    = EncodeCreateProgramError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "CreateProgram")
		ctx = context.WithValue(ctx, goa.ServiceKey, "coachee")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteProgramHandler configures the mux to serve the "coachee" service
// "DeleteProgram" endpoint.
func MountDeleteProgramHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleCoacheeOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/coaches/{id}/programs/{programID}", f)
}

// NewDeleteProgramHandler creates a HTTP handler which loads the HTTP request
// and calls the "coachee" service "DeleteProgram" endpoint.
func NewDeleteProgramHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteProgramRequest(mux, decoder)
		encodeResponse = EncodeDeleteProgramResponse(encoder)
		encodeError    = EncodeDeleteProgramError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "DeleteProgram")
		ctx = context.WithValue(ctx, goa.ServiceKey, "coachee")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCreateAvailabilityHandler configures the mux to serve the "coachee"
// service "CreateAvailability" endpoint.
func MountCreateAvailabilityHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleCoacheeOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/coaches/{id}/availability", f)
}

// NewCreateAvailabilityHandler creates a HTTP handler which loads the HTTP
// request and calls the "coachee" service "CreateAvailability" endpoint.
func NewCreateAvailabilityHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateAvailabilityRequest(mux, decoder)
		encodeResponse = EncodeCreateAvailabilityResponse(encoder)
		encodeError    = EncodeCreateAvailabilityError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "CreateAvailability")
		ctx = context.WithValue(ctx, goa.ServiceKey, "coachee")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteAvailabilityHandler configures the mux to serve the "coachee"
// service "DeleteAvailability" endpoint.
func MountDeleteAvailabilityHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleCoacheeOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/coaches/{id}/availability/{avID}", f)
}

// NewDeleteAvailabilityHandler creates a HTTP handler which loads the HTTP
// request and calls the "coachee" service "DeleteAvailability" endpoint.
func NewDeleteAvailabilityHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteAvailabilityRequest(mux, decoder)
		encodeResponse = EncodeDeleteAvailabilityResponse(encoder)
		encodeError    = EncodeDeleteAvailabilityError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "DeleteAvailability")
		ctx = context.WithValue(ctx, goa.ServiceKey, "coachee")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCreateCustomerHandler configures the mux to serve the "coachee" service
// "CreateCustomer" endpoint.
func MountCreateCustomerHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleCoacheeOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/clients", f)
}

// NewCreateCustomerHandler creates a HTTP handler which loads the HTTP request
// and calls the "coachee" service "CreateCustomer" endpoint.
func NewCreateCustomerHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateCustomerRequest(mux, decoder)
		encodeResponse = EncodeCreateCustomerResponse(encoder)
		encodeError    = EncodeCreateCustomerError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "CreateCustomer")
		ctx = context.WithValue(ctx, goa.ServiceKey, "coachee")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCustomerLoginHandler configures the mux to serve the "coachee" service
// "CustomerLogin" endpoint.
func MountCustomerLoginHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleCoacheeOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/clients/login", f)
}

// NewCustomerLoginHandler creates a HTTP handler which loads the HTTP request
// and calls the "coachee" service "CustomerLogin" endpoint.
func NewCustomerLoginHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCustomerLoginRequest(mux, decoder)
		encodeResponse = EncodeCustomerLoginResponse(encoder)
		encodeError    = EncodeCustomerLoginError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "CustomerLogin")
		ctx = context.WithValue(ctx, goa.ServiceKey, "coachee")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCreateOrderHandler configures the mux to serve the "coachee" service
// "CreateOrder" endpoint.
func MountCreateOrderHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := handleCoacheeOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/orders", f)
}

// NewCreateOrderHandler creates a HTTP handler which loads the HTTP request
// and calls the "coachee" service "CreateOrder" endpoint.
func NewCreateOrderHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateOrderRequest(mux, decoder)
		encodeResponse = EncodeCreateOrderResponse(encoder)
		encodeError    = EncodeCreateOrderError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "CreateOrder")
		ctx = context.WithValue(ctx, goa.ServiceKey, "coachee")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCORSHandler configures the mux to serve the CORS endpoints for the
// service coachee.
func MountCORSHandler(mux goahttp.Muxer, h http.Handler) {
	h = handleCoacheeOrigin(h)
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("OPTIONS", "/coaches", f)
	mux.Handle("OPTIONS", "/coaches/{id}", f)
	mux.Handle("OPTIONS", "/coaches/{tag}/length", f)
	mux.Handle("OPTIONS", "/coaches/{id}/certifications", f)
	mux.Handle("OPTIONS", "/coaches/{id}/certifications/{certID}", f)
	mux.Handle("OPTIONS", "/coaches/{id}/programs", f)
	mux.Handle("OPTIONS", "/coaches/{id}/programs/{programID}", f)
	mux.Handle("OPTIONS", "/coaches/{id}/availability", f)
	mux.Handle("OPTIONS", "/coaches/{id}/availability/{avID}", f)
	mux.Handle("OPTIONS", "/clients", f)
	mux.Handle("OPTIONS", "/clients/login", f)
	mux.Handle("OPTIONS", "/orders", f)
}

// NewCORSHandler creates a HTTP handler which returns a simple 200 response.
func NewCORSHandler() http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(200)
	})
}

// handleCoacheeOrigin applies the CORS response headers corresponding to the
// origin for the service coachee.
func handleCoacheeOrigin(h http.Handler) http.Handler {
	origHndlr := h.(http.HandlerFunc)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		origin := r.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			origHndlr(w, r)
			return
		}
		if cors.MatchOrigin(origin, "*") {
			w.Header().Set("Access-Control-Allow-Origin", origin)
			w.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := r.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				w.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE")
				w.Header().Set("Access-Control-Allow-Headers", "*")
			}
			origHndlr(w, r)
			return
		}
		if cors.MatchOrigin(origin, "localhost") {
			w.Header().Set("Access-Control-Allow-Origin", origin)
			w.Header().Set("Vary", "Origin")
			w.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := r.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				w.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE")
				w.Header().Set("Access-Control-Allow-Headers", "*")
			}
			origHndlr(w, r)
			return
		}
		origHndlr(w, r)
		return
	})
}
