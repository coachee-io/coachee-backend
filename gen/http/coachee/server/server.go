// Code generated by goa v3.0.7, DO NOT EDIT.
//
// coachee HTTP server
//
// Command:
// $ goa gen coachee-backend/design

package server

import (
	coachee "coachee-backend/gen/coachee"
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the coachee service endpoint HTTP handlers.
type Server struct {
	Mounts              []*MountPoint
	GetCoaches          http.Handler
	CreateCoach         http.Handler
	UpdateCoach         http.Handler
	CreateCertification http.Handler
	DeleteCertification http.Handler
	CreateProgram       http.Handler
	DeleteProgram       http.Handler
	CreateAvailability  http.Handler
	DeleteAvailability  http.Handler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the design.
type ErrorNamer interface {
	ErrorName() string
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the coachee service endpoints.
func New(
	e *coachee.Endpoints,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"GetCoaches", "GET", "/coaches/{tag}"},
			{"CreateCoach", "POST", "/coaches"},
			{"UpdateCoach", "POST", "/coaches/{id}"},
			{"CreateCertification", "PUT", "/coaches/{id}/certifications"},
			{"DeleteCertification", "DELETE", "/coaches/{id}/certifications/{certID}"},
			{"CreateProgram", "PUT", "/coaches/{id}/programs"},
			{"DeleteProgram", "DELETE", "/coaches/{id}/programs/{programID}"},
			{"CreateAvailability", "PUT", "/coaches/{id}/availability"},
			{"DeleteAvailability", "DELETE", "/coaches/{id}/availability/{avID}"},
		},
		GetCoaches:          NewGetCoachesHandler(e.GetCoaches, mux, dec, enc, eh),
		CreateCoach:         NewCreateCoachHandler(e.CreateCoach, mux, dec, enc, eh),
		UpdateCoach:         NewUpdateCoachHandler(e.UpdateCoach, mux, dec, enc, eh),
		CreateCertification: NewCreateCertificationHandler(e.CreateCertification, mux, dec, enc, eh),
		DeleteCertification: NewDeleteCertificationHandler(e.DeleteCertification, mux, dec, enc, eh),
		CreateProgram:       NewCreateProgramHandler(e.CreateProgram, mux, dec, enc, eh),
		DeleteProgram:       NewDeleteProgramHandler(e.DeleteProgram, mux, dec, enc, eh),
		CreateAvailability:  NewCreateAvailabilityHandler(e.CreateAvailability, mux, dec, enc, eh),
		DeleteAvailability:  NewDeleteAvailabilityHandler(e.DeleteAvailability, mux, dec, enc, eh),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "coachee" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.GetCoaches = m(s.GetCoaches)
	s.CreateCoach = m(s.CreateCoach)
	s.UpdateCoach = m(s.UpdateCoach)
	s.CreateCertification = m(s.CreateCertification)
	s.DeleteCertification = m(s.DeleteCertification)
	s.CreateProgram = m(s.CreateProgram)
	s.DeleteProgram = m(s.DeleteProgram)
	s.CreateAvailability = m(s.CreateAvailability)
	s.DeleteAvailability = m(s.DeleteAvailability)
}

// Mount configures the mux to serve the coachee endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountGetCoachesHandler(mux, h.GetCoaches)
	MountCreateCoachHandler(mux, h.CreateCoach)
	MountUpdateCoachHandler(mux, h.UpdateCoach)
	MountCreateCertificationHandler(mux, h.CreateCertification)
	MountDeleteCertificationHandler(mux, h.DeleteCertification)
	MountCreateProgramHandler(mux, h.CreateProgram)
	MountDeleteProgramHandler(mux, h.DeleteProgram)
	MountCreateAvailabilityHandler(mux, h.CreateAvailability)
	MountDeleteAvailabilityHandler(mux, h.DeleteAvailability)
}

// MountGetCoachesHandler configures the mux to serve the "coachee" service
// "GetCoaches" endpoint.
func MountGetCoachesHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/coaches/{tag}", f)
}

// NewGetCoachesHandler creates a HTTP handler which loads the HTTP request and
// calls the "coachee" service "GetCoaches" endpoint.
func NewGetCoachesHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodeGetCoachesRequest(mux, dec)
		encodeResponse = EncodeGetCoachesResponse(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "GetCoaches")
		ctx = context.WithValue(ctx, goa.ServiceKey, "coachee")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountCreateCoachHandler configures the mux to serve the "coachee" service
// "CreateCoach" endpoint.
func MountCreateCoachHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/coaches", f)
}

// NewCreateCoachHandler creates a HTTP handler which loads the HTTP request
// and calls the "coachee" service "CreateCoach" endpoint.
func NewCreateCoachHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodeCreateCoachRequest(mux, dec)
		encodeResponse = EncodeCreateCoachResponse(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "CreateCoach")
		ctx = context.WithValue(ctx, goa.ServiceKey, "coachee")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountUpdateCoachHandler configures the mux to serve the "coachee" service
// "UpdateCoach" endpoint.
func MountUpdateCoachHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/coaches/{id}", f)
}

// NewUpdateCoachHandler creates a HTTP handler which loads the HTTP request
// and calls the "coachee" service "UpdateCoach" endpoint.
func NewUpdateCoachHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateCoachRequest(mux, dec)
		encodeResponse = EncodeUpdateCoachResponse(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "UpdateCoach")
		ctx = context.WithValue(ctx, goa.ServiceKey, "coachee")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountCreateCertificationHandler configures the mux to serve the "coachee"
// service "CreateCertification" endpoint.
func MountCreateCertificationHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/coaches/{id}/certifications", f)
}

// NewCreateCertificationHandler creates a HTTP handler which loads the HTTP
// request and calls the "coachee" service "CreateCertification" endpoint.
func NewCreateCertificationHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodeCreateCertificationRequest(mux, dec)
		encodeResponse = EncodeCreateCertificationResponse(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "CreateCertification")
		ctx = context.WithValue(ctx, goa.ServiceKey, "coachee")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountDeleteCertificationHandler configures the mux to serve the "coachee"
// service "DeleteCertification" endpoint.
func MountDeleteCertificationHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/coaches/{id}/certifications/{certID}", f)
}

// NewDeleteCertificationHandler creates a HTTP handler which loads the HTTP
// request and calls the "coachee" service "DeleteCertification" endpoint.
func NewDeleteCertificationHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteCertificationRequest(mux, dec)
		encodeResponse = EncodeDeleteCertificationResponse(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "DeleteCertification")
		ctx = context.WithValue(ctx, goa.ServiceKey, "coachee")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountCreateProgramHandler configures the mux to serve the "coachee" service
// "CreateProgram" endpoint.
func MountCreateProgramHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/coaches/{id}/programs", f)
}

// NewCreateProgramHandler creates a HTTP handler which loads the HTTP request
// and calls the "coachee" service "CreateProgram" endpoint.
func NewCreateProgramHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodeCreateProgramRequest(mux, dec)
		encodeResponse = EncodeCreateProgramResponse(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "CreateProgram")
		ctx = context.WithValue(ctx, goa.ServiceKey, "coachee")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountDeleteProgramHandler configures the mux to serve the "coachee" service
// "DeleteProgram" endpoint.
func MountDeleteProgramHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/coaches/{id}/programs/{programID}", f)
}

// NewDeleteProgramHandler creates a HTTP handler which loads the HTTP request
// and calls the "coachee" service "DeleteProgram" endpoint.
func NewDeleteProgramHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteProgramRequest(mux, dec)
		encodeResponse = EncodeDeleteProgramResponse(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "DeleteProgram")
		ctx = context.WithValue(ctx, goa.ServiceKey, "coachee")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountCreateAvailabilityHandler configures the mux to serve the "coachee"
// service "CreateAvailability" endpoint.
func MountCreateAvailabilityHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/coaches/{id}/availability", f)
}

// NewCreateAvailabilityHandler creates a HTTP handler which loads the HTTP
// request and calls the "coachee" service "CreateAvailability" endpoint.
func NewCreateAvailabilityHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodeCreateAvailabilityRequest(mux, dec)
		encodeResponse = EncodeCreateAvailabilityResponse(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "CreateAvailability")
		ctx = context.WithValue(ctx, goa.ServiceKey, "coachee")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountDeleteAvailabilityHandler configures the mux to serve the "coachee"
// service "DeleteAvailability" endpoint.
func MountDeleteAvailabilityHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/coaches/{id}/availability/{avID}", f)
}

// NewDeleteAvailabilityHandler creates a HTTP handler which loads the HTTP
// request and calls the "coachee" service "DeleteAvailability" endpoint.
func NewDeleteAvailabilityHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteAvailabilityRequest(mux, dec)
		encodeResponse = EncodeDeleteAvailabilityResponse(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "DeleteAvailability")
		ctx = context.WithValue(ctx, goa.ServiceKey, "coachee")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}
