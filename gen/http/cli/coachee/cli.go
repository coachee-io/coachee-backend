// Code generated by goa v3.0.9, DO NOT EDIT.
//
// coachee HTTP client CLI support package
//
// Command:
// $ goa gen coachee-backend/design

package cli

import (
	coacheec "coachee-backend/gen/http/coachee/client"
	"encoding/json"
	"flag"
	"fmt"
	"net/http"
	"os"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `coachee (stripe-webhooks|get-coaches|get-coach|admin-get-coach|len-coaches|create-coach|login-coach|start-coach-password-recovery-flow|check-coach-password-recovery-token|finalize-coach-password-recovery-flow|update-coach|create-certification|delete-certification|create-program|delete-program|create-availability|delete-availability|create-customer|customer-login|start-password-recovery-flow|check-password-recovery-token|finalize-password-recovery-flow|create-order|register-stripe-express|admin-login)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` coachee stripe-webhooks --p '{
      "Sunt dolores accusamus molestiae ad quis.": "Quam id laborum.",
      "Sunt molestiae consectetur.": "Aperiam aut explicabo qui quia."
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		coacheeFlags = flag.NewFlagSet("coachee", flag.ContinueOnError)

		coacheeStripeWebhooksFlags = flag.NewFlagSet("stripe-webhooks", flag.ExitOnError)
		coacheeStripeWebhooksPFlag = coacheeStripeWebhooksFlags.String("p", "REQUIRED", "map[string]interface{} is the payload type of the coachee service StripeWebhooks method.")

		coacheeGetCoachesFlags       = flag.NewFlagSet("get-coaches", flag.ExitOnError)
		coacheeGetCoachesTagFlag     = coacheeGetCoachesFlags.String("tag", "", "")
		coacheeGetCoachesLimitFlag   = coacheeGetCoachesFlags.String("limit", "", "")
		coacheeGetCoachesPageFlag    = coacheeGetCoachesFlags.String("page", "", "")
		coacheeGetCoachesShowAllFlag = coacheeGetCoachesFlags.String("show-all", "", "")

		coacheeGetCoachFlags  = flag.NewFlagSet("get-coach", flag.ExitOnError)
		coacheeGetCoachIDFlag = coacheeGetCoachFlags.String("id", "REQUIRED", "")

		coacheeAdminGetCoachFlags     = flag.NewFlagSet("admin-get-coach", flag.ExitOnError)
		coacheeAdminGetCoachIDFlag    = coacheeAdminGetCoachFlags.String("id", "REQUIRED", "")
		coacheeAdminGetCoachTokenFlag = coacheeAdminGetCoachFlags.String("token", "REQUIRED", "")

		coacheeLenCoachesFlags   = flag.NewFlagSet("len-coaches", flag.ExitOnError)
		coacheeLenCoachesTagFlag = coacheeLenCoachesFlags.String("tag", "REQUIRED", "")

		coacheeCreateCoachFlags    = flag.NewFlagSet("create-coach", flag.ExitOnError)
		coacheeCreateCoachBodyFlag = coacheeCreateCoachFlags.String("body", "REQUIRED", "")

		coacheeLoginCoachFlags    = flag.NewFlagSet("login-coach", flag.ExitOnError)
		coacheeLoginCoachBodyFlag = coacheeLoginCoachFlags.String("body", "REQUIRED", "")

		coacheeStartCoachPasswordRecoveryFlowFlags    = flag.NewFlagSet("start-coach-password-recovery-flow", flag.ExitOnError)
		coacheeStartCoachPasswordRecoveryFlowBodyFlag = coacheeStartCoachPasswordRecoveryFlowFlags.String("body", "REQUIRED", "")

		coacheeCheckCoachPasswordRecoveryTokenFlags     = flag.NewFlagSet("check-coach-password-recovery-token", flag.ExitOnError)
		coacheeCheckCoachPasswordRecoveryTokenTokenFlag = coacheeCheckCoachPasswordRecoveryTokenFlags.String("token", "REQUIRED", "")

		coacheeFinalizeCoachPasswordRecoveryFlowFlags     = flag.NewFlagSet("finalize-coach-password-recovery-flow", flag.ExitOnError)
		coacheeFinalizeCoachPasswordRecoveryFlowBodyFlag  = coacheeFinalizeCoachPasswordRecoveryFlowFlags.String("body", "REQUIRED", "")
		coacheeFinalizeCoachPasswordRecoveryFlowTokenFlag = coacheeFinalizeCoachPasswordRecoveryFlowFlags.String("token", "REQUIRED", "")

		coacheeUpdateCoachFlags     = flag.NewFlagSet("update-coach", flag.ExitOnError)
		coacheeUpdateCoachBodyFlag  = coacheeUpdateCoachFlags.String("body", "REQUIRED", "")
		coacheeUpdateCoachIDFlag    = coacheeUpdateCoachFlags.String("id", "REQUIRED", "")
		coacheeUpdateCoachTokenFlag = coacheeUpdateCoachFlags.String("token", "REQUIRED", "")

		coacheeCreateCertificationFlags     = flag.NewFlagSet("create-certification", flag.ExitOnError)
		coacheeCreateCertificationBodyFlag  = coacheeCreateCertificationFlags.String("body", "REQUIRED", "")
		coacheeCreateCertificationIDFlag    = coacheeCreateCertificationFlags.String("id", "REQUIRED", "")
		coacheeCreateCertificationTokenFlag = coacheeCreateCertificationFlags.String("token", "REQUIRED", "")

		coacheeDeleteCertificationFlags      = flag.NewFlagSet("delete-certification", flag.ExitOnError)
		coacheeDeleteCertificationIDFlag     = coacheeDeleteCertificationFlags.String("id", "REQUIRED", "")
		coacheeDeleteCertificationCertIDFlag = coacheeDeleteCertificationFlags.String("cert-id", "REQUIRED", "")
		coacheeDeleteCertificationTokenFlag  = coacheeDeleteCertificationFlags.String("token", "REQUIRED", "")

		coacheeCreateProgramFlags     = flag.NewFlagSet("create-program", flag.ExitOnError)
		coacheeCreateProgramBodyFlag  = coacheeCreateProgramFlags.String("body", "REQUIRED", "")
		coacheeCreateProgramIDFlag    = coacheeCreateProgramFlags.String("id", "REQUIRED", "")
		coacheeCreateProgramTokenFlag = coacheeCreateProgramFlags.String("token", "REQUIRED", "")

		coacheeDeleteProgramFlags         = flag.NewFlagSet("delete-program", flag.ExitOnError)
		coacheeDeleteProgramIDFlag        = coacheeDeleteProgramFlags.String("id", "REQUIRED", "")
		coacheeDeleteProgramProgramIDFlag = coacheeDeleteProgramFlags.String("program-id", "REQUIRED", "")
		coacheeDeleteProgramTokenFlag     = coacheeDeleteProgramFlags.String("token", "REQUIRED", "")

		coacheeCreateAvailabilityFlags     = flag.NewFlagSet("create-availability", flag.ExitOnError)
		coacheeCreateAvailabilityBodyFlag  = coacheeCreateAvailabilityFlags.String("body", "REQUIRED", "")
		coacheeCreateAvailabilityIDFlag    = coacheeCreateAvailabilityFlags.String("id", "REQUIRED", "")
		coacheeCreateAvailabilityTokenFlag = coacheeCreateAvailabilityFlags.String("token", "REQUIRED", "")

		coacheeDeleteAvailabilityFlags     = flag.NewFlagSet("delete-availability", flag.ExitOnError)
		coacheeDeleteAvailabilityIDFlag    = coacheeDeleteAvailabilityFlags.String("id", "REQUIRED", "")
		coacheeDeleteAvailabilityAvIDFlag  = coacheeDeleteAvailabilityFlags.String("av-id", "REQUIRED", "")
		coacheeDeleteAvailabilityTokenFlag = coacheeDeleteAvailabilityFlags.String("token", "REQUIRED", "")

		coacheeCreateCustomerFlags    = flag.NewFlagSet("create-customer", flag.ExitOnError)
		coacheeCreateCustomerBodyFlag = coacheeCreateCustomerFlags.String("body", "REQUIRED", "")

		coacheeCustomerLoginFlags    = flag.NewFlagSet("customer-login", flag.ExitOnError)
		coacheeCustomerLoginBodyFlag = coacheeCustomerLoginFlags.String("body", "REQUIRED", "")

		coacheeStartPasswordRecoveryFlowFlags    = flag.NewFlagSet("start-password-recovery-flow", flag.ExitOnError)
		coacheeStartPasswordRecoveryFlowBodyFlag = coacheeStartPasswordRecoveryFlowFlags.String("body", "REQUIRED", "")

		coacheeCheckPasswordRecoveryTokenFlags     = flag.NewFlagSet("check-password-recovery-token", flag.ExitOnError)
		coacheeCheckPasswordRecoveryTokenTokenFlag = coacheeCheckPasswordRecoveryTokenFlags.String("token", "REQUIRED", "")

		coacheeFinalizePasswordRecoveryFlowFlags     = flag.NewFlagSet("finalize-password-recovery-flow", flag.ExitOnError)
		coacheeFinalizePasswordRecoveryFlowBodyFlag  = coacheeFinalizePasswordRecoveryFlowFlags.String("body", "REQUIRED", "")
		coacheeFinalizePasswordRecoveryFlowTokenFlag = coacheeFinalizePasswordRecoveryFlowFlags.String("token", "REQUIRED", "")

		coacheeCreateOrderFlags     = flag.NewFlagSet("create-order", flag.ExitOnError)
		coacheeCreateOrderBodyFlag  = coacheeCreateOrderFlags.String("body", "REQUIRED", "")
		coacheeCreateOrderTokenFlag = coacheeCreateOrderFlags.String("token", "REQUIRED", "")

		coacheeRegisterStripeExpressFlags    = flag.NewFlagSet("register-stripe-express", flag.ExitOnError)
		coacheeRegisterStripeExpressBodyFlag = coacheeRegisterStripeExpressFlags.String("body", "REQUIRED", "")
		coacheeRegisterStripeExpressIDFlag   = coacheeRegisterStripeExpressFlags.String("id", "REQUIRED", "")

		coacheeAdminLoginFlags    = flag.NewFlagSet("admin-login", flag.ExitOnError)
		coacheeAdminLoginBodyFlag = coacheeAdminLoginFlags.String("body", "REQUIRED", "")
	)
	coacheeFlags.Usage = coacheeUsage
	coacheeStripeWebhooksFlags.Usage = coacheeStripeWebhooksUsage
	coacheeGetCoachesFlags.Usage = coacheeGetCoachesUsage
	coacheeGetCoachFlags.Usage = coacheeGetCoachUsage
	coacheeAdminGetCoachFlags.Usage = coacheeAdminGetCoachUsage
	coacheeLenCoachesFlags.Usage = coacheeLenCoachesUsage
	coacheeCreateCoachFlags.Usage = coacheeCreateCoachUsage
	coacheeLoginCoachFlags.Usage = coacheeLoginCoachUsage
	coacheeStartCoachPasswordRecoveryFlowFlags.Usage = coacheeStartCoachPasswordRecoveryFlowUsage
	coacheeCheckCoachPasswordRecoveryTokenFlags.Usage = coacheeCheckCoachPasswordRecoveryTokenUsage
	coacheeFinalizeCoachPasswordRecoveryFlowFlags.Usage = coacheeFinalizeCoachPasswordRecoveryFlowUsage
	coacheeUpdateCoachFlags.Usage = coacheeUpdateCoachUsage
	coacheeCreateCertificationFlags.Usage = coacheeCreateCertificationUsage
	coacheeDeleteCertificationFlags.Usage = coacheeDeleteCertificationUsage
	coacheeCreateProgramFlags.Usage = coacheeCreateProgramUsage
	coacheeDeleteProgramFlags.Usage = coacheeDeleteProgramUsage
	coacheeCreateAvailabilityFlags.Usage = coacheeCreateAvailabilityUsage
	coacheeDeleteAvailabilityFlags.Usage = coacheeDeleteAvailabilityUsage
	coacheeCreateCustomerFlags.Usage = coacheeCreateCustomerUsage
	coacheeCustomerLoginFlags.Usage = coacheeCustomerLoginUsage
	coacheeStartPasswordRecoveryFlowFlags.Usage = coacheeStartPasswordRecoveryFlowUsage
	coacheeCheckPasswordRecoveryTokenFlags.Usage = coacheeCheckPasswordRecoveryTokenUsage
	coacheeFinalizePasswordRecoveryFlowFlags.Usage = coacheeFinalizePasswordRecoveryFlowUsage
	coacheeCreateOrderFlags.Usage = coacheeCreateOrderUsage
	coacheeRegisterStripeExpressFlags.Usage = coacheeRegisterStripeExpressUsage
	coacheeAdminLoginFlags.Usage = coacheeAdminLoginUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "coachee":
			svcf = coacheeFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "coachee":
			switch epn {
			case "stripe-webhooks":
				epf = coacheeStripeWebhooksFlags

			case "get-coaches":
				epf = coacheeGetCoachesFlags

			case "get-coach":
				epf = coacheeGetCoachFlags

			case "admin-get-coach":
				epf = coacheeAdminGetCoachFlags

			case "len-coaches":
				epf = coacheeLenCoachesFlags

			case "create-coach":
				epf = coacheeCreateCoachFlags

			case "login-coach":
				epf = coacheeLoginCoachFlags

			case "start-coach-password-recovery-flow":
				epf = coacheeStartCoachPasswordRecoveryFlowFlags

			case "check-coach-password-recovery-token":
				epf = coacheeCheckCoachPasswordRecoveryTokenFlags

			case "finalize-coach-password-recovery-flow":
				epf = coacheeFinalizeCoachPasswordRecoveryFlowFlags

			case "update-coach":
				epf = coacheeUpdateCoachFlags

			case "create-certification":
				epf = coacheeCreateCertificationFlags

			case "delete-certification":
				epf = coacheeDeleteCertificationFlags

			case "create-program":
				epf = coacheeCreateProgramFlags

			case "delete-program":
				epf = coacheeDeleteProgramFlags

			case "create-availability":
				epf = coacheeCreateAvailabilityFlags

			case "delete-availability":
				epf = coacheeDeleteAvailabilityFlags

			case "create-customer":
				epf = coacheeCreateCustomerFlags

			case "customer-login":
				epf = coacheeCustomerLoginFlags

			case "start-password-recovery-flow":
				epf = coacheeStartPasswordRecoveryFlowFlags

			case "check-password-recovery-token":
				epf = coacheeCheckPasswordRecoveryTokenFlags

			case "finalize-password-recovery-flow":
				epf = coacheeFinalizePasswordRecoveryFlowFlags

			case "create-order":
				epf = coacheeCreateOrderFlags

			case "register-stripe-express":
				epf = coacheeRegisterStripeExpressFlags

			case "admin-login":
				epf = coacheeAdminLoginFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "coachee":
			c := coacheec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "stripe-webhooks":
				endpoint = c.StripeWebhooks()
				var err error
				var val map[string]interface{}
				err = json.Unmarshal([]byte(*coacheeStripeWebhooksPFlag), &val)
				data = val
				if err != nil {
					return nil, nil, fmt.Errorf("invalid JSON for coacheeStripeWebhooksPFlag, example of valid JSON:\n%s", "'{\n      \"Sunt dolores accusamus molestiae ad quis.\": \"Quam id laborum.\",\n      \"Sunt molestiae consectetur.\": \"Aperiam aut explicabo qui quia.\"\n   }'")
				}
			case "get-coaches":
				endpoint = c.GetCoaches()
				data, err = coacheec.BuildGetCoachesPayload(*coacheeGetCoachesTagFlag, *coacheeGetCoachesLimitFlag, *coacheeGetCoachesPageFlag, *coacheeGetCoachesShowAllFlag)
			case "get-coach":
				endpoint = c.GetCoach()
				data, err = coacheec.BuildGetCoachPayload(*coacheeGetCoachIDFlag)
			case "admin-get-coach":
				endpoint = c.AdminGetCoach()
				data, err = coacheec.BuildAdminGetCoachPayload(*coacheeAdminGetCoachIDFlag, *coacheeAdminGetCoachTokenFlag)
			case "len-coaches":
				endpoint = c.LenCoaches()
				data, err = coacheec.BuildLenCoachesPayload(*coacheeLenCoachesTagFlag)
			case "create-coach":
				endpoint = c.CreateCoach()
				data, err = coacheec.BuildCreateCoachPayload(*coacheeCreateCoachBodyFlag)
			case "login-coach":
				endpoint = c.LoginCoach()
				data, err = coacheec.BuildLoginCoachPayload(*coacheeLoginCoachBodyFlag)
			case "start-coach-password-recovery-flow":
				endpoint = c.StartCoachPasswordRecoveryFlow()
				data, err = coacheec.BuildStartCoachPasswordRecoveryFlowPayload(*coacheeStartCoachPasswordRecoveryFlowBodyFlag)
			case "check-coach-password-recovery-token":
				endpoint = c.CheckCoachPasswordRecoveryToken()
				data, err = coacheec.BuildCheckCoachPasswordRecoveryTokenPayload(*coacheeCheckCoachPasswordRecoveryTokenTokenFlag)
			case "finalize-coach-password-recovery-flow":
				endpoint = c.FinalizeCoachPasswordRecoveryFlow()
				data, err = coacheec.BuildFinalizeCoachPasswordRecoveryFlowPayload(*coacheeFinalizeCoachPasswordRecoveryFlowBodyFlag, *coacheeFinalizeCoachPasswordRecoveryFlowTokenFlag)
			case "update-coach":
				endpoint = c.UpdateCoach()
				data, err = coacheec.BuildUpdateCoachPayload(*coacheeUpdateCoachBodyFlag, *coacheeUpdateCoachIDFlag, *coacheeUpdateCoachTokenFlag)
			case "create-certification":
				endpoint = c.CreateCertification()
				data, err = coacheec.BuildCreateCertificationPayload(*coacheeCreateCertificationBodyFlag, *coacheeCreateCertificationIDFlag, *coacheeCreateCertificationTokenFlag)
			case "delete-certification":
				endpoint = c.DeleteCertification()
				data, err = coacheec.BuildDeleteCertificationPayload(*coacheeDeleteCertificationIDFlag, *coacheeDeleteCertificationCertIDFlag, *coacheeDeleteCertificationTokenFlag)
			case "create-program":
				endpoint = c.CreateProgram()
				data, err = coacheec.BuildCreateProgramPayload(*coacheeCreateProgramBodyFlag, *coacheeCreateProgramIDFlag, *coacheeCreateProgramTokenFlag)
			case "delete-program":
				endpoint = c.DeleteProgram()
				data, err = coacheec.BuildDeleteProgramPayload(*coacheeDeleteProgramIDFlag, *coacheeDeleteProgramProgramIDFlag, *coacheeDeleteProgramTokenFlag)
			case "create-availability":
				endpoint = c.CreateAvailability()
				data, err = coacheec.BuildCreateAvailabilityPayload(*coacheeCreateAvailabilityBodyFlag, *coacheeCreateAvailabilityIDFlag, *coacheeCreateAvailabilityTokenFlag)
			case "delete-availability":
				endpoint = c.DeleteAvailability()
				data, err = coacheec.BuildDeleteAvailabilityPayload(*coacheeDeleteAvailabilityIDFlag, *coacheeDeleteAvailabilityAvIDFlag, *coacheeDeleteAvailabilityTokenFlag)
			case "create-customer":
				endpoint = c.CreateCustomer()
				data, err = coacheec.BuildCreateCustomerPayload(*coacheeCreateCustomerBodyFlag)
			case "customer-login":
				endpoint = c.CustomerLogin()
				data, err = coacheec.BuildCustomerLoginPayload(*coacheeCustomerLoginBodyFlag)
			case "start-password-recovery-flow":
				endpoint = c.StartPasswordRecoveryFlow()
				data, err = coacheec.BuildStartPasswordRecoveryFlowPayload(*coacheeStartPasswordRecoveryFlowBodyFlag)
			case "check-password-recovery-token":
				endpoint = c.CheckPasswordRecoveryToken()
				data, err = coacheec.BuildCheckPasswordRecoveryTokenPayload(*coacheeCheckPasswordRecoveryTokenTokenFlag)
			case "finalize-password-recovery-flow":
				endpoint = c.FinalizePasswordRecoveryFlow()
				data, err = coacheec.BuildFinalizePasswordRecoveryFlowPayload(*coacheeFinalizePasswordRecoveryFlowBodyFlag, *coacheeFinalizePasswordRecoveryFlowTokenFlag)
			case "create-order":
				endpoint = c.CreateOrder()
				data, err = coacheec.BuildCreateOrderPayload(*coacheeCreateOrderBodyFlag, *coacheeCreateOrderTokenFlag)
			case "register-stripe-express":
				endpoint = c.RegisterStripeExpress()
				data, err = coacheec.BuildRegisterStripeExpressPayload(*coacheeRegisterStripeExpressBodyFlag, *coacheeRegisterStripeExpressIDFlag)
			case "admin-login":
				endpoint = c.AdminLogin()
				data, err = coacheec.BuildAdminLoginPayload(*coacheeAdminLoginBodyFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// coacheeUsage displays the usage of the coachee command and its subcommands.
func coacheeUsage() {
	fmt.Fprintf(os.Stderr, `The coachee service performs operations on coachees
Usage:
    %s [globalflags] coachee COMMAND [flags]

COMMAND:
    stripe-webhooks: Stripe webhook endpoint
    get-coaches: GetCoaches returns an array of coaches according to a tag and pagination
    get-coach: GetCoach returns one coach according to the id
    admin-get-coach: AdminGetCoach returns all coach info according to the id
    len-coaches: LenCoaches returns the amount of coaches with a given tag
    create-coach: CreateCoaches creates a base coach
    login-coach: Logs in a coach to stripe express
    start-coach-password-recovery-flow: starts the process of recovering a password
    check-coach-password-recovery-token: verifies if a recovery token is still valid
    finalize-coach-password-recovery-flow: finalizes the password recovery flow by resetting a new password 
    update-coach: UpdateCoaches updates a coach
    create-certification: creates a certification for a coach
    delete-certification: deletes a certification for a coach
    create-program: creates a program for a coach
    delete-program: deletes a program for a coach
    create-availability: creates an availability for a coach
    delete-availability: deletes an availability for a coach
    create-customer: creates a new customer
    customer-login: logs in a customer and returns a jwt
    start-password-recovery-flow: starts the process of recovering a password
    check-password-recovery-token: verifies if a recovery token is still valid
    finalize-password-recovery-flow: finalizes the password recovery flow by resetting a new password 
    create-order: creates a new order
    register-stripe-express: registers a stripe express account in stripe and associates it to a coach
    admin-login: logs in a customer and returns a jwt

Additional help:
    %s coachee COMMAND --help
`, os.Args[0], os.Args[0])
}
func coacheeStripeWebhooksUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] coachee stripe-webhooks -p JSON

Stripe webhook endpoint
    -p JSON: map[string]interface{} is the payload type of the coachee service StripeWebhooks method.

Example:
    `+os.Args[0]+` coachee stripe-webhooks --p '{
      "Sunt dolores accusamus molestiae ad quis.": "Quam id laborum.",
      "Sunt molestiae consectetur.": "Aperiam aut explicabo qui quia."
   }'
`, os.Args[0])
}

func coacheeGetCoachesUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] coachee get-coaches -tag STRING -limit UINT -page UINT -show-all BOOL

GetCoaches returns an array of coaches according to a tag and pagination
    -tag STRING: 
    -limit UINT: 
    -page UINT: 
    -show-all BOOL: 

Example:
    `+os.Args[0]+` coachee get-coaches --tag "Assumenda ipsum eligendi et doloribus culpa amet." --limit 9902499858528033634 --page 2427611308924428078 --show-all true
`, os.Args[0])
}

func coacheeGetCoachUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] coachee get-coach -id UINT

GetCoach returns one coach according to the id
    -id UINT: 

Example:
    `+os.Args[0]+` coachee get-coach --id 16077254013937140584
`, os.Args[0])
}

func coacheeAdminGetCoachUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] coachee admin-get-coach -id UINT -token STRING

AdminGetCoach returns all coach info according to the id
    -id UINT: 
    -token STRING: 

Example:
    `+os.Args[0]+` coachee admin-get-coach --id 2601274976230865826 --token "Alias velit."
`, os.Args[0])
}

func coacheeLenCoachesUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] coachee len-coaches -tag STRING

LenCoaches returns the amount of coaches with a given tag
    -tag STRING: 

Example:
    `+os.Args[0]+` coachee len-coaches --tag "Beatae non quia blanditiis similique."
`, os.Args[0])
}

func coacheeCreateCoachUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] coachee create-coach -body JSON

CreateCoaches creates a base coach
    -body JSON: 

Example:
    `+os.Args[0]+` coachee create-coach --body '{
      "acceptTerms": true,
      "city": "Ratione sit dolor qui.",
      "country": "Sint sit laboriosam tempora modi facere quos.",
      "description": "Beatae quia exercitationem culpa quo repellat quas.",
      "email": "Deserunt molestiae dolorem qui.",
      "firstName": "Cum dolorem quo id dolorum reprehenderit.",
      "introCall": 18123813373734373881,
      "lastName": "Est dolores harum eius corporis voluptas.",
      "password": "Eveniet animi est et suscipit.",
      "phone": "Iure vel officia non et voluptates.",
      "tags": "Illum dolore amet fugiat ab dolorum.",
      "textAvailability": "Quod veritatis ad deleniti ut quisquam.",
      "textCertifications": "Architecto et facere.",
      "textPrograms": "Aut libero rerum mollitia accusantium tempore fugit.",
      "vat": "Autem fugiat et."
   }'
`, os.Args[0])
}

func coacheeLoginCoachUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] coachee login-coach -body JSON

Logs in a coach to stripe express
    -body JSON: 

Example:
    `+os.Args[0]+` coachee login-coach --body '{
      "email": "Excepturi eum repudiandae ipsa neque provident nemo.",
      "password": "Vitae sunt doloremque veritatis vel provident voluptas."
   }'
`, os.Args[0])
}

func coacheeStartCoachPasswordRecoveryFlowUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] coachee start-coach-password-recovery-flow -body JSON

starts the process of recovering a password
    -body JSON: 

Example:
    `+os.Args[0]+` coachee start-coach-password-recovery-flow --body '{
      "email": "Harum vitae iusto illo sit voluptatem."
   }'
`, os.Args[0])
}

func coacheeCheckCoachPasswordRecoveryTokenUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] coachee check-coach-password-recovery-token -token STRING

verifies if a recovery token is still valid
    -token STRING: 

Example:
    `+os.Args[0]+` coachee check-coach-password-recovery-token --token "Sit aut optio sunt blanditiis illum in."
`, os.Args[0])
}

func coacheeFinalizeCoachPasswordRecoveryFlowUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] coachee finalize-coach-password-recovery-flow -body JSON -token STRING

finalizes the password recovery flow by resetting a new password 
    -body JSON: 
    -token STRING: 

Example:
    `+os.Args[0]+` coachee finalize-coach-password-recovery-flow --body '{
      "password": "Sapiente molestiae."
   }' --token "Quia placeat adipisci error ipsa."
`, os.Args[0])
}

func coacheeUpdateCoachUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] coachee update-coach -body JSON -id UINT -token STRING

UpdateCoaches updates a coach
    -body JSON: 
    -id UINT: 
    -token STRING: 

Example:
    `+os.Args[0]+` coachee update-coach --body '{
      "city": "Aut ex explicabo aut provident qui et.",
      "country": "Quod molestias optio commodi deleniti.",
      "description": "Quaerat quia voluptates.",
      "email": "Nobis voluptatem delectus ut et.",
      "firstCallDuration": 197300112,
      "firstName": "Voluptatem vel rerum eum praesentium eum.",
      "introCall": 1587216775515350751,
      "lastName": "Nemo sit voluptatem dolorem libero assumenda molestias.",
      "phone": "Iste natus doloribus sunt magni.",
      "pictureURL": "Dolorem id ut et dolores.",
      "status": "Ea natus.",
      "stripeID": "Alias dicta dolorem omnis.",
      "tags": "Et omnis incidunt facere et consequatur fuga.",
      "vat": "Expedita debitis non explicabo."
   }' --id 18182321767548599958 --token "Mollitia ea."
`, os.Args[0])
}

func coacheeCreateCertificationUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] coachee create-certification -body JSON -id UINT -token STRING

creates a certification for a coach
    -body JSON: 
    -id UINT: 
    -token STRING: 

Example:
    `+os.Args[0]+` coachee create-certification --body '{
      "certification": {
         "description": "Necessitatibus non.",
         "id": "Quisquam at quam doloribus.",
         "institution": "Cumque facilis ut nisi quia iste.",
         "month": 1,
         "title": "Id ullam cum.",
         "year": 1926
      }
   }' --id 10449534859793472272 --token "Dolorum eaque."
`, os.Args[0])
}

func coacheeDeleteCertificationUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] coachee delete-certification -id UINT -cert-id STRING -token STRING

deletes a certification for a coach
    -id UINT: 
    -cert-id STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` coachee delete-certification --id 12211617704765082414 --cert-id "Dolor eum non quae." --token "Dolor placeat ducimus autem."
`, os.Args[0])
}

func coacheeCreateProgramUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] coachee create-program -body JSON -id UINT -token STRING

creates a program for a coach
    -body JSON: 
    -id UINT: 
    -token STRING: 

Example:
    `+os.Args[0]+` coachee create-program --body '{
      "program": {
         "description": "Eligendi illum dolores eveniet reiciendis similique.",
         "duration": 4462826039550631181,
         "id": "Dolorem voluptas inventore omnis et dignissimos.",
         "name": "Voluptatem voluptate rem dolor.",
         "sessions": 10622349987736117164,
         "taxPercent": 11609321329185551551,
         "totalPrice": 9488837876033592377
      }
   }' --id 14482203824796549998 --token "Rerum expedita molestiae iure voluptas architecto."
`, os.Args[0])
}

func coacheeDeleteProgramUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] coachee delete-program -id UINT -program-id STRING -token STRING

deletes a program for a coach
    -id UINT: 
    -program-id STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` coachee delete-program --id 2398536374608239528 --program-id "Similique et eveniet voluptatem sint sunt." --token "Facere ea omnis omnis ex."
`, os.Args[0])
}

func coacheeCreateAvailabilityUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] coachee create-availability -body JSON -id UINT -token STRING

creates an availability for a coach
    -body JSON: 
    -id UINT: 
    -token STRING: 

Example:
    `+os.Args[0]+` coachee create-availability --body '{
      "end": 1233,
      "start": 676,
      "weekDay": 0
   }' --id 12427416551270848456 --token "Error consequatur."
`, os.Args[0])
}

func coacheeDeleteAvailabilityUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] coachee delete-availability -id UINT -av-id STRING -token STRING

deletes an availability for a coach
    -id UINT: 
    -av-id STRING: 
    -token STRING: 

Example:
    `+os.Args[0]+` coachee delete-availability --id 15165284182864938349 --av-id "Nihil aut tenetur adipisci." --token "Ut nobis est."
`, os.Args[0])
}

func coacheeCreateCustomerUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] coachee create-customer -body JSON

creates a new customer
    -body JSON: 

Example:
    `+os.Args[0]+` coachee create-customer --body '{
      "acceptTerms": false,
      "birthDate": 2619393126375326054,
      "email": "Id nihil eos saepe.",
      "firstName": "Hic placeat voluptas.",
      "lastName": "Dolore sunt maiores.",
      "password": "Ab inventore non necessitatibus quisquam ut ut."
   }'
`, os.Args[0])
}

func coacheeCustomerLoginUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] coachee customer-login -body JSON

logs in a customer and returns a jwt
    -body JSON: 

Example:
    `+os.Args[0]+` coachee customer-login --body '{
      "email": "Et est nisi.",
      "password": "In doloribus."
   }'
`, os.Args[0])
}

func coacheeStartPasswordRecoveryFlowUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] coachee start-password-recovery-flow -body JSON

starts the process of recovering a password
    -body JSON: 

Example:
    `+os.Args[0]+` coachee start-password-recovery-flow --body '{
      "email": "Culpa non quod perferendis commodi exercitationem explicabo."
   }'
`, os.Args[0])
}

func coacheeCheckPasswordRecoveryTokenUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] coachee check-password-recovery-token -token STRING

verifies if a recovery token is still valid
    -token STRING: 

Example:
    `+os.Args[0]+` coachee check-password-recovery-token --token "Unde sit."
`, os.Args[0])
}

func coacheeFinalizePasswordRecoveryFlowUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] coachee finalize-password-recovery-flow -body JSON -token STRING

finalizes the password recovery flow by resetting a new password 
    -body JSON: 
    -token STRING: 

Example:
    `+os.Args[0]+` coachee finalize-password-recovery-flow --body '{
      "password": "Aliquid voluptas ut."
   }' --token "Mollitia voluptas nulla."
`, os.Args[0])
}

func coacheeCreateOrderUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] coachee create-order -body JSON -token STRING

creates a new order
    -body JSON: 
    -token STRING: 

Example:
    `+os.Args[0]+` coachee create-order --body '{
      "coachId": 15123794409294910830,
      "introCall": 8836118031651129604,
      "programId": "Eligendi alias ab."
   }' --token "Aut eius delectus optio dolore."
`, os.Args[0])
}

func coacheeRegisterStripeExpressUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] coachee register-stripe-express -body JSON -id UINT

registers a stripe express account in stripe and associates it to a coach
    -body JSON: 
    -id UINT: 

Example:
    `+os.Args[0]+` coachee register-stripe-express --body '{
      "authorizationCode": "Dolorem veritatis praesentium ab."
   }' --id 8679421481036609205
`, os.Args[0])
}

func coacheeAdminLoginUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] coachee admin-login -body JSON

logs in a customer and returns a jwt
    -body JSON: 

Example:
    `+os.Args[0]+` coachee admin-login --body '{
      "email": "Et esse facere minus incidunt.",
      "password": "Et perspiciatis."
   }'
`, os.Args[0])
}
