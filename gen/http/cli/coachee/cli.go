// Code generated by goa v3.0.7, DO NOT EDIT.
//
// coachee HTTP client CLI support package
//
// Command:
// $ goa gen coachee-backend/design

package cli

import (
	coacheec "coachee-backend/gen/http/coachee/client"
	"flag"
	"fmt"
	"net/http"
	"os"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `coachee (get-coaches|get-coach|len-coaches|create-coach|update-coach|create-certification|delete-certification|create-program|delete-program|create-availability|delete-availability|create-client|client-login|create-order)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` coachee get-coaches --tag "Esse et consequatur consectetur aut similique." --limit 16068596096682061515 --page 3611529360695945689` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		coacheeFlags = flag.NewFlagSet("coachee", flag.ContinueOnError)

		coacheeGetCoachesFlags     = flag.NewFlagSet("get-coaches", flag.ExitOnError)
		coacheeGetCoachesTagFlag   = coacheeGetCoachesFlags.String("tag", "", "")
		coacheeGetCoachesLimitFlag = coacheeGetCoachesFlags.String("limit", "", "")
		coacheeGetCoachesPageFlag  = coacheeGetCoachesFlags.String("page", "", "")

		coacheeGetCoachFlags  = flag.NewFlagSet("get-coach", flag.ExitOnError)
		coacheeGetCoachIDFlag = coacheeGetCoachFlags.String("id", "REQUIRED", "")

		coacheeLenCoachesFlags   = flag.NewFlagSet("len-coaches", flag.ExitOnError)
		coacheeLenCoachesTagFlag = coacheeLenCoachesFlags.String("tag", "REQUIRED", "")

		coacheeCreateCoachFlags    = flag.NewFlagSet("create-coach", flag.ExitOnError)
		coacheeCreateCoachBodyFlag = coacheeCreateCoachFlags.String("body", "REQUIRED", "")

		coacheeUpdateCoachFlags    = flag.NewFlagSet("update-coach", flag.ExitOnError)
		coacheeUpdateCoachBodyFlag = coacheeUpdateCoachFlags.String("body", "REQUIRED", "")
		coacheeUpdateCoachIDFlag   = coacheeUpdateCoachFlags.String("id", "REQUIRED", "")

		coacheeCreateCertificationFlags    = flag.NewFlagSet("create-certification", flag.ExitOnError)
		coacheeCreateCertificationBodyFlag = coacheeCreateCertificationFlags.String("body", "REQUIRED", "")
		coacheeCreateCertificationIDFlag   = coacheeCreateCertificationFlags.String("id", "REQUIRED", "")

		coacheeDeleteCertificationFlags      = flag.NewFlagSet("delete-certification", flag.ExitOnError)
		coacheeDeleteCertificationIDFlag     = coacheeDeleteCertificationFlags.String("id", "REQUIRED", "")
		coacheeDeleteCertificationCertIDFlag = coacheeDeleteCertificationFlags.String("cert-id", "REQUIRED", "")

		coacheeCreateProgramFlags    = flag.NewFlagSet("create-program", flag.ExitOnError)
		coacheeCreateProgramBodyFlag = coacheeCreateProgramFlags.String("body", "REQUIRED", "")
		coacheeCreateProgramIDFlag   = coacheeCreateProgramFlags.String("id", "REQUIRED", "")

		coacheeDeleteProgramFlags         = flag.NewFlagSet("delete-program", flag.ExitOnError)
		coacheeDeleteProgramIDFlag        = coacheeDeleteProgramFlags.String("id", "REQUIRED", "")
		coacheeDeleteProgramProgramIDFlag = coacheeDeleteProgramFlags.String("program-id", "REQUIRED", "")

		coacheeCreateAvailabilityFlags    = flag.NewFlagSet("create-availability", flag.ExitOnError)
		coacheeCreateAvailabilityBodyFlag = coacheeCreateAvailabilityFlags.String("body", "REQUIRED", "")
		coacheeCreateAvailabilityIDFlag   = coacheeCreateAvailabilityFlags.String("id", "REQUIRED", "")

		coacheeDeleteAvailabilityFlags    = flag.NewFlagSet("delete-availability", flag.ExitOnError)
		coacheeDeleteAvailabilityIDFlag   = coacheeDeleteAvailabilityFlags.String("id", "REQUIRED", "")
		coacheeDeleteAvailabilityAvIDFlag = coacheeDeleteAvailabilityFlags.String("av-id", "REQUIRED", "")

		coacheeCreateClientFlags    = flag.NewFlagSet("create-client", flag.ExitOnError)
		coacheeCreateClientBodyFlag = coacheeCreateClientFlags.String("body", "REQUIRED", "")

		coacheeClientLoginFlags    = flag.NewFlagSet("client-login", flag.ExitOnError)
		coacheeClientLoginBodyFlag = coacheeClientLoginFlags.String("body", "REQUIRED", "")

		coacheeCreateOrderFlags     = flag.NewFlagSet("create-order", flag.ExitOnError)
		coacheeCreateOrderBodyFlag  = coacheeCreateOrderFlags.String("body", "REQUIRED", "")
		coacheeCreateOrderTokenFlag = coacheeCreateOrderFlags.String("token", "REQUIRED", "")
	)
	coacheeFlags.Usage = coacheeUsage
	coacheeGetCoachesFlags.Usage = coacheeGetCoachesUsage
	coacheeGetCoachFlags.Usage = coacheeGetCoachUsage
	coacheeLenCoachesFlags.Usage = coacheeLenCoachesUsage
	coacheeCreateCoachFlags.Usage = coacheeCreateCoachUsage
	coacheeUpdateCoachFlags.Usage = coacheeUpdateCoachUsage
	coacheeCreateCertificationFlags.Usage = coacheeCreateCertificationUsage
	coacheeDeleteCertificationFlags.Usage = coacheeDeleteCertificationUsage
	coacheeCreateProgramFlags.Usage = coacheeCreateProgramUsage
	coacheeDeleteProgramFlags.Usage = coacheeDeleteProgramUsage
	coacheeCreateAvailabilityFlags.Usage = coacheeCreateAvailabilityUsage
	coacheeDeleteAvailabilityFlags.Usage = coacheeDeleteAvailabilityUsage
	coacheeCreateClientFlags.Usage = coacheeCreateClientUsage
	coacheeClientLoginFlags.Usage = coacheeClientLoginUsage
	coacheeCreateOrderFlags.Usage = coacheeCreateOrderUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "coachee":
			svcf = coacheeFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "coachee":
			switch epn {
			case "get-coaches":
				epf = coacheeGetCoachesFlags

			case "get-coach":
				epf = coacheeGetCoachFlags

			case "len-coaches":
				epf = coacheeLenCoachesFlags

			case "create-coach":
				epf = coacheeCreateCoachFlags

			case "update-coach":
				epf = coacheeUpdateCoachFlags

			case "create-certification":
				epf = coacheeCreateCertificationFlags

			case "delete-certification":
				epf = coacheeDeleteCertificationFlags

			case "create-program":
				epf = coacheeCreateProgramFlags

			case "delete-program":
				epf = coacheeDeleteProgramFlags

			case "create-availability":
				epf = coacheeCreateAvailabilityFlags

			case "delete-availability":
				epf = coacheeDeleteAvailabilityFlags

			case "create-client":
				epf = coacheeCreateClientFlags

			case "client-login":
				epf = coacheeClientLoginFlags

			case "create-order":
				epf = coacheeCreateOrderFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "coachee":
			c := coacheec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get-coaches":
				endpoint = c.GetCoaches()
				data, err = coacheec.BuildGetCoachesPayload(*coacheeGetCoachesTagFlag, *coacheeGetCoachesLimitFlag, *coacheeGetCoachesPageFlag)
			case "get-coach":
				endpoint = c.GetCoach()
				data, err = coacheec.BuildGetCoachPayload(*coacheeGetCoachIDFlag)
			case "len-coaches":
				endpoint = c.LenCoaches()
				data, err = coacheec.BuildLenCoachesPayload(*coacheeLenCoachesTagFlag)
			case "create-coach":
				endpoint = c.CreateCoach()
				data, err = coacheec.BuildCreateCoachPayload(*coacheeCreateCoachBodyFlag)
			case "update-coach":
				endpoint = c.UpdateCoach()
				data, err = coacheec.BuildUpdateCoachPayload(*coacheeUpdateCoachBodyFlag, *coacheeUpdateCoachIDFlag)
			case "create-certification":
				endpoint = c.CreateCertification()
				data, err = coacheec.BuildCreateCertificationPayload(*coacheeCreateCertificationBodyFlag, *coacheeCreateCertificationIDFlag)
			case "delete-certification":
				endpoint = c.DeleteCertification()
				data, err = coacheec.BuildDeleteCertificationPayload(*coacheeDeleteCertificationIDFlag, *coacheeDeleteCertificationCertIDFlag)
			case "create-program":
				endpoint = c.CreateProgram()
				data, err = coacheec.BuildCreateProgramPayload(*coacheeCreateProgramBodyFlag, *coacheeCreateProgramIDFlag)
			case "delete-program":
				endpoint = c.DeleteProgram()
				data, err = coacheec.BuildDeleteProgramPayload(*coacheeDeleteProgramIDFlag, *coacheeDeleteProgramProgramIDFlag)
			case "create-availability":
				endpoint = c.CreateAvailability()
				data, err = coacheec.BuildCreateAvailabilityPayload(*coacheeCreateAvailabilityBodyFlag, *coacheeCreateAvailabilityIDFlag)
			case "delete-availability":
				endpoint = c.DeleteAvailability()
				data, err = coacheec.BuildDeleteAvailabilityPayload(*coacheeDeleteAvailabilityIDFlag, *coacheeDeleteAvailabilityAvIDFlag)
			case "create-client":
				endpoint = c.CreateClient()
				data, err = coacheec.BuildCreateClientPayload(*coacheeCreateClientBodyFlag)
			case "client-login":
				endpoint = c.ClientLogin()
				data, err = coacheec.BuildClientLoginPayload(*coacheeClientLoginBodyFlag)
			case "create-order":
				endpoint = c.CreateOrder()
				data, err = coacheec.BuildCreateOrderPayload(*coacheeCreateOrderBodyFlag, *coacheeCreateOrderTokenFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// coacheeUsage displays the usage of the coachee command and its subcommands.
func coacheeUsage() {
	fmt.Fprintf(os.Stderr, `The coachee service performs operations on coachees
Usage:
    %s [globalflags] coachee COMMAND [flags]

COMMAND:
    get-coaches: GetCoaches returns an array of coaches according to a tag and pagination
    get-coach: GetCoach returns one coach according to the id
    len-coaches: LenCoaches returns the amount of coaches with a given tag
    create-coach: CreateCoaches creates a base coach
    update-coach: UpdateCoaches updates a coach
    create-certification: creates a certification for a coach
    delete-certification: deletes a certification for a coach
    create-program: creates a program for a coach
    delete-program: deletes a program for a coach
    create-availability: creates an availability for a coach
    delete-availability: deletes an availability for a coach
    create-client: creates a new client
    client-login: ClientLogin implements ClientLogin.
    create-order: CreateOrder implements CreateOrder.

Additional help:
    %s coachee COMMAND --help
`, os.Args[0], os.Args[0])
}
func coacheeGetCoachesUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] coachee get-coaches -tag STRING -limit UINT -page UINT

GetCoaches returns an array of coaches according to a tag and pagination
    -tag STRING: 
    -limit UINT: 
    -page UINT: 

Example:
    `+os.Args[0]+` coachee get-coaches --tag "Esse et consequatur consectetur aut similique." --limit 16068596096682061515 --page 3611529360695945689
`, os.Args[0])
}

func coacheeGetCoachUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] coachee get-coach -id UINT

GetCoach returns one coach according to the id
    -id UINT: 

Example:
    `+os.Args[0]+` coachee get-coach --id 4483883602800015062
`, os.Args[0])
}

func coacheeLenCoachesUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] coachee len-coaches -tag STRING

LenCoaches returns the amount of coaches with a given tag
    -tag STRING: 

Example:
    `+os.Args[0]+` coachee len-coaches --tag "Dolores occaecati."
`, os.Args[0])
}

func coacheeCreateCoachUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] coachee create-coach -body JSON

CreateCoaches creates a base coach
    -body JSON: 

Example:
    `+os.Args[0]+` coachee create-coach --body '{
      "city": "Qui facilis dolorem debitis assumenda.",
      "country": "Eligendi et.",
      "description": "Debitis omnis in aperiam.",
      "email": "Explicabo ratione qui minima quis hic sit.",
      "firstName": "Officia soluta quo deserunt aperiam.",
      "introCall": 451748246373320723,
      "lastName": "Ipsa quas et fuga quod suscipit.",
      "phone": "Ipsam similique eum iusto.",
      "tags": "Voluptas rerum amet id deserunt natus.",
      "textAvailability": "Veritatis aut.",
      "textCertifications": "Amet dolor sunt eos illo.",
      "textPrograms": "Quia blanditiis doloribus nam facilis.",
      "vat": "Est culpa."
   }'
`, os.Args[0])
}

func coacheeUpdateCoachUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] coachee update-coach -body JSON -id UINT

UpdateCoaches updates a coach
    -body JSON: 
    -id UINT: 

Example:
    `+os.Args[0]+` coachee update-coach --body '{
      "city": "Fuga saepe sed.",
      "country": "Quia voluptatem.",
      "description": "Provident porro doloremque repellendus nemo.",
      "email": "Vitae harum facere ipsa.",
      "firstName": "Ut qui blanditiis quidem.",
      "introCall": 15043846176844080561,
      "lastName": "Accusamus mollitia reiciendis tenetur rerum nulla optio.",
      "phone": "Et excepturi natus nesciunt.",
      "pictureURL": "Ut inventore fugit.",
      "stripeID": "Autem voluptatem.",
      "tags": "Nisi quam.",
      "vat": "Delectus culpa doloremque aliquid."
   }' --id 8038638046323833459
`, os.Args[0])
}

func coacheeCreateCertificationUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] coachee create-certification -body JSON -id UINT

creates a certification for a coach
    -body JSON: 
    -id UINT: 

Example:
    `+os.Args[0]+` coachee create-certification --body '{
      "certification": {
         "description": "Vero autem magnam rerum ut autem harum.",
         "id": "Ad recusandae quam et sint.",
         "institution": "Beatae vel repellat id aperiam.",
         "month": 10,
         "title": "Qui rerum laborum sapiente quae magnam.",
         "year": 1959
      }
   }' --id 13659283597111527733
`, os.Args[0])
}

func coacheeDeleteCertificationUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] coachee delete-certification -id UINT -cert-id STRING

deletes a certification for a coach
    -id UINT: 
    -cert-id STRING: 

Example:
    `+os.Args[0]+` coachee delete-certification --id 12675447856291688887 --cert-id "Ut qui laboriosam id."
`, os.Args[0])
}

func coacheeCreateProgramUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] coachee create-program -body JSON -id UINT

creates a program for a coach
    -body JSON: 
    -id UINT: 

Example:
    `+os.Args[0]+` coachee create-program --body '{
      "program": {
         "description": "Repellat unde aut.",
         "duration": 11845361742039694476,
         "id": "Autem iste sint.",
         "name": "Eum veritatis beatae et sit rerum quos.",
         "sessions": 2126254008409021945,
         "taxPercent": 14506047937107924084,
         "totalPrice": 1190255483809000271
      }
   }' --id 6971254298652483444
`, os.Args[0])
}

func coacheeDeleteProgramUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] coachee delete-program -id UINT -program-id STRING

deletes a program for a coach
    -id UINT: 
    -program-id STRING: 

Example:
    `+os.Args[0]+` coachee delete-program --id 16848904824471183254 --program-id "Fugit et provident dolore."
`, os.Args[0])
}

func coacheeCreateAvailabilityUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] coachee create-availability -body JSON -id UINT

creates an availability for a coach
    -body JSON: 
    -id UINT: 

Example:
    `+os.Args[0]+` coachee create-availability --body '{
      "availability": {
         "end": 218,
         "id": "Dolor sit dolor tempore iusto possimus.",
         "start": 476,
         "weekDay": 1
      }
   }' --id 8773217409997915789
`, os.Args[0])
}

func coacheeDeleteAvailabilityUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] coachee delete-availability -id UINT -av-id STRING

deletes an availability for a coach
    -id UINT: 
    -av-id STRING: 

Example:
    `+os.Args[0]+` coachee delete-availability --id 16462304433837686273 --av-id "Vel ut consectetur."
`, os.Args[0])
}

func coacheeCreateClientUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] coachee create-client -body JSON

creates a new client
    -body JSON: 

Example:
    `+os.Args[0]+` coachee create-client --body '{
      "birthDate": 7196961293087192095,
      "email": "Atque aliquid consequatur velit voluptatem ab.",
      "firstName": "Quaerat neque sunt.",
      "lastName": "Consequuntur vitae id fugit.",
      "password": "Possimus perferendis tempore accusantium."
   }'
`, os.Args[0])
}

func coacheeClientLoginUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] coachee client-login -body JSON

ClientLogin implements ClientLogin.
    -body JSON: 

Example:
    `+os.Args[0]+` coachee client-login --body '{
      "email": "Esse placeat consequatur cum dolorem quo.",
      "password": "Dolorum reprehenderit exercitationem est dolores."
   }'
`, os.Args[0])
}

func coacheeCreateOrderUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] coachee create-order -body JSON -token STRING

CreateOrder implements CreateOrder.
    -body JSON: 
    -token STRING: 

Example:
    `+os.Args[0]+` coachee create-order --body '{
      "coachId": 14328094355199033495,
      "introCall": 4169979388743895707,
      "programId": "Exercitationem culpa."
   }' --token "Quas assumenda ratione sit."
`, os.Args[0])
}
